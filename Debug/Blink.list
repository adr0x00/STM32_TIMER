
Blink.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003088  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  08003148  08003148  00004148  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003200  08003200  00005070  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08003200  08003200  00005070  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08003200  08003200  00005070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003200  08003200  00004200  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003204  08003204  00004204  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  08003208  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001d0  20000070  08003278  00005070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000240  08003278  00005240  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00005070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006dff  00000000  00000000  00005098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000018fc  00000000  00000000  0000be97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007d0  00000000  00000000  0000d798  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000005e1  00000000  00000000  0000df68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000f774  00000000  00000000  0000e549  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a37b  00000000  00000000  0001dcbd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00058de3  00000000  00000000  00028038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00080e1b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001f68  00000000  00000000  00080e60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  00082dc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003130 	.word	0x08003130

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	08003130 	.word	0x08003130

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	@ 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f8f0 	bl	8000404 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			@ (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__divsi3>:
 8000230:	4603      	mov	r3, r0
 8000232:	430b      	orrs	r3, r1
 8000234:	d47f      	bmi.n	8000336 <__divsi3+0x106>
 8000236:	2200      	movs	r2, #0
 8000238:	0843      	lsrs	r3, r0, #1
 800023a:	428b      	cmp	r3, r1
 800023c:	d374      	bcc.n	8000328 <__divsi3+0xf8>
 800023e:	0903      	lsrs	r3, r0, #4
 8000240:	428b      	cmp	r3, r1
 8000242:	d35f      	bcc.n	8000304 <__divsi3+0xd4>
 8000244:	0a03      	lsrs	r3, r0, #8
 8000246:	428b      	cmp	r3, r1
 8000248:	d344      	bcc.n	80002d4 <__divsi3+0xa4>
 800024a:	0b03      	lsrs	r3, r0, #12
 800024c:	428b      	cmp	r3, r1
 800024e:	d328      	bcc.n	80002a2 <__divsi3+0x72>
 8000250:	0c03      	lsrs	r3, r0, #16
 8000252:	428b      	cmp	r3, r1
 8000254:	d30d      	bcc.n	8000272 <__divsi3+0x42>
 8000256:	22ff      	movs	r2, #255	@ 0xff
 8000258:	0209      	lsls	r1, r1, #8
 800025a:	ba12      	rev	r2, r2
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d302      	bcc.n	8000268 <__divsi3+0x38>
 8000262:	1212      	asrs	r2, r2, #8
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	d065      	beq.n	8000334 <__divsi3+0x104>
 8000268:	0b03      	lsrs	r3, r0, #12
 800026a:	428b      	cmp	r3, r1
 800026c:	d319      	bcc.n	80002a2 <__divsi3+0x72>
 800026e:	e000      	b.n	8000272 <__divsi3+0x42>
 8000270:	0a09      	lsrs	r1, r1, #8
 8000272:	0bc3      	lsrs	r3, r0, #15
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x4c>
 8000278:	03cb      	lsls	r3, r1, #15
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b83      	lsrs	r3, r0, #14
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x58>
 8000284:	038b      	lsls	r3, r1, #14
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b43      	lsrs	r3, r0, #13
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x64>
 8000290:	034b      	lsls	r3, r1, #13
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b03      	lsrs	r3, r0, #12
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x70>
 800029c:	030b      	lsls	r3, r1, #12
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0ac3      	lsrs	r3, r0, #11
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x7c>
 80002a8:	02cb      	lsls	r3, r1, #11
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a83      	lsrs	r3, r0, #10
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x88>
 80002b4:	028b      	lsls	r3, r1, #10
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a43      	lsrs	r3, r0, #9
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x94>
 80002c0:	024b      	lsls	r3, r1, #9
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a03      	lsrs	r3, r0, #8
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0xa0>
 80002cc:	020b      	lsls	r3, r1, #8
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	d2cd      	bcs.n	8000270 <__divsi3+0x40>
 80002d4:	09c3      	lsrs	r3, r0, #7
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xae>
 80002da:	01cb      	lsls	r3, r1, #7
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0983      	lsrs	r3, r0, #6
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xba>
 80002e6:	018b      	lsls	r3, r1, #6
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0943      	lsrs	r3, r0, #5
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xc6>
 80002f2:	014b      	lsls	r3, r1, #5
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0903      	lsrs	r3, r0, #4
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xd2>
 80002fe:	010b      	lsls	r3, r1, #4
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	08c3      	lsrs	r3, r0, #3
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xde>
 800030a:	00cb      	lsls	r3, r1, #3
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0883      	lsrs	r3, r0, #2
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xea>
 8000316:	008b      	lsls	r3, r1, #2
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0843      	lsrs	r3, r0, #1
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xf6>
 8000322:	004b      	lsls	r3, r1, #1
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	1a41      	subs	r1, r0, r1
 800032a:	d200      	bcs.n	800032e <__divsi3+0xfe>
 800032c:	4601      	mov	r1, r0
 800032e:	4152      	adcs	r2, r2
 8000330:	4610      	mov	r0, r2
 8000332:	4770      	bx	lr
 8000334:	e05d      	b.n	80003f2 <__divsi3+0x1c2>
 8000336:	0fca      	lsrs	r2, r1, #31
 8000338:	d000      	beq.n	800033c <__divsi3+0x10c>
 800033a:	4249      	negs	r1, r1
 800033c:	1003      	asrs	r3, r0, #32
 800033e:	d300      	bcc.n	8000342 <__divsi3+0x112>
 8000340:	4240      	negs	r0, r0
 8000342:	4053      	eors	r3, r2
 8000344:	2200      	movs	r2, #0
 8000346:	469c      	mov	ip, r3
 8000348:	0903      	lsrs	r3, r0, #4
 800034a:	428b      	cmp	r3, r1
 800034c:	d32d      	bcc.n	80003aa <__divsi3+0x17a>
 800034e:	0a03      	lsrs	r3, r0, #8
 8000350:	428b      	cmp	r3, r1
 8000352:	d312      	bcc.n	800037a <__divsi3+0x14a>
 8000354:	22fc      	movs	r2, #252	@ 0xfc
 8000356:	0189      	lsls	r1, r1, #6
 8000358:	ba12      	rev	r2, r2
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d30c      	bcc.n	800037a <__divsi3+0x14a>
 8000360:	0189      	lsls	r1, r1, #6
 8000362:	1192      	asrs	r2, r2, #6
 8000364:	428b      	cmp	r3, r1
 8000366:	d308      	bcc.n	800037a <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	1192      	asrs	r2, r2, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d304      	bcc.n	800037a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	d03a      	beq.n	80003ea <__divsi3+0x1ba>
 8000374:	1192      	asrs	r2, r2, #6
 8000376:	e000      	b.n	800037a <__divsi3+0x14a>
 8000378:	0989      	lsrs	r1, r1, #6
 800037a:	09c3      	lsrs	r3, r0, #7
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x154>
 8000380:	01cb      	lsls	r3, r1, #7
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0983      	lsrs	r3, r0, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x160>
 800038c:	018b      	lsls	r3, r1, #6
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0943      	lsrs	r3, r0, #5
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x16c>
 8000398:	014b      	lsls	r3, r1, #5
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0903      	lsrs	r3, r0, #4
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x178>
 80003a4:	010b      	lsls	r3, r1, #4
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	08c3      	lsrs	r3, r0, #3
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x184>
 80003b0:	00cb      	lsls	r3, r1, #3
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0883      	lsrs	r3, r0, #2
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x190>
 80003bc:	008b      	lsls	r3, r1, #2
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	d2d9      	bcs.n	8000378 <__divsi3+0x148>
 80003c4:	0843      	lsrs	r3, r0, #1
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d301      	bcc.n	80003ce <__divsi3+0x19e>
 80003ca:	004b      	lsls	r3, r1, #1
 80003cc:	1ac0      	subs	r0, r0, r3
 80003ce:	4152      	adcs	r2, r2
 80003d0:	1a41      	subs	r1, r0, r1
 80003d2:	d200      	bcs.n	80003d6 <__divsi3+0x1a6>
 80003d4:	4601      	mov	r1, r0
 80003d6:	4663      	mov	r3, ip
 80003d8:	4152      	adcs	r2, r2
 80003da:	105b      	asrs	r3, r3, #1
 80003dc:	4610      	mov	r0, r2
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x1b4>
 80003e0:	4240      	negs	r0, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d500      	bpl.n	80003e8 <__divsi3+0x1b8>
 80003e6:	4249      	negs	r1, r1
 80003e8:	4770      	bx	lr
 80003ea:	4663      	mov	r3, ip
 80003ec:	105b      	asrs	r3, r3, #1
 80003ee:	d300      	bcc.n	80003f2 <__divsi3+0x1c2>
 80003f0:	4240      	negs	r0, r0
 80003f2:	b501      	push	{r0, lr}
 80003f4:	2000      	movs	r0, #0
 80003f6:	f000 f805 	bl	8000404 <__aeabi_idiv0>
 80003fa:	bd02      	pop	{r1, pc}

080003fc <__aeabi_idivmod>:
 80003fc:	2900      	cmp	r1, #0
 80003fe:	d0f8      	beq.n	80003f2 <__divsi3+0x1c2>
 8000400:	e716      	b.n	8000230 <__divsi3>
 8000402:	4770      	bx	lr

08000404 <__aeabi_idiv0>:
 8000404:	4770      	bx	lr
 8000406:	46c0      	nop			@ (mov r8, r8)

08000408 <HD44780_Init>:
        0b00000
};


void HD44780_Init(uint8_t rows)
{
 8000408:	b580      	push	{r7, lr}
 800040a:	b082      	sub	sp, #8
 800040c:	af00      	add	r7, sp, #0
 800040e:	0002      	movs	r2, r0
 8000410:	1dfb      	adds	r3, r7, #7
 8000412:	701a      	strb	r2, [r3, #0]
  dpRows = rows;
 8000414:	4b3a      	ldr	r3, [pc, #232]	@ (8000500 <HD44780_Init+0xf8>)
 8000416:	1dfa      	adds	r2, r7, #7
 8000418:	7812      	ldrb	r2, [r2, #0]
 800041a:	701a      	strb	r2, [r3, #0]

  dpBacklight = LCD_BACKLIGHT;
 800041c:	4b39      	ldr	r3, [pc, #228]	@ (8000504 <HD44780_Init+0xfc>)
 800041e:	2208      	movs	r2, #8
 8000420:	701a      	strb	r2, [r3, #0]

  dpFunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 8000422:	4b39      	ldr	r3, [pc, #228]	@ (8000508 <HD44780_Init+0x100>)
 8000424:	2200      	movs	r2, #0
 8000426:	701a      	strb	r2, [r3, #0]

  if (dpRows > 1)
 8000428:	4b35      	ldr	r3, [pc, #212]	@ (8000500 <HD44780_Init+0xf8>)
 800042a:	781b      	ldrb	r3, [r3, #0]
 800042c:	2b01      	cmp	r3, #1
 800042e:	d907      	bls.n	8000440 <HD44780_Init+0x38>
  {
    dpFunction |= LCD_2LINE;
 8000430:	4b35      	ldr	r3, [pc, #212]	@ (8000508 <HD44780_Init+0x100>)
 8000432:	781b      	ldrb	r3, [r3, #0]
 8000434:	2208      	movs	r2, #8
 8000436:	4313      	orrs	r3, r2
 8000438:	b2da      	uxtb	r2, r3
 800043a:	4b33      	ldr	r3, [pc, #204]	@ (8000508 <HD44780_Init+0x100>)
 800043c:	701a      	strb	r2, [r3, #0]
 800043e:	e006      	b.n	800044e <HD44780_Init+0x46>
  }
  else
  {
    dpFunction |= LCD_5x10DOTS;
 8000440:	4b31      	ldr	r3, [pc, #196]	@ (8000508 <HD44780_Init+0x100>)
 8000442:	781b      	ldrb	r3, [r3, #0]
 8000444:	2204      	movs	r2, #4
 8000446:	4313      	orrs	r3, r2
 8000448:	b2da      	uxtb	r2, r3
 800044a:	4b2f      	ldr	r3, [pc, #188]	@ (8000508 <HD44780_Init+0x100>)
 800044c:	701a      	strb	r2, [r3, #0]
  }

  /* Wait for initialization */
  DelayInit();
 800044e:	f000 f9b3 	bl	80007b8 <DelayInit>
  HAL_Delay(50);
 8000452:	2032      	movs	r0, #50	@ 0x32
 8000454:	f000 fda4 	bl	8000fa0 <HAL_Delay>

  ExpanderWrite(dpBacklight);
 8000458:	4b2a      	ldr	r3, [pc, #168]	@ (8000504 <HD44780_Init+0xfc>)
 800045a:	781b      	ldrb	r3, [r3, #0]
 800045c:	0018      	movs	r0, r3
 800045e:	f000 f96b 	bl	8000738 <ExpanderWrite>
  HAL_Delay(1000);
 8000462:	23fa      	movs	r3, #250	@ 0xfa
 8000464:	009b      	lsls	r3, r3, #2
 8000466:	0018      	movs	r0, r3
 8000468:	f000 fd9a 	bl	8000fa0 <HAL_Delay>

  /* 4bit Mode */
  Write4Bits(0x03 << 4);
 800046c:	2030      	movs	r0, #48	@ 0x30
 800046e:	f000 f94e 	bl	800070e <Write4Bits>
  DelayUS(4500);
 8000472:	4b26      	ldr	r3, [pc, #152]	@ (800050c <HD44780_Init+0x104>)
 8000474:	0018      	movs	r0, r3
 8000476:	f000 f9c9 	bl	800080c <DelayUS>

  Write4Bits(0x03 << 4);
 800047a:	2030      	movs	r0, #48	@ 0x30
 800047c:	f000 f947 	bl	800070e <Write4Bits>
  DelayUS(4500);
 8000480:	4b22      	ldr	r3, [pc, #136]	@ (800050c <HD44780_Init+0x104>)
 8000482:	0018      	movs	r0, r3
 8000484:	f000 f9c2 	bl	800080c <DelayUS>

  Write4Bits(0x03 << 4);
 8000488:	2030      	movs	r0, #48	@ 0x30
 800048a:	f000 f940 	bl	800070e <Write4Bits>
  DelayUS(4500);
 800048e:	4b1f      	ldr	r3, [pc, #124]	@ (800050c <HD44780_Init+0x104>)
 8000490:	0018      	movs	r0, r3
 8000492:	f000 f9bb 	bl	800080c <DelayUS>

  Write4Bits(0x02 << 4);
 8000496:	2020      	movs	r0, #32
 8000498:	f000 f939 	bl	800070e <Write4Bits>
  DelayUS(100);
 800049c:	2064      	movs	r0, #100	@ 0x64
 800049e:	f000 f9b5 	bl	800080c <DelayUS>

  /* Display Control */
  SendCommand(LCD_FUNCTIONSET | dpFunction);
 80004a2:	4b19      	ldr	r3, [pc, #100]	@ (8000508 <HD44780_Init+0x100>)
 80004a4:	781b      	ldrb	r3, [r3, #0]
 80004a6:	2220      	movs	r2, #32
 80004a8:	4313      	orrs	r3, r2
 80004aa:	b2db      	uxtb	r3, r3
 80004ac:	0018      	movs	r0, r3
 80004ae:	f000 f8e2 	bl	8000676 <SendCommand>

  dpControl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 80004b2:	4b17      	ldr	r3, [pc, #92]	@ (8000510 <HD44780_Init+0x108>)
 80004b4:	2204      	movs	r2, #4
 80004b6:	701a      	strb	r2, [r3, #0]
  HD44780_Display();
 80004b8:	f000 f884 	bl	80005c4 <HD44780_Display>
  HD44780_Clear();
 80004bc:	f000 f830 	bl	8000520 <HD44780_Clear>

  /* Display Mode */
  dpMode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 80004c0:	4b14      	ldr	r3, [pc, #80]	@ (8000514 <HD44780_Init+0x10c>)
 80004c2:	2202      	movs	r2, #2
 80004c4:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_ENTRYMODESET | dpMode);
 80004c6:	4b13      	ldr	r3, [pc, #76]	@ (8000514 <HD44780_Init+0x10c>)
 80004c8:	781b      	ldrb	r3, [r3, #0]
 80004ca:	2204      	movs	r2, #4
 80004cc:	4313      	orrs	r3, r2
 80004ce:	b2db      	uxtb	r3, r3
 80004d0:	0018      	movs	r0, r3
 80004d2:	f000 f8d0 	bl	8000676 <SendCommand>
  DelayUS(4500);
 80004d6:	4b0d      	ldr	r3, [pc, #52]	@ (800050c <HD44780_Init+0x104>)
 80004d8:	0018      	movs	r0, r3
 80004da:	f000 f997 	bl	800080c <DelayUS>

  HD44780_CreateSpecialChar(0, special1);
 80004de:	4b0e      	ldr	r3, [pc, #56]	@ (8000518 <HD44780_Init+0x110>)
 80004e0:	0019      	movs	r1, r3
 80004e2:	2000      	movs	r0, #0
 80004e4:	f000 f884 	bl	80005f0 <HD44780_CreateSpecialChar>
  HD44780_CreateSpecialChar(1, special2);
 80004e8:	4b0c      	ldr	r3, [pc, #48]	@ (800051c <HD44780_Init+0x114>)
 80004ea:	0019      	movs	r1, r3
 80004ec:	2001      	movs	r0, #1
 80004ee:	f000 f87f 	bl	80005f0 <HD44780_CreateSpecialChar>

  HD44780_Home();
 80004f2:	f000 f822 	bl	800053a <HD44780_Home>
}
 80004f6:	46c0      	nop			@ (mov r8, r8)
 80004f8:	46bd      	mov	sp, r7
 80004fa:	b002      	add	sp, #8
 80004fc:	bd80      	pop	{r7, pc}
 80004fe:	46c0      	nop			@ (mov r8, r8)
 8000500:	2000008f 	.word	0x2000008f
 8000504:	20000090 	.word	0x20000090
 8000508:	2000008c 	.word	0x2000008c
 800050c:	00001194 	.word	0x00001194
 8000510:	2000008d 	.word	0x2000008d
 8000514:	2000008e 	.word	0x2000008e
 8000518:	20000000 	.word	0x20000000
 800051c:	20000008 	.word	0x20000008

08000520 <HD44780_Clear>:

void HD44780_Clear()
{
 8000520:	b580      	push	{r7, lr}
 8000522:	af00      	add	r7, sp, #0
  SendCommand(LCD_CLEARDISPLAY);
 8000524:	2001      	movs	r0, #1
 8000526:	f000 f8a6 	bl	8000676 <SendCommand>
  DelayUS(2000);
 800052a:	23fa      	movs	r3, #250	@ 0xfa
 800052c:	00db      	lsls	r3, r3, #3
 800052e:	0018      	movs	r0, r3
 8000530:	f000 f96c 	bl	800080c <DelayUS>
}
 8000534:	46c0      	nop			@ (mov r8, r8)
 8000536:	46bd      	mov	sp, r7
 8000538:	bd80      	pop	{r7, pc}

0800053a <HD44780_Home>:

void HD44780_Home()
{
 800053a:	b580      	push	{r7, lr}
 800053c:	af00      	add	r7, sp, #0
  SendCommand(LCD_RETURNHOME);
 800053e:	2002      	movs	r0, #2
 8000540:	f000 f899 	bl	8000676 <SendCommand>
  DelayUS(2000);
 8000544:	23fa      	movs	r3, #250	@ 0xfa
 8000546:	00db      	lsls	r3, r3, #3
 8000548:	0018      	movs	r0, r3
 800054a:	f000 f95f 	bl	800080c <DelayUS>
}
 800054e:	46c0      	nop			@ (mov r8, r8)
 8000550:	46bd      	mov	sp, r7
 8000552:	bd80      	pop	{r7, pc}

08000554 <HD44780_SetCursor>:

void HD44780_SetCursor(uint8_t col, uint8_t row)
{
 8000554:	b590      	push	{r4, r7, lr}
 8000556:	b087      	sub	sp, #28
 8000558:	af00      	add	r7, sp, #0
 800055a:	0002      	movs	r2, r0
 800055c:	1dfb      	adds	r3, r7, #7
 800055e:	701a      	strb	r2, [r3, #0]
 8000560:	1dbb      	adds	r3, r7, #6
 8000562:	1c0a      	adds	r2, r1, #0
 8000564:	701a      	strb	r2, [r3, #0]
  int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 8000566:	2308      	movs	r3, #8
 8000568:	18fb      	adds	r3, r7, r3
 800056a:	4a14      	ldr	r2, [pc, #80]	@ (80005bc <HD44780_SetCursor+0x68>)
 800056c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800056e:	c313      	stmia	r3!, {r0, r1, r4}
 8000570:	6812      	ldr	r2, [r2, #0]
 8000572:	601a      	str	r2, [r3, #0]
  if (row >= dpRows)
 8000574:	4b12      	ldr	r3, [pc, #72]	@ (80005c0 <HD44780_SetCursor+0x6c>)
 8000576:	781b      	ldrb	r3, [r3, #0]
 8000578:	1dba      	adds	r2, r7, #6
 800057a:	7812      	ldrb	r2, [r2, #0]
 800057c:	429a      	cmp	r2, r3
 800057e:	d304      	bcc.n	800058a <HD44780_SetCursor+0x36>
  {
    row = dpRows-1;
 8000580:	4b0f      	ldr	r3, [pc, #60]	@ (80005c0 <HD44780_SetCursor+0x6c>)
 8000582:	781a      	ldrb	r2, [r3, #0]
 8000584:	1dbb      	adds	r3, r7, #6
 8000586:	3a01      	subs	r2, #1
 8000588:	701a      	strb	r2, [r3, #0]
  }
  SendCommand(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 800058a:	1dbb      	adds	r3, r7, #6
 800058c:	781a      	ldrb	r2, [r3, #0]
 800058e:	2308      	movs	r3, #8
 8000590:	18fb      	adds	r3, r7, r3
 8000592:	0092      	lsls	r2, r2, #2
 8000594:	58d3      	ldr	r3, [r2, r3]
 8000596:	b2da      	uxtb	r2, r3
 8000598:	1dfb      	adds	r3, r7, #7
 800059a:	781b      	ldrb	r3, [r3, #0]
 800059c:	18d3      	adds	r3, r2, r3
 800059e:	b2db      	uxtb	r3, r3
 80005a0:	b25b      	sxtb	r3, r3
 80005a2:	2280      	movs	r2, #128	@ 0x80
 80005a4:	4252      	negs	r2, r2
 80005a6:	4313      	orrs	r3, r2
 80005a8:	b25b      	sxtb	r3, r3
 80005aa:	b2db      	uxtb	r3, r3
 80005ac:	0018      	movs	r0, r3
 80005ae:	f000 f862 	bl	8000676 <SendCommand>
}
 80005b2:	46c0      	nop			@ (mov r8, r8)
 80005b4:	46bd      	mov	sp, r7
 80005b6:	b007      	add	sp, #28
 80005b8:	bd90      	pop	{r4, r7, pc}
 80005ba:	46c0      	nop			@ (mov r8, r8)
 80005bc:	08003148 	.word	0x08003148
 80005c0:	2000008f 	.word	0x2000008f

080005c4 <HD44780_Display>:
  dpControl &= ~LCD_DISPLAYON;
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
}

void HD44780_Display()
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	af00      	add	r7, sp, #0
  dpControl |= LCD_DISPLAYON;
 80005c8:	4b08      	ldr	r3, [pc, #32]	@ (80005ec <HD44780_Display+0x28>)
 80005ca:	781b      	ldrb	r3, [r3, #0]
 80005cc:	2204      	movs	r2, #4
 80005ce:	4313      	orrs	r3, r2
 80005d0:	b2da      	uxtb	r2, r3
 80005d2:	4b06      	ldr	r3, [pc, #24]	@ (80005ec <HD44780_Display+0x28>)
 80005d4:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 80005d6:	4b05      	ldr	r3, [pc, #20]	@ (80005ec <HD44780_Display+0x28>)
 80005d8:	781b      	ldrb	r3, [r3, #0]
 80005da:	2208      	movs	r2, #8
 80005dc:	4313      	orrs	r3, r2
 80005de:	b2db      	uxtb	r3, r3
 80005e0:	0018      	movs	r0, r3
 80005e2:	f000 f848 	bl	8000676 <SendCommand>
}
 80005e6:	46c0      	nop			@ (mov r8, r8)
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bd80      	pop	{r7, pc}
 80005ec:	2000008d 	.word	0x2000008d

080005f0 <HD44780_CreateSpecialChar>:
  dpMode &= ~LCD_ENTRYSHIFTINCREMENT;
  SendCommand(LCD_ENTRYMODESET | dpMode);
}

void HD44780_CreateSpecialChar(uint8_t location, uint8_t charmap[])
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b084      	sub	sp, #16
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	0002      	movs	r2, r0
 80005f8:	6039      	str	r1, [r7, #0]
 80005fa:	1dfb      	adds	r3, r7, #7
 80005fc:	701a      	strb	r2, [r3, #0]
  location &= 0x7;
 80005fe:	1dfb      	adds	r3, r7, #7
 8000600:	1dfa      	adds	r2, r7, #7
 8000602:	7812      	ldrb	r2, [r2, #0]
 8000604:	2107      	movs	r1, #7
 8000606:	400a      	ands	r2, r1
 8000608:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_SETCGRAMADDR | (location << 3));
 800060a:	1dfb      	adds	r3, r7, #7
 800060c:	781b      	ldrb	r3, [r3, #0]
 800060e:	b25b      	sxtb	r3, r3
 8000610:	00db      	lsls	r3, r3, #3
 8000612:	b25b      	sxtb	r3, r3
 8000614:	2240      	movs	r2, #64	@ 0x40
 8000616:	4313      	orrs	r3, r2
 8000618:	b25b      	sxtb	r3, r3
 800061a:	b2db      	uxtb	r3, r3
 800061c:	0018      	movs	r0, r3
 800061e:	f000 f82a 	bl	8000676 <SendCommand>
  for (int i=0; i<8; i++)
 8000622:	2300      	movs	r3, #0
 8000624:	60fb      	str	r3, [r7, #12]
 8000626:	e009      	b.n	800063c <HD44780_CreateSpecialChar+0x4c>
  {
    SendChar(charmap[i]);
 8000628:	68fb      	ldr	r3, [r7, #12]
 800062a:	683a      	ldr	r2, [r7, #0]
 800062c:	18d3      	adds	r3, r2, r3
 800062e:	781b      	ldrb	r3, [r3, #0]
 8000630:	0018      	movs	r0, r3
 8000632:	f000 f830 	bl	8000696 <SendChar>
  for (int i=0; i<8; i++)
 8000636:	68fb      	ldr	r3, [r7, #12]
 8000638:	3301      	adds	r3, #1
 800063a:	60fb      	str	r3, [r7, #12]
 800063c:	68fb      	ldr	r3, [r7, #12]
 800063e:	2b07      	cmp	r3, #7
 8000640:	ddf2      	ble.n	8000628 <HD44780_CreateSpecialChar+0x38>
  }
}
 8000642:	46c0      	nop			@ (mov r8, r8)
 8000644:	46c0      	nop			@ (mov r8, r8)
 8000646:	46bd      	mov	sp, r7
 8000648:	b004      	add	sp, #16
 800064a:	bd80      	pop	{r7, pc}

0800064c <HD44780_PrintStr>:
{
  HD44780_CreateSpecialChar(char_num, rows);
}

void HD44780_PrintStr(const char c[])
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b082      	sub	sp, #8
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
  while(*c) SendChar(*c++);
 8000654:	e006      	b.n	8000664 <HD44780_PrintStr+0x18>
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	1c5a      	adds	r2, r3, #1
 800065a:	607a      	str	r2, [r7, #4]
 800065c:	781b      	ldrb	r3, [r3, #0]
 800065e:	0018      	movs	r0, r3
 8000660:	f000 f819 	bl	8000696 <SendChar>
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	781b      	ldrb	r3, [r3, #0]
 8000668:	2b00      	cmp	r3, #0
 800066a:	d1f4      	bne.n	8000656 <HD44780_PrintStr+0xa>
}
 800066c:	46c0      	nop			@ (mov r8, r8)
 800066e:	46c0      	nop			@ (mov r8, r8)
 8000670:	46bd      	mov	sp, r7
 8000672:	b002      	add	sp, #8
 8000674:	bd80      	pop	{r7, pc}

08000676 <SendCommand>:
  dpBacklight=LCD_BACKLIGHT;
  ExpanderWrite(0);
}

static void SendCommand(uint8_t cmd)
{
 8000676:	b580      	push	{r7, lr}
 8000678:	b082      	sub	sp, #8
 800067a:	af00      	add	r7, sp, #0
 800067c:	0002      	movs	r2, r0
 800067e:	1dfb      	adds	r3, r7, #7
 8000680:	701a      	strb	r2, [r3, #0]
  Send(cmd, 0);
 8000682:	1dfb      	adds	r3, r7, #7
 8000684:	781b      	ldrb	r3, [r3, #0]
 8000686:	2100      	movs	r1, #0
 8000688:	0018      	movs	r0, r3
 800068a:	f000 f814 	bl	80006b6 <Send>
}
 800068e:	46c0      	nop			@ (mov r8, r8)
 8000690:	46bd      	mov	sp, r7
 8000692:	b002      	add	sp, #8
 8000694:	bd80      	pop	{r7, pc}

08000696 <SendChar>:

static void SendChar(uint8_t ch)
{
 8000696:	b580      	push	{r7, lr}
 8000698:	b082      	sub	sp, #8
 800069a:	af00      	add	r7, sp, #0
 800069c:	0002      	movs	r2, r0
 800069e:	1dfb      	adds	r3, r7, #7
 80006a0:	701a      	strb	r2, [r3, #0]
  Send(ch, RS);
 80006a2:	1dfb      	adds	r3, r7, #7
 80006a4:	781b      	ldrb	r3, [r3, #0]
 80006a6:	2101      	movs	r1, #1
 80006a8:	0018      	movs	r0, r3
 80006aa:	f000 f804 	bl	80006b6 <Send>
}
 80006ae:	46c0      	nop			@ (mov r8, r8)
 80006b0:	46bd      	mov	sp, r7
 80006b2:	b002      	add	sp, #8
 80006b4:	bd80      	pop	{r7, pc}

080006b6 <Send>:

static void Send(uint8_t value, uint8_t mode)
{
 80006b6:	b590      	push	{r4, r7, lr}
 80006b8:	b085      	sub	sp, #20
 80006ba:	af00      	add	r7, sp, #0
 80006bc:	0002      	movs	r2, r0
 80006be:	1dfb      	adds	r3, r7, #7
 80006c0:	701a      	strb	r2, [r3, #0]
 80006c2:	1dbb      	adds	r3, r7, #6
 80006c4:	1c0a      	adds	r2, r1, #0
 80006c6:	701a      	strb	r2, [r3, #0]
  uint8_t highnib = value & 0xF0;
 80006c8:	200f      	movs	r0, #15
 80006ca:	183b      	adds	r3, r7, r0
 80006cc:	1dfa      	adds	r2, r7, #7
 80006ce:	7812      	ldrb	r2, [r2, #0]
 80006d0:	210f      	movs	r1, #15
 80006d2:	438a      	bics	r2, r1
 80006d4:	701a      	strb	r2, [r3, #0]
  uint8_t lownib = (value<<4) & 0xF0;
 80006d6:	240e      	movs	r4, #14
 80006d8:	193b      	adds	r3, r7, r4
 80006da:	1dfa      	adds	r2, r7, #7
 80006dc:	7812      	ldrb	r2, [r2, #0]
 80006de:	0112      	lsls	r2, r2, #4
 80006e0:	701a      	strb	r2, [r3, #0]
  Write4Bits((highnib)|mode);
 80006e2:	183a      	adds	r2, r7, r0
 80006e4:	1dbb      	adds	r3, r7, #6
 80006e6:	7812      	ldrb	r2, [r2, #0]
 80006e8:	781b      	ldrb	r3, [r3, #0]
 80006ea:	4313      	orrs	r3, r2
 80006ec:	b2db      	uxtb	r3, r3
 80006ee:	0018      	movs	r0, r3
 80006f0:	f000 f80d 	bl	800070e <Write4Bits>
  Write4Bits((lownib)|mode);
 80006f4:	193a      	adds	r2, r7, r4
 80006f6:	1dbb      	adds	r3, r7, #6
 80006f8:	7812      	ldrb	r2, [r2, #0]
 80006fa:	781b      	ldrb	r3, [r3, #0]
 80006fc:	4313      	orrs	r3, r2
 80006fe:	b2db      	uxtb	r3, r3
 8000700:	0018      	movs	r0, r3
 8000702:	f000 f804 	bl	800070e <Write4Bits>
}
 8000706:	46c0      	nop			@ (mov r8, r8)
 8000708:	46bd      	mov	sp, r7
 800070a:	b005      	add	sp, #20
 800070c:	bd90      	pop	{r4, r7, pc}

0800070e <Write4Bits>:

static void Write4Bits(uint8_t value)
{
 800070e:	b580      	push	{r7, lr}
 8000710:	b082      	sub	sp, #8
 8000712:	af00      	add	r7, sp, #0
 8000714:	0002      	movs	r2, r0
 8000716:	1dfb      	adds	r3, r7, #7
 8000718:	701a      	strb	r2, [r3, #0]
  ExpanderWrite(value);
 800071a:	1dfb      	adds	r3, r7, #7
 800071c:	781b      	ldrb	r3, [r3, #0]
 800071e:	0018      	movs	r0, r3
 8000720:	f000 f80a 	bl	8000738 <ExpanderWrite>
  PulseEnable(value);
 8000724:	1dfb      	adds	r3, r7, #7
 8000726:	781b      	ldrb	r3, [r3, #0]
 8000728:	0018      	movs	r0, r3
 800072a:	f000 f825 	bl	8000778 <PulseEnable>
}
 800072e:	46c0      	nop			@ (mov r8, r8)
 8000730:	46bd      	mov	sp, r7
 8000732:	b002      	add	sp, #8
 8000734:	bd80      	pop	{r7, pc}
	...

08000738 <ExpanderWrite>:

static void ExpanderWrite(uint8_t _data)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b086      	sub	sp, #24
 800073c:	af02      	add	r7, sp, #8
 800073e:	0002      	movs	r2, r0
 8000740:	1dfb      	adds	r3, r7, #7
 8000742:	701a      	strb	r2, [r3, #0]
  uint8_t data = _data | dpBacklight;
 8000744:	4b0a      	ldr	r3, [pc, #40]	@ (8000770 <ExpanderWrite+0x38>)
 8000746:	781a      	ldrb	r2, [r3, #0]
 8000748:	1dfb      	adds	r3, r7, #7
 800074a:	781b      	ldrb	r3, [r3, #0]
 800074c:	4313      	orrs	r3, r2
 800074e:	b2da      	uxtb	r2, r3
 8000750:	210f      	movs	r1, #15
 8000752:	187b      	adds	r3, r7, r1
 8000754:	701a      	strb	r2, [r3, #0]
  HAL_I2C_Master_Transmit(&hi2c1, DEVICE_ADDR, (uint8_t*)&data, 1, 10);
 8000756:	187a      	adds	r2, r7, r1
 8000758:	4806      	ldr	r0, [pc, #24]	@ (8000774 <ExpanderWrite+0x3c>)
 800075a:	230a      	movs	r3, #10
 800075c:	9300      	str	r3, [sp, #0]
 800075e:	2301      	movs	r3, #1
 8000760:	214e      	movs	r1, #78	@ 0x4e
 8000762:	f000 ff45 	bl	80015f0 <HAL_I2C_Master_Transmit>
}
 8000766:	46c0      	nop			@ (mov r8, r8)
 8000768:	46bd      	mov	sp, r7
 800076a:	b004      	add	sp, #16
 800076c:	bd80      	pop	{r7, pc}
 800076e:	46c0      	nop			@ (mov r8, r8)
 8000770:	20000090 	.word	0x20000090
 8000774:	20000094 	.word	0x20000094

08000778 <PulseEnable>:

static void PulseEnable(uint8_t _data)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b082      	sub	sp, #8
 800077c:	af00      	add	r7, sp, #0
 800077e:	0002      	movs	r2, r0
 8000780:	1dfb      	adds	r3, r7, #7
 8000782:	701a      	strb	r2, [r3, #0]
  ExpanderWrite(_data | ENABLE);
 8000784:	1dfb      	adds	r3, r7, #7
 8000786:	781b      	ldrb	r3, [r3, #0]
 8000788:	2204      	movs	r2, #4
 800078a:	4313      	orrs	r3, r2
 800078c:	b2db      	uxtb	r3, r3
 800078e:	0018      	movs	r0, r3
 8000790:	f7ff ffd2 	bl	8000738 <ExpanderWrite>
  DelayUS(20);
 8000794:	2014      	movs	r0, #20
 8000796:	f000 f839 	bl	800080c <DelayUS>

  ExpanderWrite(_data & ~ENABLE);
 800079a:	1dfb      	adds	r3, r7, #7
 800079c:	781b      	ldrb	r3, [r3, #0]
 800079e:	2204      	movs	r2, #4
 80007a0:	4393      	bics	r3, r2
 80007a2:	b2db      	uxtb	r3, r3
 80007a4:	0018      	movs	r0, r3
 80007a6:	f7ff ffc7 	bl	8000738 <ExpanderWrite>
  DelayUS(20);
 80007aa:	2014      	movs	r0, #20
 80007ac:	f000 f82e 	bl	800080c <DelayUS>
}
 80007b0:	46c0      	nop			@ (mov r8, r8)
 80007b2:	46bd      	mov	sp, r7
 80007b4:	b002      	add	sp, #8
 80007b6:	bd80      	pop	{r7, pc}

080007b8 <DelayInit>:

static void DelayInit(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	af00      	add	r7, sp, #0
	// Включаем тактирование таймера
	RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 80007bc:	4b0e      	ldr	r3, [pc, #56]	@ (80007f8 <DelayInit+0x40>)
 80007be:	69da      	ldr	r2, [r3, #28]
 80007c0:	4b0d      	ldr	r3, [pc, #52]	@ (80007f8 <DelayInit+0x40>)
 80007c2:	2102      	movs	r1, #2
 80007c4:	430a      	orrs	r2, r1
 80007c6:	61da      	str	r2, [r3, #28]

    // Настраиваем таймер на 1 МГц (1 тик = 1 мкс)
	TIM3->PSC = (SystemCoreClock / 1000000) - 1;
 80007c8:	4b0c      	ldr	r3, [pc, #48]	@ (80007fc <DelayInit+0x44>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	490c      	ldr	r1, [pc, #48]	@ (8000800 <DelayInit+0x48>)
 80007ce:	0018      	movs	r0, r3
 80007d0:	f7ff fca4 	bl	800011c <__udivsi3>
 80007d4:	0003      	movs	r3, r0
 80007d6:	001a      	movs	r2, r3
 80007d8:	4b0a      	ldr	r3, [pc, #40]	@ (8000804 <DelayInit+0x4c>)
 80007da:	3a01      	subs	r2, #1
 80007dc:	629a      	str	r2, [r3, #40]	@ 0x28
	TIM3->ARR = 0xFFFF;
 80007de:	4b09      	ldr	r3, [pc, #36]	@ (8000804 <DelayInit+0x4c>)
 80007e0:	4a09      	ldr	r2, [pc, #36]	@ (8000808 <DelayInit+0x50>)
 80007e2:	62da      	str	r2, [r3, #44]	@ 0x2c
	TIM3->CR1 |= TIM_CR1_CEN;
 80007e4:	4b07      	ldr	r3, [pc, #28]	@ (8000804 <DelayInit+0x4c>)
 80007e6:	681a      	ldr	r2, [r3, #0]
 80007e8:	4b06      	ldr	r3, [pc, #24]	@ (8000804 <DelayInit+0x4c>)
 80007ea:	2101      	movs	r1, #1
 80007ec:	430a      	orrs	r2, r1
 80007ee:	601a      	str	r2, [r3, #0]

}
 80007f0:	46c0      	nop			@ (mov r8, r8)
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	46c0      	nop			@ (mov r8, r8)
 80007f8:	40021000 	.word	0x40021000
 80007fc:	20000014 	.word	0x20000014
 8000800:	000f4240 	.word	0x000f4240
 8000804:	40000400 	.word	0x40000400
 8000808:	0000ffff 	.word	0x0000ffff

0800080c <DelayUS>:

static void DelayUS(uint32_t us) {
 800080c:	b580      	push	{r7, lr}
 800080e:	b084      	sub	sp, #16
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]

	 uint32_t start = TIM3->CNT;
 8000814:	4b09      	ldr	r3, [pc, #36]	@ (800083c <DelayUS+0x30>)
 8000816:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000818:	60fb      	str	r3, [r7, #12]
	 while ( (uint16_t)(TIM3->CNT - start) < us );
 800081a:	46c0      	nop			@ (mov r8, r8)
 800081c:	4b07      	ldr	r3, [pc, #28]	@ (800083c <DelayUS+0x30>)
 800081e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000820:	b29a      	uxth	r2, r3
 8000822:	68fb      	ldr	r3, [r7, #12]
 8000824:	b29b      	uxth	r3, r3
 8000826:	1ad3      	subs	r3, r2, r3
 8000828:	b29b      	uxth	r3, r3
 800082a:	001a      	movs	r2, r3
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	4293      	cmp	r3, r2
 8000830:	d8f4      	bhi.n	800081c <DelayUS+0x10>
}
 8000832:	46c0      	nop			@ (mov r8, r8)
 8000834:	46c0      	nop			@ (mov r8, r8)
 8000836:	46bd      	mov	sp, r7
 8000838:	b004      	add	sp, #16
 800083a:	bd80      	pop	{r7, pc}
 800083c:	40000400 	.word	0x40000400

08000840 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000844:	f000 fb48 	bl	8000ed8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000848:	f000 f85c 	bl	8000904 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800084c:	f000 f8f2 	bl	8000a34 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000850:	f000 f8b0 	bl	80009b4 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  HD44780_Init(2);
 8000854:	2002      	movs	r0, #2
 8000856:	f7ff fdd7 	bl	8000408 <HD44780_Init>
	   * ОТСЧЕТ ЗАДАННОГО ВРЕМЕНИ
	   * ПО ОКОНЧАНИЮ ВЫВОДИМ СИГНАЛ НА ПИН КОТОРЫЙ УПРАВЛЯЕТ ДРАЙВЕРОМ
	   * */


	     if (   Button_Tick(BUTTON_MINUTES_PIN) ){
 800085a:	2008      	movs	r0, #8
 800085c:	f000 fa0c 	bl	8000c78 <Button_Tick>
 8000860:	1e03      	subs	r3, r0, #0
 8000862:	d001      	beq.n	8000868 <main+0x28>
			    Button_Minutes();
 8000864:	f000 f9b8 	bl	8000bd8 <Button_Minutes>
		  }

		  if (  Button_Tick (BUTTON_SECONDS_PIN) ){
 8000868:	2004      	movs	r0, #4
 800086a:	f000 fa05 	bl	8000c78 <Button_Tick>
 800086e:	1e03      	subs	r3, r0, #0
 8000870:	d001      	beq.n	8000876 <main+0x36>
		  	    Button_Seconds();
 8000872:	f000 f9c9 	bl	8000c08 <Button_Seconds>
		  }

		  if (  Button_Tick(BUTTON_START_STOP_PIN ) ){
 8000876:	2002      	movs	r0, #2
 8000878:	f000 f9fe 	bl	8000c78 <Button_Tick>
 800087c:	1e03      	subs	r3, r0, #0
 800087e:	d001      	beq.n	8000884 <main+0x44>
			    Button_StartStop();
 8000880:	f000 f9da 	bl	8000c38 <Button_StartStop>
		  }

		  if (state == RUNNING) {
 8000884:	4b1c      	ldr	r3, [pc, #112]	@ (80008f8 <main+0xb8>)
 8000886:	781b      	ldrb	r3, [r3, #0]
 8000888:	2b01      	cmp	r3, #1
 800088a:	d12c      	bne.n	80008e6 <main+0xa6>
			     // ЗДЕСЬ ПРОИСХОДИТ ВСЕ ВОВРЕМЯ ОТСЧЕТА
			   display_time_update();
 800088c:	f000 f92a 	bl	8000ae4 <display_time_update>
			   HAL_GPIO_WritePin(GPIOA , DRIVER_PIN , GPIO_PIN_SET);  // ВКЛЮЧАЕМ ЛАМПУ
 8000890:	2390      	movs	r3, #144	@ 0x90
 8000892:	05db      	lsls	r3, r3, #23
 8000894:	2201      	movs	r2, #1
 8000896:	2101      	movs	r1, #1
 8000898:	0018      	movs	r0, r3
 800089a:	f000 fde6 	bl	800146a <HAL_GPIO_WritePin>
			        if (seconds == 0) {
 800089e:	4b17      	ldr	r3, [pc, #92]	@ (80008fc <main+0xbc>)
 80008a0:	781b      	ldrb	r3, [r3, #0]
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d118      	bne.n	80008d8 <main+0x98>
			             if ( minutes > 0) {
 80008a6:	4b16      	ldr	r3, [pc, #88]	@ (8000900 <main+0xc0>)
 80008a8:	781b      	ldrb	r3, [r3, #0]
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d009      	beq.n	80008c2 <main+0x82>
			                  minutes--;
 80008ae:	4b14      	ldr	r3, [pc, #80]	@ (8000900 <main+0xc0>)
 80008b0:	781b      	ldrb	r3, [r3, #0]
 80008b2:	3b01      	subs	r3, #1
 80008b4:	b2da      	uxtb	r2, r3
 80008b6:	4b12      	ldr	r3, [pc, #72]	@ (8000900 <main+0xc0>)
 80008b8:	701a      	strb	r2, [r3, #0]
			                  seconds = 59;
 80008ba:	4b10      	ldr	r3, [pc, #64]	@ (80008fc <main+0xbc>)
 80008bc:	223b      	movs	r2, #59	@ 0x3b
 80008be:	701a      	strb	r2, [r3, #0]
 80008c0:	e013      	b.n	80008ea <main+0xaa>
			              } else {
			                  state = STOPPED;
 80008c2:	4b0d      	ldr	r3, [pc, #52]	@ (80008f8 <main+0xb8>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	701a      	strb	r2, [r3, #0]
			                  // здесь можно включить пищалку или мигание светодиода

			                 HAL_GPIO_WritePin(GPIOA , DRIVER_PIN , GPIO_PIN_RESET);  // ВЫКЛЮЧАЕМ ЛАМПУ
 80008c8:	2390      	movs	r3, #144	@ 0x90
 80008ca:	05db      	lsls	r3, r3, #23
 80008cc:	2200      	movs	r2, #0
 80008ce:	2101      	movs	r1, #1
 80008d0:	0018      	movs	r0, r3
 80008d2:	f000 fdca 	bl	800146a <HAL_GPIO_WritePin>
 80008d6:	e008      	b.n	80008ea <main+0xaa>
			              }
			          } else {
			              seconds--;
 80008d8:	4b08      	ldr	r3, [pc, #32]	@ (80008fc <main+0xbc>)
 80008da:	781b      	ldrb	r3, [r3, #0]
 80008dc:	3b01      	subs	r3, #1
 80008de:	b2da      	uxtb	r2, r3
 80008e0:	4b06      	ldr	r3, [pc, #24]	@ (80008fc <main+0xbc>)
 80008e2:	701a      	strb	r2, [r3, #0]
 80008e4:	e001      	b.n	80008ea <main+0xaa>

			          }
			      } else {
			    	   // ЗДЕСЬ ПРОИСХОДИТ ВСЕ ЧТО ДО ОТСЧЕТА - ПРИВЕТСВИЕ И ТД
			    	      display_user_enter();
 80008e6:	f000 f929 	bl	8000b3c <display_user_enter>
			      }



		  HAL_Delay(1000);        // обновление каждую секунду
 80008ea:	23fa      	movs	r3, #250	@ 0xfa
 80008ec:	009b      	lsls	r3, r3, #2
 80008ee:	0018      	movs	r0, r3
 80008f0:	f000 fb56 	bl	8000fa0 <HAL_Delay>
	     if (   Button_Tick(BUTTON_MINUTES_PIN) ){
 80008f4:	e7b1      	b.n	800085a <main+0x1a>
 80008f6:	46c0      	nop			@ (mov r8, r8)
 80008f8:	200000e8 	.word	0x200000e8
 80008fc:	200000ea 	.word	0x200000ea
 8000900:	200000e9 	.word	0x200000e9

08000904 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000904:	b590      	push	{r4, r7, lr}
 8000906:	b095      	sub	sp, #84	@ 0x54
 8000908:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800090a:	2420      	movs	r4, #32
 800090c:	193b      	adds	r3, r7, r4
 800090e:	0018      	movs	r0, r3
 8000910:	2330      	movs	r3, #48	@ 0x30
 8000912:	001a      	movs	r2, r3
 8000914:	2100      	movs	r1, #0
 8000916:	f001 ff91 	bl	800283c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800091a:	2310      	movs	r3, #16
 800091c:	18fb      	adds	r3, r7, r3
 800091e:	0018      	movs	r0, r3
 8000920:	2310      	movs	r3, #16
 8000922:	001a      	movs	r2, r3
 8000924:	2100      	movs	r1, #0
 8000926:	f001 ff89 	bl	800283c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800092a:	003b      	movs	r3, r7
 800092c:	0018      	movs	r0, r3
 800092e:	2310      	movs	r3, #16
 8000930:	001a      	movs	r2, r3
 8000932:	2100      	movs	r1, #0
 8000934:	f001 ff82 	bl	800283c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000938:	0021      	movs	r1, r4
 800093a:	187b      	adds	r3, r7, r1
 800093c:	2202      	movs	r2, #2
 800093e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000940:	187b      	adds	r3, r7, r1
 8000942:	2201      	movs	r2, #1
 8000944:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000946:	187b      	adds	r3, r7, r1
 8000948:	2210      	movs	r2, #16
 800094a:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800094c:	187b      	adds	r3, r7, r1
 800094e:	2200      	movs	r2, #0
 8000950:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000952:	187b      	adds	r3, r7, r1
 8000954:	0018      	movs	r0, r3
 8000956:	f001 fa43 	bl	8001de0 <HAL_RCC_OscConfig>
 800095a:	1e03      	subs	r3, r0, #0
 800095c:	d001      	beq.n	8000962 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 800095e:	f000 f9c3 	bl	8000ce8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000962:	2110      	movs	r1, #16
 8000964:	187b      	adds	r3, r7, r1
 8000966:	2207      	movs	r2, #7
 8000968:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800096a:	187b      	adds	r3, r7, r1
 800096c:	2200      	movs	r2, #0
 800096e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000970:	187b      	adds	r3, r7, r1
 8000972:	2200      	movs	r2, #0
 8000974:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000976:	187b      	adds	r3, r7, r1
 8000978:	2200      	movs	r2, #0
 800097a:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800097c:	187b      	adds	r3, r7, r1
 800097e:	2100      	movs	r1, #0
 8000980:	0018      	movs	r0, r3
 8000982:	f001 fd47 	bl	8002414 <HAL_RCC_ClockConfig>
 8000986:	1e03      	subs	r3, r0, #0
 8000988:	d001      	beq.n	800098e <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800098a:	f000 f9ad 	bl	8000ce8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800098e:	003b      	movs	r3, r7
 8000990:	2220      	movs	r2, #32
 8000992:	601a      	str	r2, [r3, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000994:	003b      	movs	r3, r7
 8000996:	2200      	movs	r2, #0
 8000998:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800099a:	003b      	movs	r3, r7
 800099c:	0018      	movs	r0, r3
 800099e:	f001 fe5d 	bl	800265c <HAL_RCCEx_PeriphCLKConfig>
 80009a2:	1e03      	subs	r3, r0, #0
 80009a4:	d001      	beq.n	80009aa <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80009a6:	f000 f99f 	bl	8000ce8 <Error_Handler>
  }
}
 80009aa:	46c0      	nop			@ (mov r8, r8)
 80009ac:	46bd      	mov	sp, r7
 80009ae:	b015      	add	sp, #84	@ 0x54
 80009b0:	bd90      	pop	{r4, r7, pc}
	...

080009b4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80009b8:	4b1b      	ldr	r3, [pc, #108]	@ (8000a28 <MX_I2C1_Init+0x74>)
 80009ba:	4a1c      	ldr	r2, [pc, #112]	@ (8000a2c <MX_I2C1_Init+0x78>)
 80009bc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00201D2B;
 80009be:	4b1a      	ldr	r3, [pc, #104]	@ (8000a28 <MX_I2C1_Init+0x74>)
 80009c0:	4a1b      	ldr	r2, [pc, #108]	@ (8000a30 <MX_I2C1_Init+0x7c>)
 80009c2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80009c4:	4b18      	ldr	r3, [pc, #96]	@ (8000a28 <MX_I2C1_Init+0x74>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009ca:	4b17      	ldr	r3, [pc, #92]	@ (8000a28 <MX_I2C1_Init+0x74>)
 80009cc:	2201      	movs	r2, #1
 80009ce:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009d0:	4b15      	ldr	r3, [pc, #84]	@ (8000a28 <MX_I2C1_Init+0x74>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80009d6:	4b14      	ldr	r3, [pc, #80]	@ (8000a28 <MX_I2C1_Init+0x74>)
 80009d8:	2200      	movs	r2, #0
 80009da:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80009dc:	4b12      	ldr	r3, [pc, #72]	@ (8000a28 <MX_I2C1_Init+0x74>)
 80009de:	2200      	movs	r2, #0
 80009e0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009e2:	4b11      	ldr	r3, [pc, #68]	@ (8000a28 <MX_I2C1_Init+0x74>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009e8:	4b0f      	ldr	r3, [pc, #60]	@ (8000a28 <MX_I2C1_Init+0x74>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80009ee:	4b0e      	ldr	r3, [pc, #56]	@ (8000a28 <MX_I2C1_Init+0x74>)
 80009f0:	0018      	movs	r0, r3
 80009f2:	f000 fd57 	bl	80014a4 <HAL_I2C_Init>
 80009f6:	1e03      	subs	r3, r0, #0
 80009f8:	d001      	beq.n	80009fe <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80009fa:	f000 f975 	bl	8000ce8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80009fe:	4b0a      	ldr	r3, [pc, #40]	@ (8000a28 <MX_I2C1_Init+0x74>)
 8000a00:	2100      	movs	r1, #0
 8000a02:	0018      	movs	r0, r3
 8000a04:	f001 f954 	bl	8001cb0 <HAL_I2CEx_ConfigAnalogFilter>
 8000a08:	1e03      	subs	r3, r0, #0
 8000a0a:	d001      	beq.n	8000a10 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000a0c:	f000 f96c 	bl	8000ce8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000a10:	4b05      	ldr	r3, [pc, #20]	@ (8000a28 <MX_I2C1_Init+0x74>)
 8000a12:	2100      	movs	r1, #0
 8000a14:	0018      	movs	r0, r3
 8000a16:	f001 f997 	bl	8001d48 <HAL_I2CEx_ConfigDigitalFilter>
 8000a1a:	1e03      	subs	r3, r0, #0
 8000a1c:	d001      	beq.n	8000a22 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000a1e:	f000 f963 	bl	8000ce8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a22:	46c0      	nop			@ (mov r8, r8)
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	20000094 	.word	0x20000094
 8000a2c:	40005400 	.word	0x40005400
 8000a30:	00201d2b 	.word	0x00201d2b

08000a34 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a34:	b590      	push	{r4, r7, lr}
 8000a36:	b089      	sub	sp, #36	@ 0x24
 8000a38:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a3a:	240c      	movs	r4, #12
 8000a3c:	193b      	adds	r3, r7, r4
 8000a3e:	0018      	movs	r0, r3
 8000a40:	2314      	movs	r3, #20
 8000a42:	001a      	movs	r2, r3
 8000a44:	2100      	movs	r1, #0
 8000a46:	f001 fef9 	bl	800283c <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a4a:	4b25      	ldr	r3, [pc, #148]	@ (8000ae0 <MX_GPIO_Init+0xac>)
 8000a4c:	695a      	ldr	r2, [r3, #20]
 8000a4e:	4b24      	ldr	r3, [pc, #144]	@ (8000ae0 <MX_GPIO_Init+0xac>)
 8000a50:	2180      	movs	r1, #128	@ 0x80
 8000a52:	03c9      	lsls	r1, r1, #15
 8000a54:	430a      	orrs	r2, r1
 8000a56:	615a      	str	r2, [r3, #20]
 8000a58:	4b21      	ldr	r3, [pc, #132]	@ (8000ae0 <MX_GPIO_Init+0xac>)
 8000a5a:	695a      	ldr	r2, [r3, #20]
 8000a5c:	2380      	movs	r3, #128	@ 0x80
 8000a5e:	03db      	lsls	r3, r3, #15
 8000a60:	4013      	ands	r3, r2
 8000a62:	60bb      	str	r3, [r7, #8]
 8000a64:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a66:	4b1e      	ldr	r3, [pc, #120]	@ (8000ae0 <MX_GPIO_Init+0xac>)
 8000a68:	695a      	ldr	r2, [r3, #20]
 8000a6a:	4b1d      	ldr	r3, [pc, #116]	@ (8000ae0 <MX_GPIO_Init+0xac>)
 8000a6c:	2180      	movs	r1, #128	@ 0x80
 8000a6e:	0289      	lsls	r1, r1, #10
 8000a70:	430a      	orrs	r2, r1
 8000a72:	615a      	str	r2, [r3, #20]
 8000a74:	4b1a      	ldr	r3, [pc, #104]	@ (8000ae0 <MX_GPIO_Init+0xac>)
 8000a76:	695a      	ldr	r2, [r3, #20]
 8000a78:	2380      	movs	r3, #128	@ 0x80
 8000a7a:	029b      	lsls	r3, r3, #10
 8000a7c:	4013      	ands	r3, r2
 8000a7e:	607b      	str	r3, [r7, #4]
 8000a80:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DRIVER_PIN_GPIO_Port, DRIVER_PIN, GPIO_PIN_RESET);
 8000a82:	2390      	movs	r3, #144	@ 0x90
 8000a84:	05db      	lsls	r3, r3, #23
 8000a86:	2200      	movs	r2, #0
 8000a88:	2101      	movs	r1, #1
 8000a8a:	0018      	movs	r0, r3
 8000a8c:	f000 fced 	bl	800146a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : DRIVER_PIN_Pin */
  GPIO_InitStruct.Pin = DRIVER_PIN;
 8000a90:	193b      	adds	r3, r7, r4
 8000a92:	2201      	movs	r2, #1
 8000a94:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a96:	193b      	adds	r3, r7, r4
 8000a98:	2201      	movs	r2, #1
 8000a9a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000a9c:	193b      	adds	r3, r7, r4
 8000a9e:	2202      	movs	r2, #2
 8000aa0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa2:	193b      	adds	r3, r7, r4
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(DRIVER_PIN_GPIO_Port, &GPIO_InitStruct);
 8000aa8:	193a      	adds	r2, r7, r4
 8000aaa:	2390      	movs	r3, #144	@ 0x90
 8000aac:	05db      	lsls	r3, r3, #23
 8000aae:	0011      	movs	r1, r2
 8000ab0:	0018      	movs	r0, r3
 8000ab2:	f000 fb4d 	bl	8001150 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_START_STOP_Pin BUTTON_SECONDS_Pin BUTTON_MINUTES_Pin */
  GPIO_InitStruct.Pin = BUTTON_START_STOP_PIN|BUTTON_SECONDS_PIN|BUTTON_MINUTES_PIN;
 8000ab6:	193b      	adds	r3, r7, r4
 8000ab8:	220e      	movs	r2, #14
 8000aba:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000abc:	193b      	adds	r3, r7, r4
 8000abe:	2200      	movs	r2, #0
 8000ac0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ac2:	193b      	adds	r3, r7, r4
 8000ac4:	2201      	movs	r2, #1
 8000ac6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ac8:	193a      	adds	r2, r7, r4
 8000aca:	2390      	movs	r3, #144	@ 0x90
 8000acc:	05db      	lsls	r3, r3, #23
 8000ace:	0011      	movs	r1, r2
 8000ad0:	0018      	movs	r0, r3
 8000ad2:	f000 fb3d 	bl	8001150 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000ad6:	46c0      	nop			@ (mov r8, r8)
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	b009      	add	sp, #36	@ 0x24
 8000adc:	bd90      	pop	{r4, r7, pc}
 8000ade:	46c0      	nop			@ (mov r8, r8)
 8000ae0:	40021000 	.word	0x40021000

08000ae4 <display_time_update>:

/* USER CODE BEGIN 4 */

void display_time_update(void) {
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b084      	sub	sp, #16
 8000ae8:	af00      	add	r7, sp, #0
	// для конвертации из int в char
	 char time_buffer[16];
	 sprintf(time_buffer, "%02d:%02d", minutes, seconds);
 8000aea:	4b10      	ldr	r3, [pc, #64]	@ (8000b2c <display_time_update+0x48>)
 8000aec:	781b      	ldrb	r3, [r3, #0]
 8000aee:	001a      	movs	r2, r3
 8000af0:	4b0f      	ldr	r3, [pc, #60]	@ (8000b30 <display_time_update+0x4c>)
 8000af2:	781b      	ldrb	r3, [r3, #0]
 8000af4:	490f      	ldr	r1, [pc, #60]	@ (8000b34 <display_time_update+0x50>)
 8000af6:	0038      	movs	r0, r7
 8000af8:	f001 fe7e 	bl	80027f8 <siprintf>

	 HD44780_Clear();
 8000afc:	f7ff fd10 	bl	8000520 <HD44780_Clear>
	 HD44780_SetCursor(0,1);
 8000b00:	2101      	movs	r1, #1
 8000b02:	2000      	movs	r0, #0
 8000b04:	f7ff fd26 	bl	8000554 <HD44780_SetCursor>
	 HD44780_PrintStr("  TIMER:");
 8000b08:	4b0b      	ldr	r3, [pc, #44]	@ (8000b38 <display_time_update+0x54>)
 8000b0a:	0018      	movs	r0, r3
 8000b0c:	f7ff fd9e 	bl	800064c <HD44780_PrintStr>
	 HD44780_SetCursor(9,1);
 8000b10:	2101      	movs	r1, #1
 8000b12:	2009      	movs	r0, #9
 8000b14:	f7ff fd1e 	bl	8000554 <HD44780_SetCursor>
	 HD44780_PrintStr(time_buffer);  // ПЕЧАТАЕМ ВРЕМЯ
 8000b18:	003b      	movs	r3, r7
 8000b1a:	0018      	movs	r0, r3
 8000b1c:	f7ff fd96 	bl	800064c <HD44780_PrintStr>

	 HD44780_Display();
 8000b20:	f7ff fd50 	bl	80005c4 <HD44780_Display>

}// обновление дисплея отсчета
 8000b24:	46c0      	nop			@ (mov r8, r8)
 8000b26:	46bd      	mov	sp, r7
 8000b28:	b004      	add	sp, #16
 8000b2a:	bd80      	pop	{r7, pc}
 8000b2c:	200000e9 	.word	0x200000e9
 8000b30:	200000ea 	.word	0x200000ea
 8000b34:	08003158 	.word	0x08003158
 8000b38:	08003164 	.word	0x08003164

08000b3c <display_user_enter>:

void display_user_enter(void) {
 8000b3c:	b590      	push	{r4, r7, lr}
 8000b3e:	b085      	sub	sp, #20
 8000b40:	af00      	add	r7, sp, #0
	// для конвертации из int в char
	char min_buffer[8];
	char sec_buffer[8];

	// Форматируем минуты и секунды отдельно
	sprintf(min_buffer, "%02d", minutes);
 8000b42:	4b1f      	ldr	r3, [pc, #124]	@ (8000bc0 <display_user_enter+0x84>)
 8000b44:	781b      	ldrb	r3, [r3, #0]
 8000b46:	001a      	movs	r2, r3
 8000b48:	491e      	ldr	r1, [pc, #120]	@ (8000bc4 <display_user_enter+0x88>)
 8000b4a:	2408      	movs	r4, #8
 8000b4c:	193b      	adds	r3, r7, r4
 8000b4e:	0018      	movs	r0, r3
 8000b50:	f001 fe52 	bl	80027f8 <siprintf>
	sprintf(sec_buffer, "%02d", seconds);
 8000b54:	4b1c      	ldr	r3, [pc, #112]	@ (8000bc8 <display_user_enter+0x8c>)
 8000b56:	781b      	ldrb	r3, [r3, #0]
 8000b58:	001a      	movs	r2, r3
 8000b5a:	491a      	ldr	r1, [pc, #104]	@ (8000bc4 <display_user_enter+0x88>)
 8000b5c:	003b      	movs	r3, r7
 8000b5e:	0018      	movs	r0, r3
 8000b60:	f001 fe4a 	bl	80027f8 <siprintf>

	HD44780_Clear();
 8000b64:	f7ff fcdc 	bl	8000520 <HD44780_Clear>
	HD44780_SetCursor(0,0);
 8000b68:	2100      	movs	r1, #0
 8000b6a:	2000      	movs	r0, #0
 8000b6c:	f7ff fcf2 	bl	8000554 <HD44780_SetCursor>
	HD44780_PrintStr(" PLS ENTER TIME ");
 8000b70:	4b16      	ldr	r3, [pc, #88]	@ (8000bcc <display_user_enter+0x90>)
 8000b72:	0018      	movs	r0, r3
 8000b74:	f7ff fd6a 	bl	800064c <HD44780_PrintStr>

	HD44780_SetCursor(0,1);
 8000b78:	2101      	movs	r1, #1
 8000b7a:	2000      	movs	r0, #0
 8000b7c:	f7ff fcea 	bl	8000554 <HD44780_SetCursor>
	HD44780_PrintStr("SEC:");
 8000b80:	4b13      	ldr	r3, [pc, #76]	@ (8000bd0 <display_user_enter+0x94>)
 8000b82:	0018      	movs	r0, r3
 8000b84:	f7ff fd62 	bl	800064c <HD44780_PrintStr>
	HD44780_SetCursor(5,1);
 8000b88:	2101      	movs	r1, #1
 8000b8a:	2005      	movs	r0, #5
 8000b8c:	f7ff fce2 	bl	8000554 <HD44780_SetCursor>
	HD44780_PrintStr(sec_buffer);  // Только секунды
 8000b90:	003b      	movs	r3, r7
 8000b92:	0018      	movs	r0, r3
 8000b94:	f7ff fd5a 	bl	800064c <HD44780_PrintStr>

	HD44780_SetCursor(8,1);
 8000b98:	2101      	movs	r1, #1
 8000b9a:	2008      	movs	r0, #8
 8000b9c:	f7ff fcda 	bl	8000554 <HD44780_SetCursor>
	HD44780_PrintStr("MIN:");
 8000ba0:	4b0c      	ldr	r3, [pc, #48]	@ (8000bd4 <display_user_enter+0x98>)
 8000ba2:	0018      	movs	r0, r3
 8000ba4:	f7ff fd52 	bl	800064c <HD44780_PrintStr>
	HD44780_SetCursor(13,1);
 8000ba8:	2101      	movs	r1, #1
 8000baa:	200d      	movs	r0, #13
 8000bac:	f7ff fcd2 	bl	8000554 <HD44780_SetCursor>
	HD44780_PrintStr(min_buffer);  // Только минуты
 8000bb0:	193b      	adds	r3, r7, r4
 8000bb2:	0018      	movs	r0, r3
 8000bb4:	f7ff fd4a 	bl	800064c <HD44780_PrintStr>
} // обновление дисплея приветсвия
 8000bb8:	46c0      	nop			@ (mov r8, r8)
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	b005      	add	sp, #20
 8000bbe:	bd90      	pop	{r4, r7, pc}
 8000bc0:	200000e9 	.word	0x200000e9
 8000bc4:	08003170 	.word	0x08003170
 8000bc8:	200000ea 	.word	0x200000ea
 8000bcc:	08003178 	.word	0x08003178
 8000bd0:	0800318c 	.word	0x0800318c
 8000bd4:	08003194 	.word	0x08003194

08000bd8 <Button_Minutes>:

void Button_Minutes(void){
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	af00      	add	r7, sp, #0

	 if( state == STOPPED){
 8000bdc:	4b08      	ldr	r3, [pc, #32]	@ (8000c00 <Button_Minutes+0x28>)
 8000bde:	781b      	ldrb	r3, [r3, #0]
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d10a      	bne.n	8000bfa <Button_Minutes+0x22>
		 // добавляем минуты
		 minutes = (minutes + 1) % 100; // максимум 99 минут
 8000be4:	4b07      	ldr	r3, [pc, #28]	@ (8000c04 <Button_Minutes+0x2c>)
 8000be6:	781b      	ldrb	r3, [r3, #0]
 8000be8:	3301      	adds	r3, #1
 8000bea:	2164      	movs	r1, #100	@ 0x64
 8000bec:	0018      	movs	r0, r3
 8000bee:	f7ff fc05 	bl	80003fc <__aeabi_idivmod>
 8000bf2:	000b      	movs	r3, r1
 8000bf4:	b2da      	uxtb	r2, r3
 8000bf6:	4b03      	ldr	r3, [pc, #12]	@ (8000c04 <Button_Minutes+0x2c>)
 8000bf8:	701a      	strb	r2, [r3, #0]
	 }
}
 8000bfa:	46c0      	nop			@ (mov r8, r8)
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd80      	pop	{r7, pc}
 8000c00:	200000e8 	.word	0x200000e8
 8000c04:	200000e9 	.word	0x200000e9

08000c08 <Button_Seconds>:

void Button_Seconds(void){
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	af00      	add	r7, sp, #0

	 if( state == STOPPED){
 8000c0c:	4b08      	ldr	r3, [pc, #32]	@ (8000c30 <Button_Seconds+0x28>)
 8000c0e:	781b      	ldrb	r3, [r3, #0]
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d10a      	bne.n	8000c2a <Button_Seconds+0x22>
	     // добавляем секунды
		 seconds = (seconds + 15) % 60; // шаг 15 секунд
 8000c14:	4b07      	ldr	r3, [pc, #28]	@ (8000c34 <Button_Seconds+0x2c>)
 8000c16:	781b      	ldrb	r3, [r3, #0]
 8000c18:	330f      	adds	r3, #15
 8000c1a:	213c      	movs	r1, #60	@ 0x3c
 8000c1c:	0018      	movs	r0, r3
 8000c1e:	f7ff fbed 	bl	80003fc <__aeabi_idivmod>
 8000c22:	000b      	movs	r3, r1
 8000c24:	b2da      	uxtb	r2, r3
 8000c26:	4b03      	ldr	r3, [pc, #12]	@ (8000c34 <Button_Seconds+0x2c>)
 8000c28:	701a      	strb	r2, [r3, #0]
     }

}
 8000c2a:	46c0      	nop			@ (mov r8, r8)
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}
 8000c30:	200000e8 	.word	0x200000e8
 8000c34:	200000ea 	.word	0x200000ea

08000c38 <Button_StartStop>:

void Button_StartStop(void){
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	af00      	add	r7, sp, #0

	 if( state == STOPPED && (minutes > 0 || seconds > 0)){
 8000c3c:	4b0b      	ldr	r3, [pc, #44]	@ (8000c6c <Button_StartStop+0x34>)
 8000c3e:	781b      	ldrb	r3, [r3, #0]
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d10b      	bne.n	8000c5c <Button_StartStop+0x24>
 8000c44:	4b0a      	ldr	r3, [pc, #40]	@ (8000c70 <Button_StartStop+0x38>)
 8000c46:	781b      	ldrb	r3, [r3, #0]
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d103      	bne.n	8000c54 <Button_StartStop+0x1c>
 8000c4c:	4b09      	ldr	r3, [pc, #36]	@ (8000c74 <Button_StartStop+0x3c>)
 8000c4e:	781b      	ldrb	r3, [r3, #0]
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d003      	beq.n	8000c5c <Button_StartStop+0x24>

		 state = RUNNING; // Запускаем таймер.
 8000c54:	4b05      	ldr	r3, [pc, #20]	@ (8000c6c <Button_StartStop+0x34>)
 8000c56:	2201      	movs	r2, #1
 8000c58:	701a      	strb	r2, [r3, #0]
 8000c5a:	e003      	b.n	8000c64 <Button_StartStop+0x2c>
	 }  else {

		 state = STOPPED;  // останавливаем
 8000c5c:	4b03      	ldr	r3, [pc, #12]	@ (8000c6c <Button_StartStop+0x34>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	701a      	strb	r2, [r3, #0]
	 }

}
 8000c62:	46c0      	nop			@ (mov r8, r8)
 8000c64:	46c0      	nop			@ (mov r8, r8)
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	46c0      	nop			@ (mov r8, r8)
 8000c6c:	200000e8 	.word	0x200000e8
 8000c70:	200000e9 	.word	0x200000e9
 8000c74:	200000ea 	.word	0x200000ea

08000c78 <Button_Tick>:

uint8_t Button_Tick( uint16_t GPIO_Pin ){
 8000c78:	b5b0      	push	{r4, r5, r7, lr}
 8000c7a:	b084      	sub	sp, #16
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	0002      	movs	r2, r0
 8000c80:	1dbb      	adds	r3, r7, #6
 8000c82:	801a      	strh	r2, [r3, #0]
	    static uint32_t lastTick = 0;
	    static uint8_t lastState = 1;  // 1 = отпущена (pull-up)

	    uint8_t currentState;

	    currentState = HAL_GPIO_ReadPin(GPIOA, GPIO_Pin);
 8000c84:	250f      	movs	r5, #15
 8000c86:	197c      	adds	r4, r7, r5
 8000c88:	1dbb      	adds	r3, r7, #6
 8000c8a:	881a      	ldrh	r2, [r3, #0]
 8000c8c:	2390      	movs	r3, #144	@ 0x90
 8000c8e:	05db      	lsls	r3, r3, #23
 8000c90:	0011      	movs	r1, r2
 8000c92:	0018      	movs	r0, r3
 8000c94:	f000 fbcc 	bl	8001430 <HAL_GPIO_ReadPin>
 8000c98:	0003      	movs	r3, r0
 8000c9a:	7023      	strb	r3, [r4, #0]

	    if (currentState != lastState) {
 8000c9c:	4b10      	ldr	r3, [pc, #64]	@ (8000ce0 <Button_Tick+0x68>)
 8000c9e:	781b      	ldrb	r3, [r3, #0]
 8000ca0:	197a      	adds	r2, r7, r5
 8000ca2:	7812      	ldrb	r2, [r2, #0]
 8000ca4:	429a      	cmp	r2, r3
 8000ca6:	d016      	beq.n	8000cd6 <Button_Tick+0x5e>
	        // если состояние изменилось → проверим по таймеру
	        if (HAL_GetTick() - lastTick > DEBOUNCE_DELAY) {
 8000ca8:	f000 f970 	bl	8000f8c <HAL_GetTick>
 8000cac:	0002      	movs	r2, r0
 8000cae:	4b0d      	ldr	r3, [pc, #52]	@ (8000ce4 <Button_Tick+0x6c>)
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	1ad3      	subs	r3, r2, r3
 8000cb4:	2b14      	cmp	r3, #20
 8000cb6:	d90e      	bls.n	8000cd6 <Button_Tick+0x5e>
	            lastTick = HAL_GetTick();
 8000cb8:	f000 f968 	bl	8000f8c <HAL_GetTick>
 8000cbc:	0002      	movs	r2, r0
 8000cbe:	4b09      	ldr	r3, [pc, #36]	@ (8000ce4 <Button_Tick+0x6c>)
 8000cc0:	601a      	str	r2, [r3, #0]
	            lastState = currentState;
 8000cc2:	4b07      	ldr	r3, [pc, #28]	@ (8000ce0 <Button_Tick+0x68>)
 8000cc4:	197a      	adds	r2, r7, r5
 8000cc6:	7812      	ldrb	r2, [r2, #0]
 8000cc8:	701a      	strb	r2, [r3, #0]

	            if (currentState == 0) {
 8000cca:	197b      	adds	r3, r7, r5
 8000ccc:	781b      	ldrb	r3, [r3, #0]
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d101      	bne.n	8000cd6 <Button_Tick+0x5e>
	                return 1; // кнопка нажата
 8000cd2:	2301      	movs	r3, #1
 8000cd4:	e000      	b.n	8000cd8 <Button_Tick+0x60>
	            }
	        }
	    }

	    return 0; // кнопка не нажата
 8000cd6:	2300      	movs	r3, #0
}
 8000cd8:	0018      	movs	r0, r3
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	b004      	add	sp, #16
 8000cde:	bdb0      	pop	{r4, r5, r7, pc}
 8000ce0:	20000010 	.word	0x20000010
 8000ce4:	200000ec 	.word	0x200000ec

08000ce8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cec:	b672      	cpsid	i
}
 8000cee:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cf0:	46c0      	nop			@ (mov r8, r8)
 8000cf2:	e7fd      	b.n	8000cf0 <Error_Handler+0x8>

08000cf4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b082      	sub	sp, #8
 8000cf8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cfa:	4b0f      	ldr	r3, [pc, #60]	@ (8000d38 <HAL_MspInit+0x44>)
 8000cfc:	699a      	ldr	r2, [r3, #24]
 8000cfe:	4b0e      	ldr	r3, [pc, #56]	@ (8000d38 <HAL_MspInit+0x44>)
 8000d00:	2101      	movs	r1, #1
 8000d02:	430a      	orrs	r2, r1
 8000d04:	619a      	str	r2, [r3, #24]
 8000d06:	4b0c      	ldr	r3, [pc, #48]	@ (8000d38 <HAL_MspInit+0x44>)
 8000d08:	699b      	ldr	r3, [r3, #24]
 8000d0a:	2201      	movs	r2, #1
 8000d0c:	4013      	ands	r3, r2
 8000d0e:	607b      	str	r3, [r7, #4]
 8000d10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d12:	4b09      	ldr	r3, [pc, #36]	@ (8000d38 <HAL_MspInit+0x44>)
 8000d14:	69da      	ldr	r2, [r3, #28]
 8000d16:	4b08      	ldr	r3, [pc, #32]	@ (8000d38 <HAL_MspInit+0x44>)
 8000d18:	2180      	movs	r1, #128	@ 0x80
 8000d1a:	0549      	lsls	r1, r1, #21
 8000d1c:	430a      	orrs	r2, r1
 8000d1e:	61da      	str	r2, [r3, #28]
 8000d20:	4b05      	ldr	r3, [pc, #20]	@ (8000d38 <HAL_MspInit+0x44>)
 8000d22:	69da      	ldr	r2, [r3, #28]
 8000d24:	2380      	movs	r3, #128	@ 0x80
 8000d26:	055b      	lsls	r3, r3, #21
 8000d28:	4013      	ands	r3, r2
 8000d2a:	603b      	str	r3, [r7, #0]
 8000d2c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d2e:	46c0      	nop			@ (mov r8, r8)
 8000d30:	46bd      	mov	sp, r7
 8000d32:	b002      	add	sp, #8
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	46c0      	nop			@ (mov r8, r8)
 8000d38:	40021000 	.word	0x40021000

08000d3c <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d3c:	b590      	push	{r4, r7, lr}
 8000d3e:	b08b      	sub	sp, #44	@ 0x2c
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d44:	2414      	movs	r4, #20
 8000d46:	193b      	adds	r3, r7, r4
 8000d48:	0018      	movs	r0, r3
 8000d4a:	2314      	movs	r3, #20
 8000d4c:	001a      	movs	r2, r3
 8000d4e:	2100      	movs	r1, #0
 8000d50:	f001 fd74 	bl	800283c <memset>
  if(hi2c->Instance==I2C1)
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	4a1d      	ldr	r2, [pc, #116]	@ (8000dd0 <HAL_I2C_MspInit+0x94>)
 8000d5a:	4293      	cmp	r3, r2
 8000d5c:	d133      	bne.n	8000dc6 <HAL_I2C_MspInit+0x8a>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d5e:	4b1d      	ldr	r3, [pc, #116]	@ (8000dd4 <HAL_I2C_MspInit+0x98>)
 8000d60:	695a      	ldr	r2, [r3, #20]
 8000d62:	4b1c      	ldr	r3, [pc, #112]	@ (8000dd4 <HAL_I2C_MspInit+0x98>)
 8000d64:	2180      	movs	r1, #128	@ 0x80
 8000d66:	0289      	lsls	r1, r1, #10
 8000d68:	430a      	orrs	r2, r1
 8000d6a:	615a      	str	r2, [r3, #20]
 8000d6c:	4b19      	ldr	r3, [pc, #100]	@ (8000dd4 <HAL_I2C_MspInit+0x98>)
 8000d6e:	695a      	ldr	r2, [r3, #20]
 8000d70:	2380      	movs	r3, #128	@ 0x80
 8000d72:	029b      	lsls	r3, r3, #10
 8000d74:	4013      	ands	r3, r2
 8000d76:	613b      	str	r3, [r7, #16]
 8000d78:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000d7a:	193b      	adds	r3, r7, r4
 8000d7c:	22c0      	movs	r2, #192	@ 0xc0
 8000d7e:	00d2      	lsls	r2, r2, #3
 8000d80:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d82:	0021      	movs	r1, r4
 8000d84:	187b      	adds	r3, r7, r1
 8000d86:	2212      	movs	r2, #18
 8000d88:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8a:	187b      	adds	r3, r7, r1
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d90:	187b      	adds	r3, r7, r1
 8000d92:	2203      	movs	r2, #3
 8000d94:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d96:	187b      	adds	r3, r7, r1
 8000d98:	2204      	movs	r2, #4
 8000d9a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d9c:	187a      	adds	r2, r7, r1
 8000d9e:	2390      	movs	r3, #144	@ 0x90
 8000da0:	05db      	lsls	r3, r3, #23
 8000da2:	0011      	movs	r1, r2
 8000da4:	0018      	movs	r0, r3
 8000da6:	f000 f9d3 	bl	8001150 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000daa:	4b0a      	ldr	r3, [pc, #40]	@ (8000dd4 <HAL_I2C_MspInit+0x98>)
 8000dac:	69da      	ldr	r2, [r3, #28]
 8000dae:	4b09      	ldr	r3, [pc, #36]	@ (8000dd4 <HAL_I2C_MspInit+0x98>)
 8000db0:	2180      	movs	r1, #128	@ 0x80
 8000db2:	0389      	lsls	r1, r1, #14
 8000db4:	430a      	orrs	r2, r1
 8000db6:	61da      	str	r2, [r3, #28]
 8000db8:	4b06      	ldr	r3, [pc, #24]	@ (8000dd4 <HAL_I2C_MspInit+0x98>)
 8000dba:	69da      	ldr	r2, [r3, #28]
 8000dbc:	2380      	movs	r3, #128	@ 0x80
 8000dbe:	039b      	lsls	r3, r3, #14
 8000dc0:	4013      	ands	r3, r2
 8000dc2:	60fb      	str	r3, [r7, #12]
 8000dc4:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000dc6:	46c0      	nop			@ (mov r8, r8)
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	b00b      	add	sp, #44	@ 0x2c
 8000dcc:	bd90      	pop	{r4, r7, pc}
 8000dce:	46c0      	nop			@ (mov r8, r8)
 8000dd0:	40005400 	.word	0x40005400
 8000dd4:	40021000 	.word	0x40021000

08000dd8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ddc:	46c0      	nop			@ (mov r8, r8)
 8000dde:	e7fd      	b.n	8000ddc <NMI_Handler+0x4>

08000de0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000de4:	46c0      	nop			@ (mov r8, r8)
 8000de6:	e7fd      	b.n	8000de4 <HardFault_Handler+0x4>

08000de8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000dec:	46c0      	nop			@ (mov r8, r8)
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}

08000df2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000df2:	b580      	push	{r7, lr}
 8000df4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000df6:	46c0      	nop			@ (mov r8, r8)
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bd80      	pop	{r7, pc}

08000dfc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e00:	f000 f8b2 	bl	8000f68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e04:	46c0      	nop			@ (mov r8, r8)
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}
	...

08000e0c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b086      	sub	sp, #24
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e14:	4a14      	ldr	r2, [pc, #80]	@ (8000e68 <_sbrk+0x5c>)
 8000e16:	4b15      	ldr	r3, [pc, #84]	@ (8000e6c <_sbrk+0x60>)
 8000e18:	1ad3      	subs	r3, r2, r3
 8000e1a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e1c:	697b      	ldr	r3, [r7, #20]
 8000e1e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e20:	4b13      	ldr	r3, [pc, #76]	@ (8000e70 <_sbrk+0x64>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d102      	bne.n	8000e2e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e28:	4b11      	ldr	r3, [pc, #68]	@ (8000e70 <_sbrk+0x64>)
 8000e2a:	4a12      	ldr	r2, [pc, #72]	@ (8000e74 <_sbrk+0x68>)
 8000e2c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e2e:	4b10      	ldr	r3, [pc, #64]	@ (8000e70 <_sbrk+0x64>)
 8000e30:	681a      	ldr	r2, [r3, #0]
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	18d3      	adds	r3, r2, r3
 8000e36:	693a      	ldr	r2, [r7, #16]
 8000e38:	429a      	cmp	r2, r3
 8000e3a:	d207      	bcs.n	8000e4c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e3c:	f001 fd06 	bl	800284c <__errno>
 8000e40:	0003      	movs	r3, r0
 8000e42:	220c      	movs	r2, #12
 8000e44:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e46:	2301      	movs	r3, #1
 8000e48:	425b      	negs	r3, r3
 8000e4a:	e009      	b.n	8000e60 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e4c:	4b08      	ldr	r3, [pc, #32]	@ (8000e70 <_sbrk+0x64>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e52:	4b07      	ldr	r3, [pc, #28]	@ (8000e70 <_sbrk+0x64>)
 8000e54:	681a      	ldr	r2, [r3, #0]
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	18d2      	adds	r2, r2, r3
 8000e5a:	4b05      	ldr	r3, [pc, #20]	@ (8000e70 <_sbrk+0x64>)
 8000e5c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000e5e:	68fb      	ldr	r3, [r7, #12]
}
 8000e60:	0018      	movs	r0, r3
 8000e62:	46bd      	mov	sp, r7
 8000e64:	b006      	add	sp, #24
 8000e66:	bd80      	pop	{r7, pc}
 8000e68:	20001000 	.word	0x20001000
 8000e6c:	00000400 	.word	0x00000400
 8000e70:	200000f0 	.word	0x200000f0
 8000e74:	20000240 	.word	0x20000240

08000e78 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000e7c:	46c0      	nop			@ (mov r8, r8)
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}
	...

08000e84 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000e84:	480d      	ldr	r0, [pc, #52]	@ (8000ebc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000e86:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000e88:	f7ff fff6 	bl	8000e78 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e8c:	480c      	ldr	r0, [pc, #48]	@ (8000ec0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000e8e:	490d      	ldr	r1, [pc, #52]	@ (8000ec4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e90:	4a0d      	ldr	r2, [pc, #52]	@ (8000ec8 <LoopForever+0xe>)
  movs r3, #0
 8000e92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e94:	e002      	b.n	8000e9c <LoopCopyDataInit>

08000e96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e9a:	3304      	adds	r3, #4

08000e9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ea0:	d3f9      	bcc.n	8000e96 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ea2:	4a0a      	ldr	r2, [pc, #40]	@ (8000ecc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ea4:	4c0a      	ldr	r4, [pc, #40]	@ (8000ed0 <LoopForever+0x16>)
  movs r3, #0
 8000ea6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ea8:	e001      	b.n	8000eae <LoopFillZerobss>

08000eaa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000eaa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000eac:	3204      	adds	r2, #4

08000eae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000eae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000eb0:	d3fb      	bcc.n	8000eaa <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000eb2:	f001 fcd1 	bl	8002858 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000eb6:	f7ff fcc3 	bl	8000840 <main>

08000eba <LoopForever>:

LoopForever:
    b LoopForever
 8000eba:	e7fe      	b.n	8000eba <LoopForever>
  ldr   r0, =_estack
 8000ebc:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 8000ec0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ec4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000ec8:	08003208 	.word	0x08003208
  ldr r2, =_sbss
 8000ecc:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000ed0:	20000240 	.word	0x20000240

08000ed4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ed4:	e7fe      	b.n	8000ed4 <ADC1_IRQHandler>
	...

08000ed8 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000edc:	4b07      	ldr	r3, [pc, #28]	@ (8000efc <HAL_Init+0x24>)
 8000ede:	681a      	ldr	r2, [r3, #0]
 8000ee0:	4b06      	ldr	r3, [pc, #24]	@ (8000efc <HAL_Init+0x24>)
 8000ee2:	2110      	movs	r1, #16
 8000ee4:	430a      	orrs	r2, r1
 8000ee6:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000ee8:	2003      	movs	r0, #3
 8000eea:	f000 f809 	bl	8000f00 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000eee:	f7ff ff01 	bl	8000cf4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ef2:	2300      	movs	r3, #0
}
 8000ef4:	0018      	movs	r0, r3
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	46c0      	nop			@ (mov r8, r8)
 8000efc:	40022000 	.word	0x40022000

08000f00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f00:	b590      	push	{r4, r7, lr}
 8000f02:	b083      	sub	sp, #12
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f08:	4b14      	ldr	r3, [pc, #80]	@ (8000f5c <HAL_InitTick+0x5c>)
 8000f0a:	681c      	ldr	r4, [r3, #0]
 8000f0c:	4b14      	ldr	r3, [pc, #80]	@ (8000f60 <HAL_InitTick+0x60>)
 8000f0e:	781b      	ldrb	r3, [r3, #0]
 8000f10:	0019      	movs	r1, r3
 8000f12:	23fa      	movs	r3, #250	@ 0xfa
 8000f14:	0098      	lsls	r0, r3, #2
 8000f16:	f7ff f901 	bl	800011c <__udivsi3>
 8000f1a:	0003      	movs	r3, r0
 8000f1c:	0019      	movs	r1, r3
 8000f1e:	0020      	movs	r0, r4
 8000f20:	f7ff f8fc 	bl	800011c <__udivsi3>
 8000f24:	0003      	movs	r3, r0
 8000f26:	0018      	movs	r0, r3
 8000f28:	f000 f905 	bl	8001136 <HAL_SYSTICK_Config>
 8000f2c:	1e03      	subs	r3, r0, #0
 8000f2e:	d001      	beq.n	8000f34 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000f30:	2301      	movs	r3, #1
 8000f32:	e00f      	b.n	8000f54 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	2b03      	cmp	r3, #3
 8000f38:	d80b      	bhi.n	8000f52 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f3a:	6879      	ldr	r1, [r7, #4]
 8000f3c:	2301      	movs	r3, #1
 8000f3e:	425b      	negs	r3, r3
 8000f40:	2200      	movs	r2, #0
 8000f42:	0018      	movs	r0, r3
 8000f44:	f000 f8e2 	bl	800110c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f48:	4b06      	ldr	r3, [pc, #24]	@ (8000f64 <HAL_InitTick+0x64>)
 8000f4a:	687a      	ldr	r2, [r7, #4]
 8000f4c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	e000      	b.n	8000f54 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000f52:	2301      	movs	r3, #1
}
 8000f54:	0018      	movs	r0, r3
 8000f56:	46bd      	mov	sp, r7
 8000f58:	b003      	add	sp, #12
 8000f5a:	bd90      	pop	{r4, r7, pc}
 8000f5c:	20000014 	.word	0x20000014
 8000f60:	2000001c 	.word	0x2000001c
 8000f64:	20000018 	.word	0x20000018

08000f68 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f6c:	4b05      	ldr	r3, [pc, #20]	@ (8000f84 <HAL_IncTick+0x1c>)
 8000f6e:	781b      	ldrb	r3, [r3, #0]
 8000f70:	001a      	movs	r2, r3
 8000f72:	4b05      	ldr	r3, [pc, #20]	@ (8000f88 <HAL_IncTick+0x20>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	18d2      	adds	r2, r2, r3
 8000f78:	4b03      	ldr	r3, [pc, #12]	@ (8000f88 <HAL_IncTick+0x20>)
 8000f7a:	601a      	str	r2, [r3, #0]
}
 8000f7c:	46c0      	nop			@ (mov r8, r8)
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	46c0      	nop			@ (mov r8, r8)
 8000f84:	2000001c 	.word	0x2000001c
 8000f88:	200000f4 	.word	0x200000f4

08000f8c <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	af00      	add	r7, sp, #0
  return uwTick;
 8000f90:	4b02      	ldr	r3, [pc, #8]	@ (8000f9c <HAL_GetTick+0x10>)
 8000f92:	681b      	ldr	r3, [r3, #0]
}
 8000f94:	0018      	movs	r0, r3
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	46c0      	nop			@ (mov r8, r8)
 8000f9c:	200000f4 	.word	0x200000f4

08000fa0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b084      	sub	sp, #16
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fa8:	f7ff fff0 	bl	8000f8c <HAL_GetTick>
 8000fac:	0003      	movs	r3, r0
 8000fae:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	3301      	adds	r3, #1
 8000fb8:	d005      	beq.n	8000fc6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fba:	4b0a      	ldr	r3, [pc, #40]	@ (8000fe4 <HAL_Delay+0x44>)
 8000fbc:	781b      	ldrb	r3, [r3, #0]
 8000fbe:	001a      	movs	r2, r3
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	189b      	adds	r3, r3, r2
 8000fc4:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000fc6:	46c0      	nop			@ (mov r8, r8)
 8000fc8:	f7ff ffe0 	bl	8000f8c <HAL_GetTick>
 8000fcc:	0002      	movs	r2, r0
 8000fce:	68bb      	ldr	r3, [r7, #8]
 8000fd0:	1ad3      	subs	r3, r2, r3
 8000fd2:	68fa      	ldr	r2, [r7, #12]
 8000fd4:	429a      	cmp	r2, r3
 8000fd6:	d8f7      	bhi.n	8000fc8 <HAL_Delay+0x28>
  {
  }
}
 8000fd8:	46c0      	nop			@ (mov r8, r8)
 8000fda:	46c0      	nop			@ (mov r8, r8)
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	b004      	add	sp, #16
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	46c0      	nop			@ (mov r8, r8)
 8000fe4:	2000001c 	.word	0x2000001c

08000fe8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fe8:	b590      	push	{r4, r7, lr}
 8000fea:	b083      	sub	sp, #12
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	0002      	movs	r2, r0
 8000ff0:	6039      	str	r1, [r7, #0]
 8000ff2:	1dfb      	adds	r3, r7, #7
 8000ff4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000ff6:	1dfb      	adds	r3, r7, #7
 8000ff8:	781b      	ldrb	r3, [r3, #0]
 8000ffa:	2b7f      	cmp	r3, #127	@ 0x7f
 8000ffc:	d828      	bhi.n	8001050 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ffe:	4a2f      	ldr	r2, [pc, #188]	@ (80010bc <__NVIC_SetPriority+0xd4>)
 8001000:	1dfb      	adds	r3, r7, #7
 8001002:	781b      	ldrb	r3, [r3, #0]
 8001004:	b25b      	sxtb	r3, r3
 8001006:	089b      	lsrs	r3, r3, #2
 8001008:	33c0      	adds	r3, #192	@ 0xc0
 800100a:	009b      	lsls	r3, r3, #2
 800100c:	589b      	ldr	r3, [r3, r2]
 800100e:	1dfa      	adds	r2, r7, #7
 8001010:	7812      	ldrb	r2, [r2, #0]
 8001012:	0011      	movs	r1, r2
 8001014:	2203      	movs	r2, #3
 8001016:	400a      	ands	r2, r1
 8001018:	00d2      	lsls	r2, r2, #3
 800101a:	21ff      	movs	r1, #255	@ 0xff
 800101c:	4091      	lsls	r1, r2
 800101e:	000a      	movs	r2, r1
 8001020:	43d2      	mvns	r2, r2
 8001022:	401a      	ands	r2, r3
 8001024:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	019b      	lsls	r3, r3, #6
 800102a:	22ff      	movs	r2, #255	@ 0xff
 800102c:	401a      	ands	r2, r3
 800102e:	1dfb      	adds	r3, r7, #7
 8001030:	781b      	ldrb	r3, [r3, #0]
 8001032:	0018      	movs	r0, r3
 8001034:	2303      	movs	r3, #3
 8001036:	4003      	ands	r3, r0
 8001038:	00db      	lsls	r3, r3, #3
 800103a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800103c:	481f      	ldr	r0, [pc, #124]	@ (80010bc <__NVIC_SetPriority+0xd4>)
 800103e:	1dfb      	adds	r3, r7, #7
 8001040:	781b      	ldrb	r3, [r3, #0]
 8001042:	b25b      	sxtb	r3, r3
 8001044:	089b      	lsrs	r3, r3, #2
 8001046:	430a      	orrs	r2, r1
 8001048:	33c0      	adds	r3, #192	@ 0xc0
 800104a:	009b      	lsls	r3, r3, #2
 800104c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800104e:	e031      	b.n	80010b4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001050:	4a1b      	ldr	r2, [pc, #108]	@ (80010c0 <__NVIC_SetPriority+0xd8>)
 8001052:	1dfb      	adds	r3, r7, #7
 8001054:	781b      	ldrb	r3, [r3, #0]
 8001056:	0019      	movs	r1, r3
 8001058:	230f      	movs	r3, #15
 800105a:	400b      	ands	r3, r1
 800105c:	3b08      	subs	r3, #8
 800105e:	089b      	lsrs	r3, r3, #2
 8001060:	3306      	adds	r3, #6
 8001062:	009b      	lsls	r3, r3, #2
 8001064:	18d3      	adds	r3, r2, r3
 8001066:	3304      	adds	r3, #4
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	1dfa      	adds	r2, r7, #7
 800106c:	7812      	ldrb	r2, [r2, #0]
 800106e:	0011      	movs	r1, r2
 8001070:	2203      	movs	r2, #3
 8001072:	400a      	ands	r2, r1
 8001074:	00d2      	lsls	r2, r2, #3
 8001076:	21ff      	movs	r1, #255	@ 0xff
 8001078:	4091      	lsls	r1, r2
 800107a:	000a      	movs	r2, r1
 800107c:	43d2      	mvns	r2, r2
 800107e:	401a      	ands	r2, r3
 8001080:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	019b      	lsls	r3, r3, #6
 8001086:	22ff      	movs	r2, #255	@ 0xff
 8001088:	401a      	ands	r2, r3
 800108a:	1dfb      	adds	r3, r7, #7
 800108c:	781b      	ldrb	r3, [r3, #0]
 800108e:	0018      	movs	r0, r3
 8001090:	2303      	movs	r3, #3
 8001092:	4003      	ands	r3, r0
 8001094:	00db      	lsls	r3, r3, #3
 8001096:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001098:	4809      	ldr	r0, [pc, #36]	@ (80010c0 <__NVIC_SetPriority+0xd8>)
 800109a:	1dfb      	adds	r3, r7, #7
 800109c:	781b      	ldrb	r3, [r3, #0]
 800109e:	001c      	movs	r4, r3
 80010a0:	230f      	movs	r3, #15
 80010a2:	4023      	ands	r3, r4
 80010a4:	3b08      	subs	r3, #8
 80010a6:	089b      	lsrs	r3, r3, #2
 80010a8:	430a      	orrs	r2, r1
 80010aa:	3306      	adds	r3, #6
 80010ac:	009b      	lsls	r3, r3, #2
 80010ae:	18c3      	adds	r3, r0, r3
 80010b0:	3304      	adds	r3, #4
 80010b2:	601a      	str	r2, [r3, #0]
}
 80010b4:	46c0      	nop			@ (mov r8, r8)
 80010b6:	46bd      	mov	sp, r7
 80010b8:	b003      	add	sp, #12
 80010ba:	bd90      	pop	{r4, r7, pc}
 80010bc:	e000e100 	.word	0xe000e100
 80010c0:	e000ed00 	.word	0xe000ed00

080010c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b082      	sub	sp, #8
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	1e5a      	subs	r2, r3, #1
 80010d0:	2380      	movs	r3, #128	@ 0x80
 80010d2:	045b      	lsls	r3, r3, #17
 80010d4:	429a      	cmp	r2, r3
 80010d6:	d301      	bcc.n	80010dc <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010d8:	2301      	movs	r3, #1
 80010da:	e010      	b.n	80010fe <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010dc:	4b0a      	ldr	r3, [pc, #40]	@ (8001108 <SysTick_Config+0x44>)
 80010de:	687a      	ldr	r2, [r7, #4]
 80010e0:	3a01      	subs	r2, #1
 80010e2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010e4:	2301      	movs	r3, #1
 80010e6:	425b      	negs	r3, r3
 80010e8:	2103      	movs	r1, #3
 80010ea:	0018      	movs	r0, r3
 80010ec:	f7ff ff7c 	bl	8000fe8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010f0:	4b05      	ldr	r3, [pc, #20]	@ (8001108 <SysTick_Config+0x44>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010f6:	4b04      	ldr	r3, [pc, #16]	@ (8001108 <SysTick_Config+0x44>)
 80010f8:	2207      	movs	r2, #7
 80010fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010fc:	2300      	movs	r3, #0
}
 80010fe:	0018      	movs	r0, r3
 8001100:	46bd      	mov	sp, r7
 8001102:	b002      	add	sp, #8
 8001104:	bd80      	pop	{r7, pc}
 8001106:	46c0      	nop			@ (mov r8, r8)
 8001108:	e000e010 	.word	0xe000e010

0800110c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b084      	sub	sp, #16
 8001110:	af00      	add	r7, sp, #0
 8001112:	60b9      	str	r1, [r7, #8]
 8001114:	607a      	str	r2, [r7, #4]
 8001116:	210f      	movs	r1, #15
 8001118:	187b      	adds	r3, r7, r1
 800111a:	1c02      	adds	r2, r0, #0
 800111c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800111e:	68ba      	ldr	r2, [r7, #8]
 8001120:	187b      	adds	r3, r7, r1
 8001122:	781b      	ldrb	r3, [r3, #0]
 8001124:	b25b      	sxtb	r3, r3
 8001126:	0011      	movs	r1, r2
 8001128:	0018      	movs	r0, r3
 800112a:	f7ff ff5d 	bl	8000fe8 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 800112e:	46c0      	nop			@ (mov r8, r8)
 8001130:	46bd      	mov	sp, r7
 8001132:	b004      	add	sp, #16
 8001134:	bd80      	pop	{r7, pc}

08001136 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001136:	b580      	push	{r7, lr}
 8001138:	b082      	sub	sp, #8
 800113a:	af00      	add	r7, sp, #0
 800113c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	0018      	movs	r0, r3
 8001142:	f7ff ffbf 	bl	80010c4 <SysTick_Config>
 8001146:	0003      	movs	r3, r0
}
 8001148:	0018      	movs	r0, r3
 800114a:	46bd      	mov	sp, r7
 800114c:	b002      	add	sp, #8
 800114e:	bd80      	pop	{r7, pc}

08001150 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b086      	sub	sp, #24
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
 8001158:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800115a:	2300      	movs	r3, #0
 800115c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800115e:	e14f      	b.n	8001400 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	2101      	movs	r1, #1
 8001166:	697a      	ldr	r2, [r7, #20]
 8001168:	4091      	lsls	r1, r2
 800116a:	000a      	movs	r2, r1
 800116c:	4013      	ands	r3, r2
 800116e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	2b00      	cmp	r3, #0
 8001174:	d100      	bne.n	8001178 <HAL_GPIO_Init+0x28>
 8001176:	e140      	b.n	80013fa <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	685b      	ldr	r3, [r3, #4]
 800117c:	2203      	movs	r2, #3
 800117e:	4013      	ands	r3, r2
 8001180:	2b01      	cmp	r3, #1
 8001182:	d005      	beq.n	8001190 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	685b      	ldr	r3, [r3, #4]
 8001188:	2203      	movs	r2, #3
 800118a:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800118c:	2b02      	cmp	r3, #2
 800118e:	d130      	bne.n	80011f2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	689b      	ldr	r3, [r3, #8]
 8001194:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001196:	697b      	ldr	r3, [r7, #20]
 8001198:	005b      	lsls	r3, r3, #1
 800119a:	2203      	movs	r2, #3
 800119c:	409a      	lsls	r2, r3
 800119e:	0013      	movs	r3, r2
 80011a0:	43da      	mvns	r2, r3
 80011a2:	693b      	ldr	r3, [r7, #16]
 80011a4:	4013      	ands	r3, r2
 80011a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	68da      	ldr	r2, [r3, #12]
 80011ac:	697b      	ldr	r3, [r7, #20]
 80011ae:	005b      	lsls	r3, r3, #1
 80011b0:	409a      	lsls	r2, r3
 80011b2:	0013      	movs	r3, r2
 80011b4:	693a      	ldr	r2, [r7, #16]
 80011b6:	4313      	orrs	r3, r2
 80011b8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	693a      	ldr	r2, [r7, #16]
 80011be:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011c6:	2201      	movs	r2, #1
 80011c8:	697b      	ldr	r3, [r7, #20]
 80011ca:	409a      	lsls	r2, r3
 80011cc:	0013      	movs	r3, r2
 80011ce:	43da      	mvns	r2, r3
 80011d0:	693b      	ldr	r3, [r7, #16]
 80011d2:	4013      	ands	r3, r2
 80011d4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	685b      	ldr	r3, [r3, #4]
 80011da:	091b      	lsrs	r3, r3, #4
 80011dc:	2201      	movs	r2, #1
 80011de:	401a      	ands	r2, r3
 80011e0:	697b      	ldr	r3, [r7, #20]
 80011e2:	409a      	lsls	r2, r3
 80011e4:	0013      	movs	r3, r2
 80011e6:	693a      	ldr	r2, [r7, #16]
 80011e8:	4313      	orrs	r3, r2
 80011ea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	693a      	ldr	r2, [r7, #16]
 80011f0:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	685b      	ldr	r3, [r3, #4]
 80011f6:	2203      	movs	r2, #3
 80011f8:	4013      	ands	r3, r2
 80011fa:	2b03      	cmp	r3, #3
 80011fc:	d017      	beq.n	800122e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	68db      	ldr	r3, [r3, #12]
 8001202:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001204:	697b      	ldr	r3, [r7, #20]
 8001206:	005b      	lsls	r3, r3, #1
 8001208:	2203      	movs	r2, #3
 800120a:	409a      	lsls	r2, r3
 800120c:	0013      	movs	r3, r2
 800120e:	43da      	mvns	r2, r3
 8001210:	693b      	ldr	r3, [r7, #16]
 8001212:	4013      	ands	r3, r2
 8001214:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	689a      	ldr	r2, [r3, #8]
 800121a:	697b      	ldr	r3, [r7, #20]
 800121c:	005b      	lsls	r3, r3, #1
 800121e:	409a      	lsls	r2, r3
 8001220:	0013      	movs	r3, r2
 8001222:	693a      	ldr	r2, [r7, #16]
 8001224:	4313      	orrs	r3, r2
 8001226:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	693a      	ldr	r2, [r7, #16]
 800122c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	685b      	ldr	r3, [r3, #4]
 8001232:	2203      	movs	r2, #3
 8001234:	4013      	ands	r3, r2
 8001236:	2b02      	cmp	r3, #2
 8001238:	d123      	bne.n	8001282 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800123a:	697b      	ldr	r3, [r7, #20]
 800123c:	08da      	lsrs	r2, r3, #3
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	3208      	adds	r2, #8
 8001242:	0092      	lsls	r2, r2, #2
 8001244:	58d3      	ldr	r3, [r2, r3]
 8001246:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001248:	697b      	ldr	r3, [r7, #20]
 800124a:	2207      	movs	r2, #7
 800124c:	4013      	ands	r3, r2
 800124e:	009b      	lsls	r3, r3, #2
 8001250:	220f      	movs	r2, #15
 8001252:	409a      	lsls	r2, r3
 8001254:	0013      	movs	r3, r2
 8001256:	43da      	mvns	r2, r3
 8001258:	693b      	ldr	r3, [r7, #16]
 800125a:	4013      	ands	r3, r2
 800125c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	691a      	ldr	r2, [r3, #16]
 8001262:	697b      	ldr	r3, [r7, #20]
 8001264:	2107      	movs	r1, #7
 8001266:	400b      	ands	r3, r1
 8001268:	009b      	lsls	r3, r3, #2
 800126a:	409a      	lsls	r2, r3
 800126c:	0013      	movs	r3, r2
 800126e:	693a      	ldr	r2, [r7, #16]
 8001270:	4313      	orrs	r3, r2
 8001272:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001274:	697b      	ldr	r3, [r7, #20]
 8001276:	08da      	lsrs	r2, r3, #3
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	3208      	adds	r2, #8
 800127c:	0092      	lsls	r2, r2, #2
 800127e:	6939      	ldr	r1, [r7, #16]
 8001280:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001288:	697b      	ldr	r3, [r7, #20]
 800128a:	005b      	lsls	r3, r3, #1
 800128c:	2203      	movs	r2, #3
 800128e:	409a      	lsls	r2, r3
 8001290:	0013      	movs	r3, r2
 8001292:	43da      	mvns	r2, r3
 8001294:	693b      	ldr	r3, [r7, #16]
 8001296:	4013      	ands	r3, r2
 8001298:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	685b      	ldr	r3, [r3, #4]
 800129e:	2203      	movs	r2, #3
 80012a0:	401a      	ands	r2, r3
 80012a2:	697b      	ldr	r3, [r7, #20]
 80012a4:	005b      	lsls	r3, r3, #1
 80012a6:	409a      	lsls	r2, r3
 80012a8:	0013      	movs	r3, r2
 80012aa:	693a      	ldr	r2, [r7, #16]
 80012ac:	4313      	orrs	r3, r2
 80012ae:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	693a      	ldr	r2, [r7, #16]
 80012b4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	685a      	ldr	r2, [r3, #4]
 80012ba:	23c0      	movs	r3, #192	@ 0xc0
 80012bc:	029b      	lsls	r3, r3, #10
 80012be:	4013      	ands	r3, r2
 80012c0:	d100      	bne.n	80012c4 <HAL_GPIO_Init+0x174>
 80012c2:	e09a      	b.n	80013fa <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012c4:	4b54      	ldr	r3, [pc, #336]	@ (8001418 <HAL_GPIO_Init+0x2c8>)
 80012c6:	699a      	ldr	r2, [r3, #24]
 80012c8:	4b53      	ldr	r3, [pc, #332]	@ (8001418 <HAL_GPIO_Init+0x2c8>)
 80012ca:	2101      	movs	r1, #1
 80012cc:	430a      	orrs	r2, r1
 80012ce:	619a      	str	r2, [r3, #24]
 80012d0:	4b51      	ldr	r3, [pc, #324]	@ (8001418 <HAL_GPIO_Init+0x2c8>)
 80012d2:	699b      	ldr	r3, [r3, #24]
 80012d4:	2201      	movs	r2, #1
 80012d6:	4013      	ands	r3, r2
 80012d8:	60bb      	str	r3, [r7, #8]
 80012da:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80012dc:	4a4f      	ldr	r2, [pc, #316]	@ (800141c <HAL_GPIO_Init+0x2cc>)
 80012de:	697b      	ldr	r3, [r7, #20]
 80012e0:	089b      	lsrs	r3, r3, #2
 80012e2:	3302      	adds	r3, #2
 80012e4:	009b      	lsls	r3, r3, #2
 80012e6:	589b      	ldr	r3, [r3, r2]
 80012e8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80012ea:	697b      	ldr	r3, [r7, #20]
 80012ec:	2203      	movs	r2, #3
 80012ee:	4013      	ands	r3, r2
 80012f0:	009b      	lsls	r3, r3, #2
 80012f2:	220f      	movs	r2, #15
 80012f4:	409a      	lsls	r2, r3
 80012f6:	0013      	movs	r3, r2
 80012f8:	43da      	mvns	r2, r3
 80012fa:	693b      	ldr	r3, [r7, #16]
 80012fc:	4013      	ands	r3, r2
 80012fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001300:	687a      	ldr	r2, [r7, #4]
 8001302:	2390      	movs	r3, #144	@ 0x90
 8001304:	05db      	lsls	r3, r3, #23
 8001306:	429a      	cmp	r2, r3
 8001308:	d013      	beq.n	8001332 <HAL_GPIO_Init+0x1e2>
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	4a44      	ldr	r2, [pc, #272]	@ (8001420 <HAL_GPIO_Init+0x2d0>)
 800130e:	4293      	cmp	r3, r2
 8001310:	d00d      	beq.n	800132e <HAL_GPIO_Init+0x1de>
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	4a43      	ldr	r2, [pc, #268]	@ (8001424 <HAL_GPIO_Init+0x2d4>)
 8001316:	4293      	cmp	r3, r2
 8001318:	d007      	beq.n	800132a <HAL_GPIO_Init+0x1da>
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	4a42      	ldr	r2, [pc, #264]	@ (8001428 <HAL_GPIO_Init+0x2d8>)
 800131e:	4293      	cmp	r3, r2
 8001320:	d101      	bne.n	8001326 <HAL_GPIO_Init+0x1d6>
 8001322:	2303      	movs	r3, #3
 8001324:	e006      	b.n	8001334 <HAL_GPIO_Init+0x1e4>
 8001326:	2305      	movs	r3, #5
 8001328:	e004      	b.n	8001334 <HAL_GPIO_Init+0x1e4>
 800132a:	2302      	movs	r3, #2
 800132c:	e002      	b.n	8001334 <HAL_GPIO_Init+0x1e4>
 800132e:	2301      	movs	r3, #1
 8001330:	e000      	b.n	8001334 <HAL_GPIO_Init+0x1e4>
 8001332:	2300      	movs	r3, #0
 8001334:	697a      	ldr	r2, [r7, #20]
 8001336:	2103      	movs	r1, #3
 8001338:	400a      	ands	r2, r1
 800133a:	0092      	lsls	r2, r2, #2
 800133c:	4093      	lsls	r3, r2
 800133e:	693a      	ldr	r2, [r7, #16]
 8001340:	4313      	orrs	r3, r2
 8001342:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001344:	4935      	ldr	r1, [pc, #212]	@ (800141c <HAL_GPIO_Init+0x2cc>)
 8001346:	697b      	ldr	r3, [r7, #20]
 8001348:	089b      	lsrs	r3, r3, #2
 800134a:	3302      	adds	r3, #2
 800134c:	009b      	lsls	r3, r3, #2
 800134e:	693a      	ldr	r2, [r7, #16]
 8001350:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001352:	4b36      	ldr	r3, [pc, #216]	@ (800142c <HAL_GPIO_Init+0x2dc>)
 8001354:	689b      	ldr	r3, [r3, #8]
 8001356:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	43da      	mvns	r2, r3
 800135c:	693b      	ldr	r3, [r7, #16]
 800135e:	4013      	ands	r3, r2
 8001360:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	685a      	ldr	r2, [r3, #4]
 8001366:	2380      	movs	r3, #128	@ 0x80
 8001368:	035b      	lsls	r3, r3, #13
 800136a:	4013      	ands	r3, r2
 800136c:	d003      	beq.n	8001376 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 800136e:	693a      	ldr	r2, [r7, #16]
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	4313      	orrs	r3, r2
 8001374:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001376:	4b2d      	ldr	r3, [pc, #180]	@ (800142c <HAL_GPIO_Init+0x2dc>)
 8001378:	693a      	ldr	r2, [r7, #16]
 800137a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800137c:	4b2b      	ldr	r3, [pc, #172]	@ (800142c <HAL_GPIO_Init+0x2dc>)
 800137e:	68db      	ldr	r3, [r3, #12]
 8001380:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	43da      	mvns	r2, r3
 8001386:	693b      	ldr	r3, [r7, #16]
 8001388:	4013      	ands	r3, r2
 800138a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	685a      	ldr	r2, [r3, #4]
 8001390:	2380      	movs	r3, #128	@ 0x80
 8001392:	039b      	lsls	r3, r3, #14
 8001394:	4013      	ands	r3, r2
 8001396:	d003      	beq.n	80013a0 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8001398:	693a      	ldr	r2, [r7, #16]
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	4313      	orrs	r3, r2
 800139e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80013a0:	4b22      	ldr	r3, [pc, #136]	@ (800142c <HAL_GPIO_Init+0x2dc>)
 80013a2:	693a      	ldr	r2, [r7, #16]
 80013a4:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 80013a6:	4b21      	ldr	r3, [pc, #132]	@ (800142c <HAL_GPIO_Init+0x2dc>)
 80013a8:	685b      	ldr	r3, [r3, #4]
 80013aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	43da      	mvns	r2, r3
 80013b0:	693b      	ldr	r3, [r7, #16]
 80013b2:	4013      	ands	r3, r2
 80013b4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	685a      	ldr	r2, [r3, #4]
 80013ba:	2380      	movs	r3, #128	@ 0x80
 80013bc:	029b      	lsls	r3, r3, #10
 80013be:	4013      	ands	r3, r2
 80013c0:	d003      	beq.n	80013ca <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 80013c2:	693a      	ldr	r2, [r7, #16]
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	4313      	orrs	r3, r2
 80013c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80013ca:	4b18      	ldr	r3, [pc, #96]	@ (800142c <HAL_GPIO_Init+0x2dc>)
 80013cc:	693a      	ldr	r2, [r7, #16]
 80013ce:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 80013d0:	4b16      	ldr	r3, [pc, #88]	@ (800142c <HAL_GPIO_Init+0x2dc>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	43da      	mvns	r2, r3
 80013da:	693b      	ldr	r3, [r7, #16]
 80013dc:	4013      	ands	r3, r2
 80013de:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	685a      	ldr	r2, [r3, #4]
 80013e4:	2380      	movs	r3, #128	@ 0x80
 80013e6:	025b      	lsls	r3, r3, #9
 80013e8:	4013      	ands	r3, r2
 80013ea:	d003      	beq.n	80013f4 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 80013ec:	693a      	ldr	r2, [r7, #16]
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	4313      	orrs	r3, r2
 80013f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80013f4:	4b0d      	ldr	r3, [pc, #52]	@ (800142c <HAL_GPIO_Init+0x2dc>)
 80013f6:	693a      	ldr	r2, [r7, #16]
 80013f8:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80013fa:	697b      	ldr	r3, [r7, #20]
 80013fc:	3301      	adds	r3, #1
 80013fe:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	681a      	ldr	r2, [r3, #0]
 8001404:	697b      	ldr	r3, [r7, #20]
 8001406:	40da      	lsrs	r2, r3
 8001408:	1e13      	subs	r3, r2, #0
 800140a:	d000      	beq.n	800140e <HAL_GPIO_Init+0x2be>
 800140c:	e6a8      	b.n	8001160 <HAL_GPIO_Init+0x10>
  } 
}
 800140e:	46c0      	nop			@ (mov r8, r8)
 8001410:	46c0      	nop			@ (mov r8, r8)
 8001412:	46bd      	mov	sp, r7
 8001414:	b006      	add	sp, #24
 8001416:	bd80      	pop	{r7, pc}
 8001418:	40021000 	.word	0x40021000
 800141c:	40010000 	.word	0x40010000
 8001420:	48000400 	.word	0x48000400
 8001424:	48000800 	.word	0x48000800
 8001428:	48000c00 	.word	0x48000c00
 800142c:	40010400 	.word	0x40010400

08001430 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b084      	sub	sp, #16
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
 8001438:	000a      	movs	r2, r1
 800143a:	1cbb      	adds	r3, r7, #2
 800143c:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	691b      	ldr	r3, [r3, #16]
 8001442:	1cba      	adds	r2, r7, #2
 8001444:	8812      	ldrh	r2, [r2, #0]
 8001446:	4013      	ands	r3, r2
 8001448:	d004      	beq.n	8001454 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800144a:	230f      	movs	r3, #15
 800144c:	18fb      	adds	r3, r7, r3
 800144e:	2201      	movs	r2, #1
 8001450:	701a      	strb	r2, [r3, #0]
 8001452:	e003      	b.n	800145c <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001454:	230f      	movs	r3, #15
 8001456:	18fb      	adds	r3, r7, r3
 8001458:	2200      	movs	r2, #0
 800145a:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 800145c:	230f      	movs	r3, #15
 800145e:	18fb      	adds	r3, r7, r3
 8001460:	781b      	ldrb	r3, [r3, #0]
  }
 8001462:	0018      	movs	r0, r3
 8001464:	46bd      	mov	sp, r7
 8001466:	b004      	add	sp, #16
 8001468:	bd80      	pop	{r7, pc}

0800146a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800146a:	b580      	push	{r7, lr}
 800146c:	b082      	sub	sp, #8
 800146e:	af00      	add	r7, sp, #0
 8001470:	6078      	str	r0, [r7, #4]
 8001472:	0008      	movs	r0, r1
 8001474:	0011      	movs	r1, r2
 8001476:	1cbb      	adds	r3, r7, #2
 8001478:	1c02      	adds	r2, r0, #0
 800147a:	801a      	strh	r2, [r3, #0]
 800147c:	1c7b      	adds	r3, r7, #1
 800147e:	1c0a      	adds	r2, r1, #0
 8001480:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001482:	1c7b      	adds	r3, r7, #1
 8001484:	781b      	ldrb	r3, [r3, #0]
 8001486:	2b00      	cmp	r3, #0
 8001488:	d004      	beq.n	8001494 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800148a:	1cbb      	adds	r3, r7, #2
 800148c:	881a      	ldrh	r2, [r3, #0]
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001492:	e003      	b.n	800149c <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001494:	1cbb      	adds	r3, r7, #2
 8001496:	881a      	ldrh	r2, [r3, #0]
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800149c:	46c0      	nop			@ (mov r8, r8)
 800149e:	46bd      	mov	sp, r7
 80014a0:	b002      	add	sp, #8
 80014a2:	bd80      	pop	{r7, pc}

080014a4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b082      	sub	sp, #8
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d101      	bne.n	80014b6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80014b2:	2301      	movs	r3, #1
 80014b4:	e08f      	b.n	80015d6 <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	2241      	movs	r2, #65	@ 0x41
 80014ba:	5c9b      	ldrb	r3, [r3, r2]
 80014bc:	b2db      	uxtb	r3, r3
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d107      	bne.n	80014d2 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	2240      	movs	r2, #64	@ 0x40
 80014c6:	2100      	movs	r1, #0
 80014c8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	0018      	movs	r0, r3
 80014ce:	f7ff fc35 	bl	8000d3c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	2241      	movs	r2, #65	@ 0x41
 80014d6:	2124      	movs	r1, #36	@ 0x24
 80014d8:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	681a      	ldr	r2, [r3, #0]
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	2101      	movs	r1, #1
 80014e6:	438a      	bics	r2, r1
 80014e8:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	685a      	ldr	r2, [r3, #4]
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	493b      	ldr	r1, [pc, #236]	@ (80015e0 <HAL_I2C_Init+0x13c>)
 80014f4:	400a      	ands	r2, r1
 80014f6:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	689a      	ldr	r2, [r3, #8]
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	4938      	ldr	r1, [pc, #224]	@ (80015e4 <HAL_I2C_Init+0x140>)
 8001504:	400a      	ands	r2, r1
 8001506:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	68db      	ldr	r3, [r3, #12]
 800150c:	2b01      	cmp	r3, #1
 800150e:	d108      	bne.n	8001522 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	689a      	ldr	r2, [r3, #8]
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	2180      	movs	r1, #128	@ 0x80
 800151a:	0209      	lsls	r1, r1, #8
 800151c:	430a      	orrs	r2, r1
 800151e:	609a      	str	r2, [r3, #8]
 8001520:	e007      	b.n	8001532 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	689a      	ldr	r2, [r3, #8]
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	2184      	movs	r1, #132	@ 0x84
 800152c:	0209      	lsls	r1, r1, #8
 800152e:	430a      	orrs	r2, r1
 8001530:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	68db      	ldr	r3, [r3, #12]
 8001536:	2b02      	cmp	r3, #2
 8001538:	d109      	bne.n	800154e <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	685a      	ldr	r2, [r3, #4]
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	2180      	movs	r1, #128	@ 0x80
 8001546:	0109      	lsls	r1, r1, #4
 8001548:	430a      	orrs	r2, r1
 800154a:	605a      	str	r2, [r3, #4]
 800154c:	e007      	b.n	800155e <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	685a      	ldr	r2, [r3, #4]
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4923      	ldr	r1, [pc, #140]	@ (80015e8 <HAL_I2C_Init+0x144>)
 800155a:	400a      	ands	r2, r1
 800155c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	685a      	ldr	r2, [r3, #4]
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4920      	ldr	r1, [pc, #128]	@ (80015ec <HAL_I2C_Init+0x148>)
 800156a:	430a      	orrs	r2, r1
 800156c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	68da      	ldr	r2, [r3, #12]
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	491a      	ldr	r1, [pc, #104]	@ (80015e4 <HAL_I2C_Init+0x140>)
 800157a:	400a      	ands	r2, r1
 800157c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	691a      	ldr	r2, [r3, #16]
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	695b      	ldr	r3, [r3, #20]
 8001586:	431a      	orrs	r2, r3
 8001588:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	699b      	ldr	r3, [r3, #24]
 800158e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	430a      	orrs	r2, r1
 8001596:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	69d9      	ldr	r1, [r3, #28]
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	6a1a      	ldr	r2, [r3, #32]
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	430a      	orrs	r2, r1
 80015a6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	681a      	ldr	r2, [r3, #0]
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	2101      	movs	r1, #1
 80015b4:	430a      	orrs	r2, r1
 80015b6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	2200      	movs	r2, #0
 80015bc:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	2241      	movs	r2, #65	@ 0x41
 80015c2:	2120      	movs	r1, #32
 80015c4:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	2200      	movs	r2, #0
 80015ca:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	2242      	movs	r2, #66	@ 0x42
 80015d0:	2100      	movs	r1, #0
 80015d2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80015d4:	2300      	movs	r3, #0
}
 80015d6:	0018      	movs	r0, r3
 80015d8:	46bd      	mov	sp, r7
 80015da:	b002      	add	sp, #8
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	46c0      	nop			@ (mov r8, r8)
 80015e0:	f0ffffff 	.word	0xf0ffffff
 80015e4:	ffff7fff 	.word	0xffff7fff
 80015e8:	fffff7ff 	.word	0xfffff7ff
 80015ec:	02008000 	.word	0x02008000

080015f0 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80015f0:	b590      	push	{r4, r7, lr}
 80015f2:	b089      	sub	sp, #36	@ 0x24
 80015f4:	af02      	add	r7, sp, #8
 80015f6:	60f8      	str	r0, [r7, #12]
 80015f8:	0008      	movs	r0, r1
 80015fa:	607a      	str	r2, [r7, #4]
 80015fc:	0019      	movs	r1, r3
 80015fe:	230a      	movs	r3, #10
 8001600:	18fb      	adds	r3, r7, r3
 8001602:	1c02      	adds	r2, r0, #0
 8001604:	801a      	strh	r2, [r3, #0]
 8001606:	2308      	movs	r3, #8
 8001608:	18fb      	adds	r3, r7, r3
 800160a:	1c0a      	adds	r2, r1, #0
 800160c:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	2241      	movs	r2, #65	@ 0x41
 8001612:	5c9b      	ldrb	r3, [r3, r2]
 8001614:	b2db      	uxtb	r3, r3
 8001616:	2b20      	cmp	r3, #32
 8001618:	d000      	beq.n	800161c <HAL_I2C_Master_Transmit+0x2c>
 800161a:	e10a      	b.n	8001832 <HAL_I2C_Master_Transmit+0x242>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	2240      	movs	r2, #64	@ 0x40
 8001620:	5c9b      	ldrb	r3, [r3, r2]
 8001622:	2b01      	cmp	r3, #1
 8001624:	d101      	bne.n	800162a <HAL_I2C_Master_Transmit+0x3a>
 8001626:	2302      	movs	r3, #2
 8001628:	e104      	b.n	8001834 <HAL_I2C_Master_Transmit+0x244>
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	2240      	movs	r2, #64	@ 0x40
 800162e:	2101      	movs	r1, #1
 8001630:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001632:	f7ff fcab 	bl	8000f8c <HAL_GetTick>
 8001636:	0003      	movs	r3, r0
 8001638:	613b      	str	r3, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800163a:	2380      	movs	r3, #128	@ 0x80
 800163c:	0219      	lsls	r1, r3, #8
 800163e:	68f8      	ldr	r0, [r7, #12]
 8001640:	693b      	ldr	r3, [r7, #16]
 8001642:	9300      	str	r3, [sp, #0]
 8001644:	2319      	movs	r3, #25
 8001646:	2201      	movs	r2, #1
 8001648:	f000 f91e 	bl	8001888 <I2C_WaitOnFlagUntilTimeout>
 800164c:	1e03      	subs	r3, r0, #0
 800164e:	d001      	beq.n	8001654 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8001650:	2301      	movs	r3, #1
 8001652:	e0ef      	b.n	8001834 <HAL_I2C_Master_Transmit+0x244>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	2241      	movs	r2, #65	@ 0x41
 8001658:	2121      	movs	r1, #33	@ 0x21
 800165a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	2242      	movs	r2, #66	@ 0x42
 8001660:	2110      	movs	r1, #16
 8001662:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	2200      	movs	r2, #0
 8001668:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	687a      	ldr	r2, [r7, #4]
 800166e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	2208      	movs	r2, #8
 8001674:	18ba      	adds	r2, r7, r2
 8001676:	8812      	ldrh	r2, [r2, #0]
 8001678:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	2200      	movs	r2, #0
 800167e:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001684:	b29b      	uxth	r3, r3
 8001686:	2bff      	cmp	r3, #255	@ 0xff
 8001688:	d906      	bls.n	8001698 <HAL_I2C_Master_Transmit+0xa8>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	22ff      	movs	r2, #255	@ 0xff
 800168e:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8001690:	2380      	movs	r3, #128	@ 0x80
 8001692:	045b      	lsls	r3, r3, #17
 8001694:	617b      	str	r3, [r7, #20]
 8001696:	e007      	b.n	80016a8 <HAL_I2C_Master_Transmit+0xb8>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800169c:	b29a      	uxth	r2, r3
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80016a2:	2380      	movs	r3, #128	@ 0x80
 80016a4:	049b      	lsls	r3, r3, #18
 80016a6:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d027      	beq.n	8001700 <HAL_I2C_Master_Transmit+0x110>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016b4:	781a      	ldrb	r2, [r3, #0]
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016c0:	1c5a      	adds	r2, r3, #1
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80016ca:	b29b      	uxth	r3, r3
 80016cc:	3b01      	subs	r3, #1
 80016ce:	b29a      	uxth	r2, r3
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80016d8:	3b01      	subs	r3, #1
 80016da:	b29a      	uxth	r2, r3
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80016e4:	b2db      	uxtb	r3, r3
 80016e6:	3301      	adds	r3, #1
 80016e8:	b2da      	uxtb	r2, r3
 80016ea:	697c      	ldr	r4, [r7, #20]
 80016ec:	230a      	movs	r3, #10
 80016ee:	18fb      	adds	r3, r7, r3
 80016f0:	8819      	ldrh	r1, [r3, #0]
 80016f2:	68f8      	ldr	r0, [r7, #12]
 80016f4:	4b51      	ldr	r3, [pc, #324]	@ (800183c <HAL_I2C_Master_Transmit+0x24c>)
 80016f6:	9300      	str	r3, [sp, #0]
 80016f8:	0023      	movs	r3, r4
 80016fa:	f000 fa9f 	bl	8001c3c <I2C_TransferConfig>
 80016fe:	e06f      	b.n	80017e0 <HAL_I2C_Master_Transmit+0x1f0>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001704:	b2da      	uxtb	r2, r3
 8001706:	697c      	ldr	r4, [r7, #20]
 8001708:	230a      	movs	r3, #10
 800170a:	18fb      	adds	r3, r7, r3
 800170c:	8819      	ldrh	r1, [r3, #0]
 800170e:	68f8      	ldr	r0, [r7, #12]
 8001710:	4b4a      	ldr	r3, [pc, #296]	@ (800183c <HAL_I2C_Master_Transmit+0x24c>)
 8001712:	9300      	str	r3, [sp, #0]
 8001714:	0023      	movs	r3, r4
 8001716:	f000 fa91 	bl	8001c3c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800171a:	e061      	b.n	80017e0 <HAL_I2C_Master_Transmit+0x1f0>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800171c:	693a      	ldr	r2, [r7, #16]
 800171e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	0018      	movs	r0, r3
 8001724:	f000 f908 	bl	8001938 <I2C_WaitOnTXISFlagUntilTimeout>
 8001728:	1e03      	subs	r3, r0, #0
 800172a:	d001      	beq.n	8001730 <HAL_I2C_Master_Transmit+0x140>
      {
        return HAL_ERROR;
 800172c:	2301      	movs	r3, #1
 800172e:	e081      	b.n	8001834 <HAL_I2C_Master_Transmit+0x244>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001734:	781a      	ldrb	r2, [r3, #0]
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001740:	1c5a      	adds	r2, r3, #1
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800174a:	b29b      	uxth	r3, r3
 800174c:	3b01      	subs	r3, #1
 800174e:	b29a      	uxth	r2, r3
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001758:	3b01      	subs	r3, #1
 800175a:	b29a      	uxth	r2, r3
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001764:	b29b      	uxth	r3, r3
 8001766:	2b00      	cmp	r3, #0
 8001768:	d03a      	beq.n	80017e0 <HAL_I2C_Master_Transmit+0x1f0>
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800176e:	2b00      	cmp	r3, #0
 8001770:	d136      	bne.n	80017e0 <HAL_I2C_Master_Transmit+0x1f0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001772:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001774:	68f8      	ldr	r0, [r7, #12]
 8001776:	693b      	ldr	r3, [r7, #16]
 8001778:	9300      	str	r3, [sp, #0]
 800177a:	0013      	movs	r3, r2
 800177c:	2200      	movs	r2, #0
 800177e:	2180      	movs	r1, #128	@ 0x80
 8001780:	f000 f882 	bl	8001888 <I2C_WaitOnFlagUntilTimeout>
 8001784:	1e03      	subs	r3, r0, #0
 8001786:	d001      	beq.n	800178c <HAL_I2C_Master_Transmit+0x19c>
        {
          return HAL_ERROR;
 8001788:	2301      	movs	r3, #1
 800178a:	e053      	b.n	8001834 <HAL_I2C_Master_Transmit+0x244>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001790:	b29b      	uxth	r3, r3
 8001792:	2bff      	cmp	r3, #255	@ 0xff
 8001794:	d911      	bls.n	80017ba <HAL_I2C_Master_Transmit+0x1ca>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	22ff      	movs	r2, #255	@ 0xff
 800179a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80017a0:	b2da      	uxtb	r2, r3
 80017a2:	2380      	movs	r3, #128	@ 0x80
 80017a4:	045c      	lsls	r4, r3, #17
 80017a6:	230a      	movs	r3, #10
 80017a8:	18fb      	adds	r3, r7, r3
 80017aa:	8819      	ldrh	r1, [r3, #0]
 80017ac:	68f8      	ldr	r0, [r7, #12]
 80017ae:	2300      	movs	r3, #0
 80017b0:	9300      	str	r3, [sp, #0]
 80017b2:	0023      	movs	r3, r4
 80017b4:	f000 fa42 	bl	8001c3c <I2C_TransferConfig>
 80017b8:	e012      	b.n	80017e0 <HAL_I2C_Master_Transmit+0x1f0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80017be:	b29a      	uxth	r2, r3
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80017c8:	b2da      	uxtb	r2, r3
 80017ca:	2380      	movs	r3, #128	@ 0x80
 80017cc:	049c      	lsls	r4, r3, #18
 80017ce:	230a      	movs	r3, #10
 80017d0:	18fb      	adds	r3, r7, r3
 80017d2:	8819      	ldrh	r1, [r3, #0]
 80017d4:	68f8      	ldr	r0, [r7, #12]
 80017d6:	2300      	movs	r3, #0
 80017d8:	9300      	str	r3, [sp, #0]
 80017da:	0023      	movs	r3, r4
 80017dc:	f000 fa2e 	bl	8001c3c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80017e4:	b29b      	uxth	r3, r3
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d198      	bne.n	800171c <HAL_I2C_Master_Transmit+0x12c>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80017ea:	693a      	ldr	r2, [r7, #16]
 80017ec:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	0018      	movs	r0, r3
 80017f2:	f000 f8e7 	bl	80019c4 <I2C_WaitOnSTOPFlagUntilTimeout>
 80017f6:	1e03      	subs	r3, r0, #0
 80017f8:	d001      	beq.n	80017fe <HAL_I2C_Master_Transmit+0x20e>
    {
      return HAL_ERROR;
 80017fa:	2301      	movs	r3, #1
 80017fc:	e01a      	b.n	8001834 <HAL_I2C_Master_Transmit+0x244>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	2220      	movs	r2, #32
 8001804:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	685a      	ldr	r2, [r3, #4]
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	490b      	ldr	r1, [pc, #44]	@ (8001840 <HAL_I2C_Master_Transmit+0x250>)
 8001812:	400a      	ands	r2, r1
 8001814:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	2241      	movs	r2, #65	@ 0x41
 800181a:	2120      	movs	r1, #32
 800181c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	2242      	movs	r2, #66	@ 0x42
 8001822:	2100      	movs	r1, #0
 8001824:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	2240      	movs	r2, #64	@ 0x40
 800182a:	2100      	movs	r1, #0
 800182c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800182e:	2300      	movs	r3, #0
 8001830:	e000      	b.n	8001834 <HAL_I2C_Master_Transmit+0x244>
  }
  else
  {
    return HAL_BUSY;
 8001832:	2302      	movs	r3, #2
  }
}
 8001834:	0018      	movs	r0, r3
 8001836:	46bd      	mov	sp, r7
 8001838:	b007      	add	sp, #28
 800183a:	bd90      	pop	{r4, r7, pc}
 800183c:	80002000 	.word	0x80002000
 8001840:	fe00e800 	.word	0xfe00e800

08001844 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b082      	sub	sp, #8
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	699b      	ldr	r3, [r3, #24]
 8001852:	2202      	movs	r2, #2
 8001854:	4013      	ands	r3, r2
 8001856:	2b02      	cmp	r3, #2
 8001858:	d103      	bne.n	8001862 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	2200      	movs	r2, #0
 8001860:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	699b      	ldr	r3, [r3, #24]
 8001868:	2201      	movs	r2, #1
 800186a:	4013      	ands	r3, r2
 800186c:	2b01      	cmp	r3, #1
 800186e:	d007      	beq.n	8001880 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	699a      	ldr	r2, [r3, #24]
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	2101      	movs	r1, #1
 800187c:	430a      	orrs	r2, r1
 800187e:	619a      	str	r2, [r3, #24]
  }
}
 8001880:	46c0      	nop			@ (mov r8, r8)
 8001882:	46bd      	mov	sp, r7
 8001884:	b002      	add	sp, #8
 8001886:	bd80      	pop	{r7, pc}

08001888 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b084      	sub	sp, #16
 800188c:	af00      	add	r7, sp, #0
 800188e:	60f8      	str	r0, [r7, #12]
 8001890:	60b9      	str	r1, [r7, #8]
 8001892:	603b      	str	r3, [r7, #0]
 8001894:	1dfb      	adds	r3, r7, #7
 8001896:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001898:	e03a      	b.n	8001910 <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800189a:	69ba      	ldr	r2, [r7, #24]
 800189c:	6839      	ldr	r1, [r7, #0]
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	0018      	movs	r0, r3
 80018a2:	f000 f8d3 	bl	8001a4c <I2C_IsErrorOccurred>
 80018a6:	1e03      	subs	r3, r0, #0
 80018a8:	d001      	beq.n	80018ae <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80018aa:	2301      	movs	r3, #1
 80018ac:	e040      	b.n	8001930 <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	3301      	adds	r3, #1
 80018b2:	d02d      	beq.n	8001910 <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80018b4:	f7ff fb6a 	bl	8000f8c <HAL_GetTick>
 80018b8:	0002      	movs	r2, r0
 80018ba:	69bb      	ldr	r3, [r7, #24]
 80018bc:	1ad3      	subs	r3, r2, r3
 80018be:	683a      	ldr	r2, [r7, #0]
 80018c0:	429a      	cmp	r2, r3
 80018c2:	d302      	bcc.n	80018ca <I2C_WaitOnFlagUntilTimeout+0x42>
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d122      	bne.n	8001910 <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	699b      	ldr	r3, [r3, #24]
 80018d0:	68ba      	ldr	r2, [r7, #8]
 80018d2:	4013      	ands	r3, r2
 80018d4:	68ba      	ldr	r2, [r7, #8]
 80018d6:	1ad3      	subs	r3, r2, r3
 80018d8:	425a      	negs	r2, r3
 80018da:	4153      	adcs	r3, r2
 80018dc:	b2db      	uxtb	r3, r3
 80018de:	001a      	movs	r2, r3
 80018e0:	1dfb      	adds	r3, r7, #7
 80018e2:	781b      	ldrb	r3, [r3, #0]
 80018e4:	429a      	cmp	r2, r3
 80018e6:	d113      	bne.n	8001910 <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018ec:	2220      	movs	r2, #32
 80018ee:	431a      	orrs	r2, r3
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	2241      	movs	r2, #65	@ 0x41
 80018f8:	2120      	movs	r1, #32
 80018fa:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	2242      	movs	r2, #66	@ 0x42
 8001900:	2100      	movs	r1, #0
 8001902:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	2240      	movs	r2, #64	@ 0x40
 8001908:	2100      	movs	r1, #0
 800190a:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 800190c:	2301      	movs	r3, #1
 800190e:	e00f      	b.n	8001930 <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	699b      	ldr	r3, [r3, #24]
 8001916:	68ba      	ldr	r2, [r7, #8]
 8001918:	4013      	ands	r3, r2
 800191a:	68ba      	ldr	r2, [r7, #8]
 800191c:	1ad3      	subs	r3, r2, r3
 800191e:	425a      	negs	r2, r3
 8001920:	4153      	adcs	r3, r2
 8001922:	b2db      	uxtb	r3, r3
 8001924:	001a      	movs	r2, r3
 8001926:	1dfb      	adds	r3, r7, #7
 8001928:	781b      	ldrb	r3, [r3, #0]
 800192a:	429a      	cmp	r2, r3
 800192c:	d0b5      	beq.n	800189a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800192e:	2300      	movs	r3, #0
}
 8001930:	0018      	movs	r0, r3
 8001932:	46bd      	mov	sp, r7
 8001934:	b004      	add	sp, #16
 8001936:	bd80      	pop	{r7, pc}

08001938 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b084      	sub	sp, #16
 800193c:	af00      	add	r7, sp, #0
 800193e:	60f8      	str	r0, [r7, #12]
 8001940:	60b9      	str	r1, [r7, #8]
 8001942:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001944:	e032      	b.n	80019ac <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001946:	687a      	ldr	r2, [r7, #4]
 8001948:	68b9      	ldr	r1, [r7, #8]
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	0018      	movs	r0, r3
 800194e:	f000 f87d 	bl	8001a4c <I2C_IsErrorOccurred>
 8001952:	1e03      	subs	r3, r0, #0
 8001954:	d001      	beq.n	800195a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001956:	2301      	movs	r3, #1
 8001958:	e030      	b.n	80019bc <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800195a:	68bb      	ldr	r3, [r7, #8]
 800195c:	3301      	adds	r3, #1
 800195e:	d025      	beq.n	80019ac <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001960:	f7ff fb14 	bl	8000f8c <HAL_GetTick>
 8001964:	0002      	movs	r2, r0
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	1ad3      	subs	r3, r2, r3
 800196a:	68ba      	ldr	r2, [r7, #8]
 800196c:	429a      	cmp	r2, r3
 800196e:	d302      	bcc.n	8001976 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8001970:	68bb      	ldr	r3, [r7, #8]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d11a      	bne.n	80019ac <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	699b      	ldr	r3, [r3, #24]
 800197c:	2202      	movs	r2, #2
 800197e:	4013      	ands	r3, r2
 8001980:	2b02      	cmp	r3, #2
 8001982:	d013      	beq.n	80019ac <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001988:	2220      	movs	r2, #32
 800198a:	431a      	orrs	r2, r3
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	2241      	movs	r2, #65	@ 0x41
 8001994:	2120      	movs	r1, #32
 8001996:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	2242      	movs	r2, #66	@ 0x42
 800199c:	2100      	movs	r1, #0
 800199e:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	2240      	movs	r2, #64	@ 0x40
 80019a4:	2100      	movs	r1, #0
 80019a6:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80019a8:	2301      	movs	r3, #1
 80019aa:	e007      	b.n	80019bc <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	699b      	ldr	r3, [r3, #24]
 80019b2:	2202      	movs	r2, #2
 80019b4:	4013      	ands	r3, r2
 80019b6:	2b02      	cmp	r3, #2
 80019b8:	d1c5      	bne.n	8001946 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80019ba:	2300      	movs	r3, #0
}
 80019bc:	0018      	movs	r0, r3
 80019be:	46bd      	mov	sp, r7
 80019c0:	b004      	add	sp, #16
 80019c2:	bd80      	pop	{r7, pc}

080019c4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b084      	sub	sp, #16
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	60f8      	str	r0, [r7, #12]
 80019cc:	60b9      	str	r1, [r7, #8]
 80019ce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80019d0:	e02f      	b.n	8001a32 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80019d2:	687a      	ldr	r2, [r7, #4]
 80019d4:	68b9      	ldr	r1, [r7, #8]
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	0018      	movs	r0, r3
 80019da:	f000 f837 	bl	8001a4c <I2C_IsErrorOccurred>
 80019de:	1e03      	subs	r3, r0, #0
 80019e0:	d001      	beq.n	80019e6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80019e2:	2301      	movs	r3, #1
 80019e4:	e02d      	b.n	8001a42 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80019e6:	f7ff fad1 	bl	8000f8c <HAL_GetTick>
 80019ea:	0002      	movs	r2, r0
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	1ad3      	subs	r3, r2, r3
 80019f0:	68ba      	ldr	r2, [r7, #8]
 80019f2:	429a      	cmp	r2, r3
 80019f4:	d302      	bcc.n	80019fc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80019f6:	68bb      	ldr	r3, [r7, #8]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d11a      	bne.n	8001a32 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	699b      	ldr	r3, [r3, #24]
 8001a02:	2220      	movs	r2, #32
 8001a04:	4013      	ands	r3, r2
 8001a06:	2b20      	cmp	r3, #32
 8001a08:	d013      	beq.n	8001a32 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a0e:	2220      	movs	r2, #32
 8001a10:	431a      	orrs	r2, r3
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	2241      	movs	r2, #65	@ 0x41
 8001a1a:	2120      	movs	r1, #32
 8001a1c:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	2242      	movs	r2, #66	@ 0x42
 8001a22:	2100      	movs	r1, #0
 8001a24:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	2240      	movs	r2, #64	@ 0x40
 8001a2a:	2100      	movs	r1, #0
 8001a2c:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	e007      	b.n	8001a42 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	699b      	ldr	r3, [r3, #24]
 8001a38:	2220      	movs	r2, #32
 8001a3a:	4013      	ands	r3, r2
 8001a3c:	2b20      	cmp	r3, #32
 8001a3e:	d1c8      	bne.n	80019d2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001a40:	2300      	movs	r3, #0
}
 8001a42:	0018      	movs	r0, r3
 8001a44:	46bd      	mov	sp, r7
 8001a46:	b004      	add	sp, #16
 8001a48:	bd80      	pop	{r7, pc}
	...

08001a4c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b08a      	sub	sp, #40	@ 0x28
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	60f8      	str	r0, [r7, #12]
 8001a54:	60b9      	str	r1, [r7, #8]
 8001a56:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a58:	2327      	movs	r3, #39	@ 0x27
 8001a5a:	18fb      	adds	r3, r7, r3
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	699b      	ldr	r3, [r3, #24]
 8001a66:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001a70:	69bb      	ldr	r3, [r7, #24]
 8001a72:	2210      	movs	r2, #16
 8001a74:	4013      	ands	r3, r2
 8001a76:	d100      	bne.n	8001a7a <I2C_IsErrorOccurred+0x2e>
 8001a78:	e079      	b.n	8001b6e <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	2210      	movs	r2, #16
 8001a80:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001a82:	e057      	b.n	8001b34 <I2C_IsErrorOccurred+0xe8>
 8001a84:	2227      	movs	r2, #39	@ 0x27
 8001a86:	18bb      	adds	r3, r7, r2
 8001a88:	18ba      	adds	r2, r7, r2
 8001a8a:	7812      	ldrb	r2, [r2, #0]
 8001a8c:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001a8e:	68bb      	ldr	r3, [r7, #8]
 8001a90:	3301      	adds	r3, #1
 8001a92:	d04f      	beq.n	8001b34 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001a94:	f7ff fa7a 	bl	8000f8c <HAL_GetTick>
 8001a98:	0002      	movs	r2, r0
 8001a9a:	69fb      	ldr	r3, [r7, #28]
 8001a9c:	1ad3      	subs	r3, r2, r3
 8001a9e:	68ba      	ldr	r2, [r7, #8]
 8001aa0:	429a      	cmp	r2, r3
 8001aa2:	d302      	bcc.n	8001aaa <I2C_IsErrorOccurred+0x5e>
 8001aa4:	68bb      	ldr	r3, [r7, #8]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d144      	bne.n	8001b34 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	685a      	ldr	r2, [r3, #4]
 8001ab0:	2380      	movs	r3, #128	@ 0x80
 8001ab2:	01db      	lsls	r3, r3, #7
 8001ab4:	4013      	ands	r3, r2
 8001ab6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001ab8:	2013      	movs	r0, #19
 8001aba:	183b      	adds	r3, r7, r0
 8001abc:	68fa      	ldr	r2, [r7, #12]
 8001abe:	2142      	movs	r1, #66	@ 0x42
 8001ac0:	5c52      	ldrb	r2, [r2, r1]
 8001ac2:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	699a      	ldr	r2, [r3, #24]
 8001aca:	2380      	movs	r3, #128	@ 0x80
 8001acc:	021b      	lsls	r3, r3, #8
 8001ace:	401a      	ands	r2, r3
 8001ad0:	2380      	movs	r3, #128	@ 0x80
 8001ad2:	021b      	lsls	r3, r3, #8
 8001ad4:	429a      	cmp	r2, r3
 8001ad6:	d126      	bne.n	8001b26 <I2C_IsErrorOccurred+0xda>
 8001ad8:	697a      	ldr	r2, [r7, #20]
 8001ada:	2380      	movs	r3, #128	@ 0x80
 8001adc:	01db      	lsls	r3, r3, #7
 8001ade:	429a      	cmp	r2, r3
 8001ae0:	d021      	beq.n	8001b26 <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 8001ae2:	183b      	adds	r3, r7, r0
 8001ae4:	781b      	ldrb	r3, [r3, #0]
 8001ae6:	2b20      	cmp	r3, #32
 8001ae8:	d01d      	beq.n	8001b26 <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	685a      	ldr	r2, [r3, #4]
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	2180      	movs	r1, #128	@ 0x80
 8001af6:	01c9      	lsls	r1, r1, #7
 8001af8:	430a      	orrs	r2, r1
 8001afa:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001afc:	f7ff fa46 	bl	8000f8c <HAL_GetTick>
 8001b00:	0003      	movs	r3, r0
 8001b02:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001b04:	e00f      	b.n	8001b26 <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001b06:	f7ff fa41 	bl	8000f8c <HAL_GetTick>
 8001b0a:	0002      	movs	r2, r0
 8001b0c:	69fb      	ldr	r3, [r7, #28]
 8001b0e:	1ad3      	subs	r3, r2, r3
 8001b10:	2b19      	cmp	r3, #25
 8001b12:	d908      	bls.n	8001b26 <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8001b14:	6a3b      	ldr	r3, [r7, #32]
 8001b16:	2220      	movs	r2, #32
 8001b18:	4313      	orrs	r3, r2
 8001b1a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8001b1c:	2327      	movs	r3, #39	@ 0x27
 8001b1e:	18fb      	adds	r3, r7, r3
 8001b20:	2201      	movs	r2, #1
 8001b22:	701a      	strb	r2, [r3, #0]

              break;
 8001b24:	e006      	b.n	8001b34 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	699b      	ldr	r3, [r3, #24]
 8001b2c:	2220      	movs	r2, #32
 8001b2e:	4013      	ands	r3, r2
 8001b30:	2b20      	cmp	r3, #32
 8001b32:	d1e8      	bne.n	8001b06 <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	699b      	ldr	r3, [r3, #24]
 8001b3a:	2220      	movs	r2, #32
 8001b3c:	4013      	ands	r3, r2
 8001b3e:	2b20      	cmp	r3, #32
 8001b40:	d004      	beq.n	8001b4c <I2C_IsErrorOccurred+0x100>
 8001b42:	2327      	movs	r3, #39	@ 0x27
 8001b44:	18fb      	adds	r3, r7, r3
 8001b46:	781b      	ldrb	r3, [r3, #0]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d09b      	beq.n	8001a84 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001b4c:	2327      	movs	r3, #39	@ 0x27
 8001b4e:	18fb      	adds	r3, r7, r3
 8001b50:	781b      	ldrb	r3, [r3, #0]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d103      	bne.n	8001b5e <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	2220      	movs	r2, #32
 8001b5c:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001b5e:	6a3b      	ldr	r3, [r7, #32]
 8001b60:	2204      	movs	r2, #4
 8001b62:	4313      	orrs	r3, r2
 8001b64:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001b66:	2327      	movs	r3, #39	@ 0x27
 8001b68:	18fb      	adds	r3, r7, r3
 8001b6a:	2201      	movs	r2, #1
 8001b6c:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	699b      	ldr	r3, [r3, #24]
 8001b74:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001b76:	69ba      	ldr	r2, [r7, #24]
 8001b78:	2380      	movs	r3, #128	@ 0x80
 8001b7a:	005b      	lsls	r3, r3, #1
 8001b7c:	4013      	ands	r3, r2
 8001b7e:	d00c      	beq.n	8001b9a <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001b80:	6a3b      	ldr	r3, [r7, #32]
 8001b82:	2201      	movs	r2, #1
 8001b84:	4313      	orrs	r3, r2
 8001b86:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	2280      	movs	r2, #128	@ 0x80
 8001b8e:	0052      	lsls	r2, r2, #1
 8001b90:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001b92:	2327      	movs	r3, #39	@ 0x27
 8001b94:	18fb      	adds	r3, r7, r3
 8001b96:	2201      	movs	r2, #1
 8001b98:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001b9a:	69ba      	ldr	r2, [r7, #24]
 8001b9c:	2380      	movs	r3, #128	@ 0x80
 8001b9e:	00db      	lsls	r3, r3, #3
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	d00c      	beq.n	8001bbe <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001ba4:	6a3b      	ldr	r3, [r7, #32]
 8001ba6:	2208      	movs	r2, #8
 8001ba8:	4313      	orrs	r3, r2
 8001baa:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	2280      	movs	r2, #128	@ 0x80
 8001bb2:	00d2      	lsls	r2, r2, #3
 8001bb4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001bb6:	2327      	movs	r3, #39	@ 0x27
 8001bb8:	18fb      	adds	r3, r7, r3
 8001bba:	2201      	movs	r2, #1
 8001bbc:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001bbe:	69ba      	ldr	r2, [r7, #24]
 8001bc0:	2380      	movs	r3, #128	@ 0x80
 8001bc2:	009b      	lsls	r3, r3, #2
 8001bc4:	4013      	ands	r3, r2
 8001bc6:	d00c      	beq.n	8001be2 <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001bc8:	6a3b      	ldr	r3, [r7, #32]
 8001bca:	2202      	movs	r2, #2
 8001bcc:	4313      	orrs	r3, r2
 8001bce:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	2280      	movs	r2, #128	@ 0x80
 8001bd6:	0092      	lsls	r2, r2, #2
 8001bd8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001bda:	2327      	movs	r3, #39	@ 0x27
 8001bdc:	18fb      	adds	r3, r7, r3
 8001bde:	2201      	movs	r2, #1
 8001be0:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8001be2:	2327      	movs	r3, #39	@ 0x27
 8001be4:	18fb      	adds	r3, r7, r3
 8001be6:	781b      	ldrb	r3, [r3, #0]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d01d      	beq.n	8001c28 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	0018      	movs	r0, r3
 8001bf0:	f7ff fe28 	bl	8001844 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	685a      	ldr	r2, [r3, #4]
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	490e      	ldr	r1, [pc, #56]	@ (8001c38 <I2C_IsErrorOccurred+0x1ec>)
 8001c00:	400a      	ands	r2, r1
 8001c02:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001c08:	6a3b      	ldr	r3, [r7, #32]
 8001c0a:	431a      	orrs	r2, r3
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	2241      	movs	r2, #65	@ 0x41
 8001c14:	2120      	movs	r1, #32
 8001c16:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	2242      	movs	r2, #66	@ 0x42
 8001c1c:	2100      	movs	r1, #0
 8001c1e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	2240      	movs	r2, #64	@ 0x40
 8001c24:	2100      	movs	r1, #0
 8001c26:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8001c28:	2327      	movs	r3, #39	@ 0x27
 8001c2a:	18fb      	adds	r3, r7, r3
 8001c2c:	781b      	ldrb	r3, [r3, #0]
}
 8001c2e:	0018      	movs	r0, r3
 8001c30:	46bd      	mov	sp, r7
 8001c32:	b00a      	add	sp, #40	@ 0x28
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	46c0      	nop			@ (mov r8, r8)
 8001c38:	fe00e800 	.word	0xfe00e800

08001c3c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001c3c:	b590      	push	{r4, r7, lr}
 8001c3e:	b087      	sub	sp, #28
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	60f8      	str	r0, [r7, #12]
 8001c44:	0008      	movs	r0, r1
 8001c46:	0011      	movs	r1, r2
 8001c48:	607b      	str	r3, [r7, #4]
 8001c4a:	240a      	movs	r4, #10
 8001c4c:	193b      	adds	r3, r7, r4
 8001c4e:	1c02      	adds	r2, r0, #0
 8001c50:	801a      	strh	r2, [r3, #0]
 8001c52:	2009      	movs	r0, #9
 8001c54:	183b      	adds	r3, r7, r0
 8001c56:	1c0a      	adds	r2, r1, #0
 8001c58:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001c5a:	193b      	adds	r3, r7, r4
 8001c5c:	881b      	ldrh	r3, [r3, #0]
 8001c5e:	059b      	lsls	r3, r3, #22
 8001c60:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001c62:	183b      	adds	r3, r7, r0
 8001c64:	781b      	ldrb	r3, [r3, #0]
 8001c66:	0419      	lsls	r1, r3, #16
 8001c68:	23ff      	movs	r3, #255	@ 0xff
 8001c6a:	041b      	lsls	r3, r3, #16
 8001c6c:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001c6e:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001c74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c76:	4313      	orrs	r3, r2
 8001c78:	005b      	lsls	r3, r3, #1
 8001c7a:	085b      	lsrs	r3, r3, #1
 8001c7c:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001c86:	0d51      	lsrs	r1, r2, #21
 8001c88:	2280      	movs	r2, #128	@ 0x80
 8001c8a:	00d2      	lsls	r2, r2, #3
 8001c8c:	400a      	ands	r2, r1
 8001c8e:	4907      	ldr	r1, [pc, #28]	@ (8001cac <I2C_TransferConfig+0x70>)
 8001c90:	430a      	orrs	r2, r1
 8001c92:	43d2      	mvns	r2, r2
 8001c94:	401a      	ands	r2, r3
 8001c96:	0011      	movs	r1, r2
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	697a      	ldr	r2, [r7, #20]
 8001c9e:	430a      	orrs	r2, r1
 8001ca0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8001ca2:	46c0      	nop			@ (mov r8, r8)
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	b007      	add	sp, #28
 8001ca8:	bd90      	pop	{r4, r7, pc}
 8001caa:	46c0      	nop			@ (mov r8, r8)
 8001cac:	03ff63ff 	.word	0x03ff63ff

08001cb0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b082      	sub	sp, #8
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
 8001cb8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	2241      	movs	r2, #65	@ 0x41
 8001cbe:	5c9b      	ldrb	r3, [r3, r2]
 8001cc0:	b2db      	uxtb	r3, r3
 8001cc2:	2b20      	cmp	r3, #32
 8001cc4:	d138      	bne.n	8001d38 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2240      	movs	r2, #64	@ 0x40
 8001cca:	5c9b      	ldrb	r3, [r3, r2]
 8001ccc:	2b01      	cmp	r3, #1
 8001cce:	d101      	bne.n	8001cd4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001cd0:	2302      	movs	r3, #2
 8001cd2:	e032      	b.n	8001d3a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2240      	movs	r2, #64	@ 0x40
 8001cd8:	2101      	movs	r1, #1
 8001cda:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2241      	movs	r2, #65	@ 0x41
 8001ce0:	2124      	movs	r1, #36	@ 0x24
 8001ce2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	681a      	ldr	r2, [r3, #0]
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	2101      	movs	r1, #1
 8001cf0:	438a      	bics	r2, r1
 8001cf2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	681a      	ldr	r2, [r3, #0]
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4911      	ldr	r1, [pc, #68]	@ (8001d44 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8001d00:	400a      	ands	r2, r1
 8001d02:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	6819      	ldr	r1, [r3, #0]
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	683a      	ldr	r2, [r7, #0]
 8001d10:	430a      	orrs	r2, r1
 8001d12:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	681a      	ldr	r2, [r3, #0]
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	2101      	movs	r1, #1
 8001d20:	430a      	orrs	r2, r1
 8001d22:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2241      	movs	r2, #65	@ 0x41
 8001d28:	2120      	movs	r1, #32
 8001d2a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2240      	movs	r2, #64	@ 0x40
 8001d30:	2100      	movs	r1, #0
 8001d32:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001d34:	2300      	movs	r3, #0
 8001d36:	e000      	b.n	8001d3a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001d38:	2302      	movs	r3, #2
  }
}
 8001d3a:	0018      	movs	r0, r3
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	b002      	add	sp, #8
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	46c0      	nop			@ (mov r8, r8)
 8001d44:	ffffefff 	.word	0xffffefff

08001d48 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b084      	sub	sp, #16
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
 8001d50:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2241      	movs	r2, #65	@ 0x41
 8001d56:	5c9b      	ldrb	r3, [r3, r2]
 8001d58:	b2db      	uxtb	r3, r3
 8001d5a:	2b20      	cmp	r3, #32
 8001d5c:	d139      	bne.n	8001dd2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2240      	movs	r2, #64	@ 0x40
 8001d62:	5c9b      	ldrb	r3, [r3, r2]
 8001d64:	2b01      	cmp	r3, #1
 8001d66:	d101      	bne.n	8001d6c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001d68:	2302      	movs	r3, #2
 8001d6a:	e033      	b.n	8001dd4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2240      	movs	r2, #64	@ 0x40
 8001d70:	2101      	movs	r1, #1
 8001d72:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2241      	movs	r2, #65	@ 0x41
 8001d78:	2124      	movs	r1, #36	@ 0x24
 8001d7a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	681a      	ldr	r2, [r3, #0]
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	2101      	movs	r1, #1
 8001d88:	438a      	bics	r2, r1
 8001d8a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	4a11      	ldr	r2, [pc, #68]	@ (8001ddc <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8001d98:	4013      	ands	r3, r2
 8001d9a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	021b      	lsls	r3, r3, #8
 8001da0:	68fa      	ldr	r2, [r7, #12]
 8001da2:	4313      	orrs	r3, r2
 8001da4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	68fa      	ldr	r2, [r7, #12]
 8001dac:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	681a      	ldr	r2, [r3, #0]
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	2101      	movs	r1, #1
 8001dba:	430a      	orrs	r2, r1
 8001dbc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2241      	movs	r2, #65	@ 0x41
 8001dc2:	2120      	movs	r1, #32
 8001dc4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2240      	movs	r2, #64	@ 0x40
 8001dca:	2100      	movs	r1, #0
 8001dcc:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	e000      	b.n	8001dd4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001dd2:	2302      	movs	r3, #2
  }
}
 8001dd4:	0018      	movs	r0, r3
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	b004      	add	sp, #16
 8001dda:	bd80      	pop	{r7, pc}
 8001ddc:	fffff0ff 	.word	0xfffff0ff

08001de0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b088      	sub	sp, #32
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d101      	bne.n	8001df2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001dee:	2301      	movs	r3, #1
 8001df0:	e301      	b.n	80023f6 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	2201      	movs	r2, #1
 8001df8:	4013      	ands	r3, r2
 8001dfa:	d100      	bne.n	8001dfe <HAL_RCC_OscConfig+0x1e>
 8001dfc:	e08d      	b.n	8001f1a <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001dfe:	4bc3      	ldr	r3, [pc, #780]	@ (800210c <HAL_RCC_OscConfig+0x32c>)
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	220c      	movs	r2, #12
 8001e04:	4013      	ands	r3, r2
 8001e06:	2b04      	cmp	r3, #4
 8001e08:	d00e      	beq.n	8001e28 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001e0a:	4bc0      	ldr	r3, [pc, #768]	@ (800210c <HAL_RCC_OscConfig+0x32c>)
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	220c      	movs	r2, #12
 8001e10:	4013      	ands	r3, r2
 8001e12:	2b08      	cmp	r3, #8
 8001e14:	d116      	bne.n	8001e44 <HAL_RCC_OscConfig+0x64>
 8001e16:	4bbd      	ldr	r3, [pc, #756]	@ (800210c <HAL_RCC_OscConfig+0x32c>)
 8001e18:	685a      	ldr	r2, [r3, #4]
 8001e1a:	2380      	movs	r3, #128	@ 0x80
 8001e1c:	025b      	lsls	r3, r3, #9
 8001e1e:	401a      	ands	r2, r3
 8001e20:	2380      	movs	r3, #128	@ 0x80
 8001e22:	025b      	lsls	r3, r3, #9
 8001e24:	429a      	cmp	r2, r3
 8001e26:	d10d      	bne.n	8001e44 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e28:	4bb8      	ldr	r3, [pc, #736]	@ (800210c <HAL_RCC_OscConfig+0x32c>)
 8001e2a:	681a      	ldr	r2, [r3, #0]
 8001e2c:	2380      	movs	r3, #128	@ 0x80
 8001e2e:	029b      	lsls	r3, r3, #10
 8001e30:	4013      	ands	r3, r2
 8001e32:	d100      	bne.n	8001e36 <HAL_RCC_OscConfig+0x56>
 8001e34:	e070      	b.n	8001f18 <HAL_RCC_OscConfig+0x138>
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d000      	beq.n	8001e40 <HAL_RCC_OscConfig+0x60>
 8001e3e:	e06b      	b.n	8001f18 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8001e40:	2301      	movs	r3, #1
 8001e42:	e2d8      	b.n	80023f6 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	2b01      	cmp	r3, #1
 8001e4a:	d107      	bne.n	8001e5c <HAL_RCC_OscConfig+0x7c>
 8001e4c:	4baf      	ldr	r3, [pc, #700]	@ (800210c <HAL_RCC_OscConfig+0x32c>)
 8001e4e:	681a      	ldr	r2, [r3, #0]
 8001e50:	4bae      	ldr	r3, [pc, #696]	@ (800210c <HAL_RCC_OscConfig+0x32c>)
 8001e52:	2180      	movs	r1, #128	@ 0x80
 8001e54:	0249      	lsls	r1, r1, #9
 8001e56:	430a      	orrs	r2, r1
 8001e58:	601a      	str	r2, [r3, #0]
 8001e5a:	e02f      	b.n	8001ebc <HAL_RCC_OscConfig+0xdc>
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d10c      	bne.n	8001e7e <HAL_RCC_OscConfig+0x9e>
 8001e64:	4ba9      	ldr	r3, [pc, #676]	@ (800210c <HAL_RCC_OscConfig+0x32c>)
 8001e66:	681a      	ldr	r2, [r3, #0]
 8001e68:	4ba8      	ldr	r3, [pc, #672]	@ (800210c <HAL_RCC_OscConfig+0x32c>)
 8001e6a:	49a9      	ldr	r1, [pc, #676]	@ (8002110 <HAL_RCC_OscConfig+0x330>)
 8001e6c:	400a      	ands	r2, r1
 8001e6e:	601a      	str	r2, [r3, #0]
 8001e70:	4ba6      	ldr	r3, [pc, #664]	@ (800210c <HAL_RCC_OscConfig+0x32c>)
 8001e72:	681a      	ldr	r2, [r3, #0]
 8001e74:	4ba5      	ldr	r3, [pc, #660]	@ (800210c <HAL_RCC_OscConfig+0x32c>)
 8001e76:	49a7      	ldr	r1, [pc, #668]	@ (8002114 <HAL_RCC_OscConfig+0x334>)
 8001e78:	400a      	ands	r2, r1
 8001e7a:	601a      	str	r2, [r3, #0]
 8001e7c:	e01e      	b.n	8001ebc <HAL_RCC_OscConfig+0xdc>
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	2b05      	cmp	r3, #5
 8001e84:	d10e      	bne.n	8001ea4 <HAL_RCC_OscConfig+0xc4>
 8001e86:	4ba1      	ldr	r3, [pc, #644]	@ (800210c <HAL_RCC_OscConfig+0x32c>)
 8001e88:	681a      	ldr	r2, [r3, #0]
 8001e8a:	4ba0      	ldr	r3, [pc, #640]	@ (800210c <HAL_RCC_OscConfig+0x32c>)
 8001e8c:	2180      	movs	r1, #128	@ 0x80
 8001e8e:	02c9      	lsls	r1, r1, #11
 8001e90:	430a      	orrs	r2, r1
 8001e92:	601a      	str	r2, [r3, #0]
 8001e94:	4b9d      	ldr	r3, [pc, #628]	@ (800210c <HAL_RCC_OscConfig+0x32c>)
 8001e96:	681a      	ldr	r2, [r3, #0]
 8001e98:	4b9c      	ldr	r3, [pc, #624]	@ (800210c <HAL_RCC_OscConfig+0x32c>)
 8001e9a:	2180      	movs	r1, #128	@ 0x80
 8001e9c:	0249      	lsls	r1, r1, #9
 8001e9e:	430a      	orrs	r2, r1
 8001ea0:	601a      	str	r2, [r3, #0]
 8001ea2:	e00b      	b.n	8001ebc <HAL_RCC_OscConfig+0xdc>
 8001ea4:	4b99      	ldr	r3, [pc, #612]	@ (800210c <HAL_RCC_OscConfig+0x32c>)
 8001ea6:	681a      	ldr	r2, [r3, #0]
 8001ea8:	4b98      	ldr	r3, [pc, #608]	@ (800210c <HAL_RCC_OscConfig+0x32c>)
 8001eaa:	4999      	ldr	r1, [pc, #612]	@ (8002110 <HAL_RCC_OscConfig+0x330>)
 8001eac:	400a      	ands	r2, r1
 8001eae:	601a      	str	r2, [r3, #0]
 8001eb0:	4b96      	ldr	r3, [pc, #600]	@ (800210c <HAL_RCC_OscConfig+0x32c>)
 8001eb2:	681a      	ldr	r2, [r3, #0]
 8001eb4:	4b95      	ldr	r3, [pc, #596]	@ (800210c <HAL_RCC_OscConfig+0x32c>)
 8001eb6:	4997      	ldr	r1, [pc, #604]	@ (8002114 <HAL_RCC_OscConfig+0x334>)
 8001eb8:	400a      	ands	r2, r1
 8001eba:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d014      	beq.n	8001eee <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ec4:	f7ff f862 	bl	8000f8c <HAL_GetTick>
 8001ec8:	0003      	movs	r3, r0
 8001eca:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ecc:	e008      	b.n	8001ee0 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ece:	f7ff f85d 	bl	8000f8c <HAL_GetTick>
 8001ed2:	0002      	movs	r2, r0
 8001ed4:	69bb      	ldr	r3, [r7, #24]
 8001ed6:	1ad3      	subs	r3, r2, r3
 8001ed8:	2b64      	cmp	r3, #100	@ 0x64
 8001eda:	d901      	bls.n	8001ee0 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8001edc:	2303      	movs	r3, #3
 8001ede:	e28a      	b.n	80023f6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ee0:	4b8a      	ldr	r3, [pc, #552]	@ (800210c <HAL_RCC_OscConfig+0x32c>)
 8001ee2:	681a      	ldr	r2, [r3, #0]
 8001ee4:	2380      	movs	r3, #128	@ 0x80
 8001ee6:	029b      	lsls	r3, r3, #10
 8001ee8:	4013      	ands	r3, r2
 8001eea:	d0f0      	beq.n	8001ece <HAL_RCC_OscConfig+0xee>
 8001eec:	e015      	b.n	8001f1a <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eee:	f7ff f84d 	bl	8000f8c <HAL_GetTick>
 8001ef2:	0003      	movs	r3, r0
 8001ef4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ef6:	e008      	b.n	8001f0a <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ef8:	f7ff f848 	bl	8000f8c <HAL_GetTick>
 8001efc:	0002      	movs	r2, r0
 8001efe:	69bb      	ldr	r3, [r7, #24]
 8001f00:	1ad3      	subs	r3, r2, r3
 8001f02:	2b64      	cmp	r3, #100	@ 0x64
 8001f04:	d901      	bls.n	8001f0a <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8001f06:	2303      	movs	r3, #3
 8001f08:	e275      	b.n	80023f6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f0a:	4b80      	ldr	r3, [pc, #512]	@ (800210c <HAL_RCC_OscConfig+0x32c>)
 8001f0c:	681a      	ldr	r2, [r3, #0]
 8001f0e:	2380      	movs	r3, #128	@ 0x80
 8001f10:	029b      	lsls	r3, r3, #10
 8001f12:	4013      	ands	r3, r2
 8001f14:	d1f0      	bne.n	8001ef8 <HAL_RCC_OscConfig+0x118>
 8001f16:	e000      	b.n	8001f1a <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f18:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	2202      	movs	r2, #2
 8001f20:	4013      	ands	r3, r2
 8001f22:	d100      	bne.n	8001f26 <HAL_RCC_OscConfig+0x146>
 8001f24:	e069      	b.n	8001ffa <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001f26:	4b79      	ldr	r3, [pc, #484]	@ (800210c <HAL_RCC_OscConfig+0x32c>)
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	220c      	movs	r2, #12
 8001f2c:	4013      	ands	r3, r2
 8001f2e:	d00b      	beq.n	8001f48 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001f30:	4b76      	ldr	r3, [pc, #472]	@ (800210c <HAL_RCC_OscConfig+0x32c>)
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	220c      	movs	r2, #12
 8001f36:	4013      	ands	r3, r2
 8001f38:	2b08      	cmp	r3, #8
 8001f3a:	d11c      	bne.n	8001f76 <HAL_RCC_OscConfig+0x196>
 8001f3c:	4b73      	ldr	r3, [pc, #460]	@ (800210c <HAL_RCC_OscConfig+0x32c>)
 8001f3e:	685a      	ldr	r2, [r3, #4]
 8001f40:	2380      	movs	r3, #128	@ 0x80
 8001f42:	025b      	lsls	r3, r3, #9
 8001f44:	4013      	ands	r3, r2
 8001f46:	d116      	bne.n	8001f76 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f48:	4b70      	ldr	r3, [pc, #448]	@ (800210c <HAL_RCC_OscConfig+0x32c>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	2202      	movs	r2, #2
 8001f4e:	4013      	ands	r3, r2
 8001f50:	d005      	beq.n	8001f5e <HAL_RCC_OscConfig+0x17e>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	68db      	ldr	r3, [r3, #12]
 8001f56:	2b01      	cmp	r3, #1
 8001f58:	d001      	beq.n	8001f5e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	e24b      	b.n	80023f6 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f5e:	4b6b      	ldr	r3, [pc, #428]	@ (800210c <HAL_RCC_OscConfig+0x32c>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	22f8      	movs	r2, #248	@ 0xf8
 8001f64:	4393      	bics	r3, r2
 8001f66:	0019      	movs	r1, r3
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	691b      	ldr	r3, [r3, #16]
 8001f6c:	00da      	lsls	r2, r3, #3
 8001f6e:	4b67      	ldr	r3, [pc, #412]	@ (800210c <HAL_RCC_OscConfig+0x32c>)
 8001f70:	430a      	orrs	r2, r1
 8001f72:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f74:	e041      	b.n	8001ffa <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	68db      	ldr	r3, [r3, #12]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d024      	beq.n	8001fc8 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f7e:	4b63      	ldr	r3, [pc, #396]	@ (800210c <HAL_RCC_OscConfig+0x32c>)
 8001f80:	681a      	ldr	r2, [r3, #0]
 8001f82:	4b62      	ldr	r3, [pc, #392]	@ (800210c <HAL_RCC_OscConfig+0x32c>)
 8001f84:	2101      	movs	r1, #1
 8001f86:	430a      	orrs	r2, r1
 8001f88:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f8a:	f7fe ffff 	bl	8000f8c <HAL_GetTick>
 8001f8e:	0003      	movs	r3, r0
 8001f90:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f92:	e008      	b.n	8001fa6 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f94:	f7fe fffa 	bl	8000f8c <HAL_GetTick>
 8001f98:	0002      	movs	r2, r0
 8001f9a:	69bb      	ldr	r3, [r7, #24]
 8001f9c:	1ad3      	subs	r3, r2, r3
 8001f9e:	2b02      	cmp	r3, #2
 8001fa0:	d901      	bls.n	8001fa6 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8001fa2:	2303      	movs	r3, #3
 8001fa4:	e227      	b.n	80023f6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fa6:	4b59      	ldr	r3, [pc, #356]	@ (800210c <HAL_RCC_OscConfig+0x32c>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	2202      	movs	r2, #2
 8001fac:	4013      	ands	r3, r2
 8001fae:	d0f1      	beq.n	8001f94 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fb0:	4b56      	ldr	r3, [pc, #344]	@ (800210c <HAL_RCC_OscConfig+0x32c>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	22f8      	movs	r2, #248	@ 0xf8
 8001fb6:	4393      	bics	r3, r2
 8001fb8:	0019      	movs	r1, r3
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	691b      	ldr	r3, [r3, #16]
 8001fbe:	00da      	lsls	r2, r3, #3
 8001fc0:	4b52      	ldr	r3, [pc, #328]	@ (800210c <HAL_RCC_OscConfig+0x32c>)
 8001fc2:	430a      	orrs	r2, r1
 8001fc4:	601a      	str	r2, [r3, #0]
 8001fc6:	e018      	b.n	8001ffa <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001fc8:	4b50      	ldr	r3, [pc, #320]	@ (800210c <HAL_RCC_OscConfig+0x32c>)
 8001fca:	681a      	ldr	r2, [r3, #0]
 8001fcc:	4b4f      	ldr	r3, [pc, #316]	@ (800210c <HAL_RCC_OscConfig+0x32c>)
 8001fce:	2101      	movs	r1, #1
 8001fd0:	438a      	bics	r2, r1
 8001fd2:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fd4:	f7fe ffda 	bl	8000f8c <HAL_GetTick>
 8001fd8:	0003      	movs	r3, r0
 8001fda:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fdc:	e008      	b.n	8001ff0 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001fde:	f7fe ffd5 	bl	8000f8c <HAL_GetTick>
 8001fe2:	0002      	movs	r2, r0
 8001fe4:	69bb      	ldr	r3, [r7, #24]
 8001fe6:	1ad3      	subs	r3, r2, r3
 8001fe8:	2b02      	cmp	r3, #2
 8001fea:	d901      	bls.n	8001ff0 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8001fec:	2303      	movs	r3, #3
 8001fee:	e202      	b.n	80023f6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ff0:	4b46      	ldr	r3, [pc, #280]	@ (800210c <HAL_RCC_OscConfig+0x32c>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	2202      	movs	r2, #2
 8001ff6:	4013      	ands	r3, r2
 8001ff8:	d1f1      	bne.n	8001fde <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	2208      	movs	r2, #8
 8002000:	4013      	ands	r3, r2
 8002002:	d036      	beq.n	8002072 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	69db      	ldr	r3, [r3, #28]
 8002008:	2b00      	cmp	r3, #0
 800200a:	d019      	beq.n	8002040 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800200c:	4b3f      	ldr	r3, [pc, #252]	@ (800210c <HAL_RCC_OscConfig+0x32c>)
 800200e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002010:	4b3e      	ldr	r3, [pc, #248]	@ (800210c <HAL_RCC_OscConfig+0x32c>)
 8002012:	2101      	movs	r1, #1
 8002014:	430a      	orrs	r2, r1
 8002016:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002018:	f7fe ffb8 	bl	8000f8c <HAL_GetTick>
 800201c:	0003      	movs	r3, r0
 800201e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002020:	e008      	b.n	8002034 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002022:	f7fe ffb3 	bl	8000f8c <HAL_GetTick>
 8002026:	0002      	movs	r2, r0
 8002028:	69bb      	ldr	r3, [r7, #24]
 800202a:	1ad3      	subs	r3, r2, r3
 800202c:	2b02      	cmp	r3, #2
 800202e:	d901      	bls.n	8002034 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8002030:	2303      	movs	r3, #3
 8002032:	e1e0      	b.n	80023f6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002034:	4b35      	ldr	r3, [pc, #212]	@ (800210c <HAL_RCC_OscConfig+0x32c>)
 8002036:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002038:	2202      	movs	r2, #2
 800203a:	4013      	ands	r3, r2
 800203c:	d0f1      	beq.n	8002022 <HAL_RCC_OscConfig+0x242>
 800203e:	e018      	b.n	8002072 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002040:	4b32      	ldr	r3, [pc, #200]	@ (800210c <HAL_RCC_OscConfig+0x32c>)
 8002042:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002044:	4b31      	ldr	r3, [pc, #196]	@ (800210c <HAL_RCC_OscConfig+0x32c>)
 8002046:	2101      	movs	r1, #1
 8002048:	438a      	bics	r2, r1
 800204a:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800204c:	f7fe ff9e 	bl	8000f8c <HAL_GetTick>
 8002050:	0003      	movs	r3, r0
 8002052:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002054:	e008      	b.n	8002068 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002056:	f7fe ff99 	bl	8000f8c <HAL_GetTick>
 800205a:	0002      	movs	r2, r0
 800205c:	69bb      	ldr	r3, [r7, #24]
 800205e:	1ad3      	subs	r3, r2, r3
 8002060:	2b02      	cmp	r3, #2
 8002062:	d901      	bls.n	8002068 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8002064:	2303      	movs	r3, #3
 8002066:	e1c6      	b.n	80023f6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002068:	4b28      	ldr	r3, [pc, #160]	@ (800210c <HAL_RCC_OscConfig+0x32c>)
 800206a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800206c:	2202      	movs	r2, #2
 800206e:	4013      	ands	r3, r2
 8002070:	d1f1      	bne.n	8002056 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	2204      	movs	r2, #4
 8002078:	4013      	ands	r3, r2
 800207a:	d100      	bne.n	800207e <HAL_RCC_OscConfig+0x29e>
 800207c:	e0b4      	b.n	80021e8 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 800207e:	201f      	movs	r0, #31
 8002080:	183b      	adds	r3, r7, r0
 8002082:	2200      	movs	r2, #0
 8002084:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002086:	4b21      	ldr	r3, [pc, #132]	@ (800210c <HAL_RCC_OscConfig+0x32c>)
 8002088:	69da      	ldr	r2, [r3, #28]
 800208a:	2380      	movs	r3, #128	@ 0x80
 800208c:	055b      	lsls	r3, r3, #21
 800208e:	4013      	ands	r3, r2
 8002090:	d110      	bne.n	80020b4 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002092:	4b1e      	ldr	r3, [pc, #120]	@ (800210c <HAL_RCC_OscConfig+0x32c>)
 8002094:	69da      	ldr	r2, [r3, #28]
 8002096:	4b1d      	ldr	r3, [pc, #116]	@ (800210c <HAL_RCC_OscConfig+0x32c>)
 8002098:	2180      	movs	r1, #128	@ 0x80
 800209a:	0549      	lsls	r1, r1, #21
 800209c:	430a      	orrs	r2, r1
 800209e:	61da      	str	r2, [r3, #28]
 80020a0:	4b1a      	ldr	r3, [pc, #104]	@ (800210c <HAL_RCC_OscConfig+0x32c>)
 80020a2:	69da      	ldr	r2, [r3, #28]
 80020a4:	2380      	movs	r3, #128	@ 0x80
 80020a6:	055b      	lsls	r3, r3, #21
 80020a8:	4013      	ands	r3, r2
 80020aa:	60fb      	str	r3, [r7, #12]
 80020ac:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80020ae:	183b      	adds	r3, r7, r0
 80020b0:	2201      	movs	r2, #1
 80020b2:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020b4:	4b18      	ldr	r3, [pc, #96]	@ (8002118 <HAL_RCC_OscConfig+0x338>)
 80020b6:	681a      	ldr	r2, [r3, #0]
 80020b8:	2380      	movs	r3, #128	@ 0x80
 80020ba:	005b      	lsls	r3, r3, #1
 80020bc:	4013      	ands	r3, r2
 80020be:	d11a      	bne.n	80020f6 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80020c0:	4b15      	ldr	r3, [pc, #84]	@ (8002118 <HAL_RCC_OscConfig+0x338>)
 80020c2:	681a      	ldr	r2, [r3, #0]
 80020c4:	4b14      	ldr	r3, [pc, #80]	@ (8002118 <HAL_RCC_OscConfig+0x338>)
 80020c6:	2180      	movs	r1, #128	@ 0x80
 80020c8:	0049      	lsls	r1, r1, #1
 80020ca:	430a      	orrs	r2, r1
 80020cc:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020ce:	f7fe ff5d 	bl	8000f8c <HAL_GetTick>
 80020d2:	0003      	movs	r3, r0
 80020d4:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020d6:	e008      	b.n	80020ea <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020d8:	f7fe ff58 	bl	8000f8c <HAL_GetTick>
 80020dc:	0002      	movs	r2, r0
 80020de:	69bb      	ldr	r3, [r7, #24]
 80020e0:	1ad3      	subs	r3, r2, r3
 80020e2:	2b64      	cmp	r3, #100	@ 0x64
 80020e4:	d901      	bls.n	80020ea <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 80020e6:	2303      	movs	r3, #3
 80020e8:	e185      	b.n	80023f6 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020ea:	4b0b      	ldr	r3, [pc, #44]	@ (8002118 <HAL_RCC_OscConfig+0x338>)
 80020ec:	681a      	ldr	r2, [r3, #0]
 80020ee:	2380      	movs	r3, #128	@ 0x80
 80020f0:	005b      	lsls	r3, r3, #1
 80020f2:	4013      	ands	r3, r2
 80020f4:	d0f0      	beq.n	80020d8 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	689b      	ldr	r3, [r3, #8]
 80020fa:	2b01      	cmp	r3, #1
 80020fc:	d10e      	bne.n	800211c <HAL_RCC_OscConfig+0x33c>
 80020fe:	4b03      	ldr	r3, [pc, #12]	@ (800210c <HAL_RCC_OscConfig+0x32c>)
 8002100:	6a1a      	ldr	r2, [r3, #32]
 8002102:	4b02      	ldr	r3, [pc, #8]	@ (800210c <HAL_RCC_OscConfig+0x32c>)
 8002104:	2101      	movs	r1, #1
 8002106:	430a      	orrs	r2, r1
 8002108:	621a      	str	r2, [r3, #32]
 800210a:	e035      	b.n	8002178 <HAL_RCC_OscConfig+0x398>
 800210c:	40021000 	.word	0x40021000
 8002110:	fffeffff 	.word	0xfffeffff
 8002114:	fffbffff 	.word	0xfffbffff
 8002118:	40007000 	.word	0x40007000
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	689b      	ldr	r3, [r3, #8]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d10c      	bne.n	800213e <HAL_RCC_OscConfig+0x35e>
 8002124:	4bb6      	ldr	r3, [pc, #728]	@ (8002400 <HAL_RCC_OscConfig+0x620>)
 8002126:	6a1a      	ldr	r2, [r3, #32]
 8002128:	4bb5      	ldr	r3, [pc, #724]	@ (8002400 <HAL_RCC_OscConfig+0x620>)
 800212a:	2101      	movs	r1, #1
 800212c:	438a      	bics	r2, r1
 800212e:	621a      	str	r2, [r3, #32]
 8002130:	4bb3      	ldr	r3, [pc, #716]	@ (8002400 <HAL_RCC_OscConfig+0x620>)
 8002132:	6a1a      	ldr	r2, [r3, #32]
 8002134:	4bb2      	ldr	r3, [pc, #712]	@ (8002400 <HAL_RCC_OscConfig+0x620>)
 8002136:	2104      	movs	r1, #4
 8002138:	438a      	bics	r2, r1
 800213a:	621a      	str	r2, [r3, #32]
 800213c:	e01c      	b.n	8002178 <HAL_RCC_OscConfig+0x398>
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	689b      	ldr	r3, [r3, #8]
 8002142:	2b05      	cmp	r3, #5
 8002144:	d10c      	bne.n	8002160 <HAL_RCC_OscConfig+0x380>
 8002146:	4bae      	ldr	r3, [pc, #696]	@ (8002400 <HAL_RCC_OscConfig+0x620>)
 8002148:	6a1a      	ldr	r2, [r3, #32]
 800214a:	4bad      	ldr	r3, [pc, #692]	@ (8002400 <HAL_RCC_OscConfig+0x620>)
 800214c:	2104      	movs	r1, #4
 800214e:	430a      	orrs	r2, r1
 8002150:	621a      	str	r2, [r3, #32]
 8002152:	4bab      	ldr	r3, [pc, #684]	@ (8002400 <HAL_RCC_OscConfig+0x620>)
 8002154:	6a1a      	ldr	r2, [r3, #32]
 8002156:	4baa      	ldr	r3, [pc, #680]	@ (8002400 <HAL_RCC_OscConfig+0x620>)
 8002158:	2101      	movs	r1, #1
 800215a:	430a      	orrs	r2, r1
 800215c:	621a      	str	r2, [r3, #32]
 800215e:	e00b      	b.n	8002178 <HAL_RCC_OscConfig+0x398>
 8002160:	4ba7      	ldr	r3, [pc, #668]	@ (8002400 <HAL_RCC_OscConfig+0x620>)
 8002162:	6a1a      	ldr	r2, [r3, #32]
 8002164:	4ba6      	ldr	r3, [pc, #664]	@ (8002400 <HAL_RCC_OscConfig+0x620>)
 8002166:	2101      	movs	r1, #1
 8002168:	438a      	bics	r2, r1
 800216a:	621a      	str	r2, [r3, #32]
 800216c:	4ba4      	ldr	r3, [pc, #656]	@ (8002400 <HAL_RCC_OscConfig+0x620>)
 800216e:	6a1a      	ldr	r2, [r3, #32]
 8002170:	4ba3      	ldr	r3, [pc, #652]	@ (8002400 <HAL_RCC_OscConfig+0x620>)
 8002172:	2104      	movs	r1, #4
 8002174:	438a      	bics	r2, r1
 8002176:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	689b      	ldr	r3, [r3, #8]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d014      	beq.n	80021aa <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002180:	f7fe ff04 	bl	8000f8c <HAL_GetTick>
 8002184:	0003      	movs	r3, r0
 8002186:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002188:	e009      	b.n	800219e <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800218a:	f7fe feff 	bl	8000f8c <HAL_GetTick>
 800218e:	0002      	movs	r2, r0
 8002190:	69bb      	ldr	r3, [r7, #24]
 8002192:	1ad3      	subs	r3, r2, r3
 8002194:	4a9b      	ldr	r2, [pc, #620]	@ (8002404 <HAL_RCC_OscConfig+0x624>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d901      	bls.n	800219e <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 800219a:	2303      	movs	r3, #3
 800219c:	e12b      	b.n	80023f6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800219e:	4b98      	ldr	r3, [pc, #608]	@ (8002400 <HAL_RCC_OscConfig+0x620>)
 80021a0:	6a1b      	ldr	r3, [r3, #32]
 80021a2:	2202      	movs	r2, #2
 80021a4:	4013      	ands	r3, r2
 80021a6:	d0f0      	beq.n	800218a <HAL_RCC_OscConfig+0x3aa>
 80021a8:	e013      	b.n	80021d2 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021aa:	f7fe feef 	bl	8000f8c <HAL_GetTick>
 80021ae:	0003      	movs	r3, r0
 80021b0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021b2:	e009      	b.n	80021c8 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021b4:	f7fe feea 	bl	8000f8c <HAL_GetTick>
 80021b8:	0002      	movs	r2, r0
 80021ba:	69bb      	ldr	r3, [r7, #24]
 80021bc:	1ad3      	subs	r3, r2, r3
 80021be:	4a91      	ldr	r2, [pc, #580]	@ (8002404 <HAL_RCC_OscConfig+0x624>)
 80021c0:	4293      	cmp	r3, r2
 80021c2:	d901      	bls.n	80021c8 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 80021c4:	2303      	movs	r3, #3
 80021c6:	e116      	b.n	80023f6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021c8:	4b8d      	ldr	r3, [pc, #564]	@ (8002400 <HAL_RCC_OscConfig+0x620>)
 80021ca:	6a1b      	ldr	r3, [r3, #32]
 80021cc:	2202      	movs	r2, #2
 80021ce:	4013      	ands	r3, r2
 80021d0:	d1f0      	bne.n	80021b4 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80021d2:	231f      	movs	r3, #31
 80021d4:	18fb      	adds	r3, r7, r3
 80021d6:	781b      	ldrb	r3, [r3, #0]
 80021d8:	2b01      	cmp	r3, #1
 80021da:	d105      	bne.n	80021e8 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021dc:	4b88      	ldr	r3, [pc, #544]	@ (8002400 <HAL_RCC_OscConfig+0x620>)
 80021de:	69da      	ldr	r2, [r3, #28]
 80021e0:	4b87      	ldr	r3, [pc, #540]	@ (8002400 <HAL_RCC_OscConfig+0x620>)
 80021e2:	4989      	ldr	r1, [pc, #548]	@ (8002408 <HAL_RCC_OscConfig+0x628>)
 80021e4:	400a      	ands	r2, r1
 80021e6:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	2210      	movs	r2, #16
 80021ee:	4013      	ands	r3, r2
 80021f0:	d063      	beq.n	80022ba <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	695b      	ldr	r3, [r3, #20]
 80021f6:	2b01      	cmp	r3, #1
 80021f8:	d12a      	bne.n	8002250 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80021fa:	4b81      	ldr	r3, [pc, #516]	@ (8002400 <HAL_RCC_OscConfig+0x620>)
 80021fc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80021fe:	4b80      	ldr	r3, [pc, #512]	@ (8002400 <HAL_RCC_OscConfig+0x620>)
 8002200:	2104      	movs	r1, #4
 8002202:	430a      	orrs	r2, r1
 8002204:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8002206:	4b7e      	ldr	r3, [pc, #504]	@ (8002400 <HAL_RCC_OscConfig+0x620>)
 8002208:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800220a:	4b7d      	ldr	r3, [pc, #500]	@ (8002400 <HAL_RCC_OscConfig+0x620>)
 800220c:	2101      	movs	r1, #1
 800220e:	430a      	orrs	r2, r1
 8002210:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002212:	f7fe febb 	bl	8000f8c <HAL_GetTick>
 8002216:	0003      	movs	r3, r0
 8002218:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800221a:	e008      	b.n	800222e <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800221c:	f7fe feb6 	bl	8000f8c <HAL_GetTick>
 8002220:	0002      	movs	r2, r0
 8002222:	69bb      	ldr	r3, [r7, #24]
 8002224:	1ad3      	subs	r3, r2, r3
 8002226:	2b02      	cmp	r3, #2
 8002228:	d901      	bls.n	800222e <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 800222a:	2303      	movs	r3, #3
 800222c:	e0e3      	b.n	80023f6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800222e:	4b74      	ldr	r3, [pc, #464]	@ (8002400 <HAL_RCC_OscConfig+0x620>)
 8002230:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002232:	2202      	movs	r2, #2
 8002234:	4013      	ands	r3, r2
 8002236:	d0f1      	beq.n	800221c <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002238:	4b71      	ldr	r3, [pc, #452]	@ (8002400 <HAL_RCC_OscConfig+0x620>)
 800223a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800223c:	22f8      	movs	r2, #248	@ 0xf8
 800223e:	4393      	bics	r3, r2
 8002240:	0019      	movs	r1, r3
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	699b      	ldr	r3, [r3, #24]
 8002246:	00da      	lsls	r2, r3, #3
 8002248:	4b6d      	ldr	r3, [pc, #436]	@ (8002400 <HAL_RCC_OscConfig+0x620>)
 800224a:	430a      	orrs	r2, r1
 800224c:	635a      	str	r2, [r3, #52]	@ 0x34
 800224e:	e034      	b.n	80022ba <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	695b      	ldr	r3, [r3, #20]
 8002254:	3305      	adds	r3, #5
 8002256:	d111      	bne.n	800227c <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8002258:	4b69      	ldr	r3, [pc, #420]	@ (8002400 <HAL_RCC_OscConfig+0x620>)
 800225a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800225c:	4b68      	ldr	r3, [pc, #416]	@ (8002400 <HAL_RCC_OscConfig+0x620>)
 800225e:	2104      	movs	r1, #4
 8002260:	438a      	bics	r2, r1
 8002262:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002264:	4b66      	ldr	r3, [pc, #408]	@ (8002400 <HAL_RCC_OscConfig+0x620>)
 8002266:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002268:	22f8      	movs	r2, #248	@ 0xf8
 800226a:	4393      	bics	r3, r2
 800226c:	0019      	movs	r1, r3
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	699b      	ldr	r3, [r3, #24]
 8002272:	00da      	lsls	r2, r3, #3
 8002274:	4b62      	ldr	r3, [pc, #392]	@ (8002400 <HAL_RCC_OscConfig+0x620>)
 8002276:	430a      	orrs	r2, r1
 8002278:	635a      	str	r2, [r3, #52]	@ 0x34
 800227a:	e01e      	b.n	80022ba <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800227c:	4b60      	ldr	r3, [pc, #384]	@ (8002400 <HAL_RCC_OscConfig+0x620>)
 800227e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002280:	4b5f      	ldr	r3, [pc, #380]	@ (8002400 <HAL_RCC_OscConfig+0x620>)
 8002282:	2104      	movs	r1, #4
 8002284:	430a      	orrs	r2, r1
 8002286:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8002288:	4b5d      	ldr	r3, [pc, #372]	@ (8002400 <HAL_RCC_OscConfig+0x620>)
 800228a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800228c:	4b5c      	ldr	r3, [pc, #368]	@ (8002400 <HAL_RCC_OscConfig+0x620>)
 800228e:	2101      	movs	r1, #1
 8002290:	438a      	bics	r2, r1
 8002292:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002294:	f7fe fe7a 	bl	8000f8c <HAL_GetTick>
 8002298:	0003      	movs	r3, r0
 800229a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800229c:	e008      	b.n	80022b0 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800229e:	f7fe fe75 	bl	8000f8c <HAL_GetTick>
 80022a2:	0002      	movs	r2, r0
 80022a4:	69bb      	ldr	r3, [r7, #24]
 80022a6:	1ad3      	subs	r3, r2, r3
 80022a8:	2b02      	cmp	r3, #2
 80022aa:	d901      	bls.n	80022b0 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 80022ac:	2303      	movs	r3, #3
 80022ae:	e0a2      	b.n	80023f6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80022b0:	4b53      	ldr	r3, [pc, #332]	@ (8002400 <HAL_RCC_OscConfig+0x620>)
 80022b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80022b4:	2202      	movs	r2, #2
 80022b6:	4013      	ands	r3, r2
 80022b8:	d1f1      	bne.n	800229e <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6a1b      	ldr	r3, [r3, #32]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d100      	bne.n	80022c4 <HAL_RCC_OscConfig+0x4e4>
 80022c2:	e097      	b.n	80023f4 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80022c4:	4b4e      	ldr	r3, [pc, #312]	@ (8002400 <HAL_RCC_OscConfig+0x620>)
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	220c      	movs	r2, #12
 80022ca:	4013      	ands	r3, r2
 80022cc:	2b08      	cmp	r3, #8
 80022ce:	d100      	bne.n	80022d2 <HAL_RCC_OscConfig+0x4f2>
 80022d0:	e06b      	b.n	80023aa <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6a1b      	ldr	r3, [r3, #32]
 80022d6:	2b02      	cmp	r3, #2
 80022d8:	d14c      	bne.n	8002374 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022da:	4b49      	ldr	r3, [pc, #292]	@ (8002400 <HAL_RCC_OscConfig+0x620>)
 80022dc:	681a      	ldr	r2, [r3, #0]
 80022de:	4b48      	ldr	r3, [pc, #288]	@ (8002400 <HAL_RCC_OscConfig+0x620>)
 80022e0:	494a      	ldr	r1, [pc, #296]	@ (800240c <HAL_RCC_OscConfig+0x62c>)
 80022e2:	400a      	ands	r2, r1
 80022e4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022e6:	f7fe fe51 	bl	8000f8c <HAL_GetTick>
 80022ea:	0003      	movs	r3, r0
 80022ec:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022ee:	e008      	b.n	8002302 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022f0:	f7fe fe4c 	bl	8000f8c <HAL_GetTick>
 80022f4:	0002      	movs	r2, r0
 80022f6:	69bb      	ldr	r3, [r7, #24]
 80022f8:	1ad3      	subs	r3, r2, r3
 80022fa:	2b02      	cmp	r3, #2
 80022fc:	d901      	bls.n	8002302 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 80022fe:	2303      	movs	r3, #3
 8002300:	e079      	b.n	80023f6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002302:	4b3f      	ldr	r3, [pc, #252]	@ (8002400 <HAL_RCC_OscConfig+0x620>)
 8002304:	681a      	ldr	r2, [r3, #0]
 8002306:	2380      	movs	r3, #128	@ 0x80
 8002308:	049b      	lsls	r3, r3, #18
 800230a:	4013      	ands	r3, r2
 800230c:	d1f0      	bne.n	80022f0 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800230e:	4b3c      	ldr	r3, [pc, #240]	@ (8002400 <HAL_RCC_OscConfig+0x620>)
 8002310:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002312:	220f      	movs	r2, #15
 8002314:	4393      	bics	r3, r2
 8002316:	0019      	movs	r1, r3
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800231c:	4b38      	ldr	r3, [pc, #224]	@ (8002400 <HAL_RCC_OscConfig+0x620>)
 800231e:	430a      	orrs	r2, r1
 8002320:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002322:	4b37      	ldr	r3, [pc, #220]	@ (8002400 <HAL_RCC_OscConfig+0x620>)
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	4a3a      	ldr	r2, [pc, #232]	@ (8002410 <HAL_RCC_OscConfig+0x630>)
 8002328:	4013      	ands	r3, r2
 800232a:	0019      	movs	r1, r3
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002334:	431a      	orrs	r2, r3
 8002336:	4b32      	ldr	r3, [pc, #200]	@ (8002400 <HAL_RCC_OscConfig+0x620>)
 8002338:	430a      	orrs	r2, r1
 800233a:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800233c:	4b30      	ldr	r3, [pc, #192]	@ (8002400 <HAL_RCC_OscConfig+0x620>)
 800233e:	681a      	ldr	r2, [r3, #0]
 8002340:	4b2f      	ldr	r3, [pc, #188]	@ (8002400 <HAL_RCC_OscConfig+0x620>)
 8002342:	2180      	movs	r1, #128	@ 0x80
 8002344:	0449      	lsls	r1, r1, #17
 8002346:	430a      	orrs	r2, r1
 8002348:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800234a:	f7fe fe1f 	bl	8000f8c <HAL_GetTick>
 800234e:	0003      	movs	r3, r0
 8002350:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002352:	e008      	b.n	8002366 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002354:	f7fe fe1a 	bl	8000f8c <HAL_GetTick>
 8002358:	0002      	movs	r2, r0
 800235a:	69bb      	ldr	r3, [r7, #24]
 800235c:	1ad3      	subs	r3, r2, r3
 800235e:	2b02      	cmp	r3, #2
 8002360:	d901      	bls.n	8002366 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8002362:	2303      	movs	r3, #3
 8002364:	e047      	b.n	80023f6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002366:	4b26      	ldr	r3, [pc, #152]	@ (8002400 <HAL_RCC_OscConfig+0x620>)
 8002368:	681a      	ldr	r2, [r3, #0]
 800236a:	2380      	movs	r3, #128	@ 0x80
 800236c:	049b      	lsls	r3, r3, #18
 800236e:	4013      	ands	r3, r2
 8002370:	d0f0      	beq.n	8002354 <HAL_RCC_OscConfig+0x574>
 8002372:	e03f      	b.n	80023f4 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002374:	4b22      	ldr	r3, [pc, #136]	@ (8002400 <HAL_RCC_OscConfig+0x620>)
 8002376:	681a      	ldr	r2, [r3, #0]
 8002378:	4b21      	ldr	r3, [pc, #132]	@ (8002400 <HAL_RCC_OscConfig+0x620>)
 800237a:	4924      	ldr	r1, [pc, #144]	@ (800240c <HAL_RCC_OscConfig+0x62c>)
 800237c:	400a      	ands	r2, r1
 800237e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002380:	f7fe fe04 	bl	8000f8c <HAL_GetTick>
 8002384:	0003      	movs	r3, r0
 8002386:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002388:	e008      	b.n	800239c <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800238a:	f7fe fdff 	bl	8000f8c <HAL_GetTick>
 800238e:	0002      	movs	r2, r0
 8002390:	69bb      	ldr	r3, [r7, #24]
 8002392:	1ad3      	subs	r3, r2, r3
 8002394:	2b02      	cmp	r3, #2
 8002396:	d901      	bls.n	800239c <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8002398:	2303      	movs	r3, #3
 800239a:	e02c      	b.n	80023f6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800239c:	4b18      	ldr	r3, [pc, #96]	@ (8002400 <HAL_RCC_OscConfig+0x620>)
 800239e:	681a      	ldr	r2, [r3, #0]
 80023a0:	2380      	movs	r3, #128	@ 0x80
 80023a2:	049b      	lsls	r3, r3, #18
 80023a4:	4013      	ands	r3, r2
 80023a6:	d1f0      	bne.n	800238a <HAL_RCC_OscConfig+0x5aa>
 80023a8:	e024      	b.n	80023f4 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6a1b      	ldr	r3, [r3, #32]
 80023ae:	2b01      	cmp	r3, #1
 80023b0:	d101      	bne.n	80023b6 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 80023b2:	2301      	movs	r3, #1
 80023b4:	e01f      	b.n	80023f6 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80023b6:	4b12      	ldr	r3, [pc, #72]	@ (8002400 <HAL_RCC_OscConfig+0x620>)
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80023bc:	4b10      	ldr	r3, [pc, #64]	@ (8002400 <HAL_RCC_OscConfig+0x620>)
 80023be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023c0:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80023c2:	697a      	ldr	r2, [r7, #20]
 80023c4:	2380      	movs	r3, #128	@ 0x80
 80023c6:	025b      	lsls	r3, r3, #9
 80023c8:	401a      	ands	r2, r3
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023ce:	429a      	cmp	r2, r3
 80023d0:	d10e      	bne.n	80023f0 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80023d2:	693b      	ldr	r3, [r7, #16]
 80023d4:	220f      	movs	r2, #15
 80023d6:	401a      	ands	r2, r3
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80023dc:	429a      	cmp	r2, r3
 80023de:	d107      	bne.n	80023f0 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80023e0:	697a      	ldr	r2, [r7, #20]
 80023e2:	23f0      	movs	r3, #240	@ 0xf0
 80023e4:	039b      	lsls	r3, r3, #14
 80023e6:	401a      	ands	r2, r3
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80023ec:	429a      	cmp	r2, r3
 80023ee:	d001      	beq.n	80023f4 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 80023f0:	2301      	movs	r3, #1
 80023f2:	e000      	b.n	80023f6 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 80023f4:	2300      	movs	r3, #0
}
 80023f6:	0018      	movs	r0, r3
 80023f8:	46bd      	mov	sp, r7
 80023fa:	b008      	add	sp, #32
 80023fc:	bd80      	pop	{r7, pc}
 80023fe:	46c0      	nop			@ (mov r8, r8)
 8002400:	40021000 	.word	0x40021000
 8002404:	00001388 	.word	0x00001388
 8002408:	efffffff 	.word	0xefffffff
 800240c:	feffffff 	.word	0xfeffffff
 8002410:	ffc2ffff 	.word	0xffc2ffff

08002414 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b084      	sub	sp, #16
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
 800241c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d101      	bne.n	8002428 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002424:	2301      	movs	r3, #1
 8002426:	e0b3      	b.n	8002590 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002428:	4b5b      	ldr	r3, [pc, #364]	@ (8002598 <HAL_RCC_ClockConfig+0x184>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	2201      	movs	r2, #1
 800242e:	4013      	ands	r3, r2
 8002430:	683a      	ldr	r2, [r7, #0]
 8002432:	429a      	cmp	r2, r3
 8002434:	d911      	bls.n	800245a <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002436:	4b58      	ldr	r3, [pc, #352]	@ (8002598 <HAL_RCC_ClockConfig+0x184>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	2201      	movs	r2, #1
 800243c:	4393      	bics	r3, r2
 800243e:	0019      	movs	r1, r3
 8002440:	4b55      	ldr	r3, [pc, #340]	@ (8002598 <HAL_RCC_ClockConfig+0x184>)
 8002442:	683a      	ldr	r2, [r7, #0]
 8002444:	430a      	orrs	r2, r1
 8002446:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002448:	4b53      	ldr	r3, [pc, #332]	@ (8002598 <HAL_RCC_ClockConfig+0x184>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	2201      	movs	r2, #1
 800244e:	4013      	ands	r3, r2
 8002450:	683a      	ldr	r2, [r7, #0]
 8002452:	429a      	cmp	r2, r3
 8002454:	d001      	beq.n	800245a <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8002456:	2301      	movs	r3, #1
 8002458:	e09a      	b.n	8002590 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	2202      	movs	r2, #2
 8002460:	4013      	ands	r3, r2
 8002462:	d015      	beq.n	8002490 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	2204      	movs	r2, #4
 800246a:	4013      	ands	r3, r2
 800246c:	d006      	beq.n	800247c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800246e:	4b4b      	ldr	r3, [pc, #300]	@ (800259c <HAL_RCC_ClockConfig+0x188>)
 8002470:	685a      	ldr	r2, [r3, #4]
 8002472:	4b4a      	ldr	r3, [pc, #296]	@ (800259c <HAL_RCC_ClockConfig+0x188>)
 8002474:	21e0      	movs	r1, #224	@ 0xe0
 8002476:	00c9      	lsls	r1, r1, #3
 8002478:	430a      	orrs	r2, r1
 800247a:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800247c:	4b47      	ldr	r3, [pc, #284]	@ (800259c <HAL_RCC_ClockConfig+0x188>)
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	22f0      	movs	r2, #240	@ 0xf0
 8002482:	4393      	bics	r3, r2
 8002484:	0019      	movs	r1, r3
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	689a      	ldr	r2, [r3, #8]
 800248a:	4b44      	ldr	r3, [pc, #272]	@ (800259c <HAL_RCC_ClockConfig+0x188>)
 800248c:	430a      	orrs	r2, r1
 800248e:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	2201      	movs	r2, #1
 8002496:	4013      	ands	r3, r2
 8002498:	d040      	beq.n	800251c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	2b01      	cmp	r3, #1
 80024a0:	d107      	bne.n	80024b2 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024a2:	4b3e      	ldr	r3, [pc, #248]	@ (800259c <HAL_RCC_ClockConfig+0x188>)
 80024a4:	681a      	ldr	r2, [r3, #0]
 80024a6:	2380      	movs	r3, #128	@ 0x80
 80024a8:	029b      	lsls	r3, r3, #10
 80024aa:	4013      	ands	r3, r2
 80024ac:	d114      	bne.n	80024d8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80024ae:	2301      	movs	r3, #1
 80024b0:	e06e      	b.n	8002590 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	2b02      	cmp	r3, #2
 80024b8:	d107      	bne.n	80024ca <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024ba:	4b38      	ldr	r3, [pc, #224]	@ (800259c <HAL_RCC_ClockConfig+0x188>)
 80024bc:	681a      	ldr	r2, [r3, #0]
 80024be:	2380      	movs	r3, #128	@ 0x80
 80024c0:	049b      	lsls	r3, r3, #18
 80024c2:	4013      	ands	r3, r2
 80024c4:	d108      	bne.n	80024d8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80024c6:	2301      	movs	r3, #1
 80024c8:	e062      	b.n	8002590 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024ca:	4b34      	ldr	r3, [pc, #208]	@ (800259c <HAL_RCC_ClockConfig+0x188>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	2202      	movs	r2, #2
 80024d0:	4013      	ands	r3, r2
 80024d2:	d101      	bne.n	80024d8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80024d4:	2301      	movs	r3, #1
 80024d6:	e05b      	b.n	8002590 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80024d8:	4b30      	ldr	r3, [pc, #192]	@ (800259c <HAL_RCC_ClockConfig+0x188>)
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	2203      	movs	r2, #3
 80024de:	4393      	bics	r3, r2
 80024e0:	0019      	movs	r1, r3
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	685a      	ldr	r2, [r3, #4]
 80024e6:	4b2d      	ldr	r3, [pc, #180]	@ (800259c <HAL_RCC_ClockConfig+0x188>)
 80024e8:	430a      	orrs	r2, r1
 80024ea:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80024ec:	f7fe fd4e 	bl	8000f8c <HAL_GetTick>
 80024f0:	0003      	movs	r3, r0
 80024f2:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024f4:	e009      	b.n	800250a <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024f6:	f7fe fd49 	bl	8000f8c <HAL_GetTick>
 80024fa:	0002      	movs	r2, r0
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	1ad3      	subs	r3, r2, r3
 8002500:	4a27      	ldr	r2, [pc, #156]	@ (80025a0 <HAL_RCC_ClockConfig+0x18c>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d901      	bls.n	800250a <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8002506:	2303      	movs	r3, #3
 8002508:	e042      	b.n	8002590 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800250a:	4b24      	ldr	r3, [pc, #144]	@ (800259c <HAL_RCC_ClockConfig+0x188>)
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	220c      	movs	r2, #12
 8002510:	401a      	ands	r2, r3
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	009b      	lsls	r3, r3, #2
 8002518:	429a      	cmp	r2, r3
 800251a:	d1ec      	bne.n	80024f6 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800251c:	4b1e      	ldr	r3, [pc, #120]	@ (8002598 <HAL_RCC_ClockConfig+0x184>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	2201      	movs	r2, #1
 8002522:	4013      	ands	r3, r2
 8002524:	683a      	ldr	r2, [r7, #0]
 8002526:	429a      	cmp	r2, r3
 8002528:	d211      	bcs.n	800254e <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800252a:	4b1b      	ldr	r3, [pc, #108]	@ (8002598 <HAL_RCC_ClockConfig+0x184>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	2201      	movs	r2, #1
 8002530:	4393      	bics	r3, r2
 8002532:	0019      	movs	r1, r3
 8002534:	4b18      	ldr	r3, [pc, #96]	@ (8002598 <HAL_RCC_ClockConfig+0x184>)
 8002536:	683a      	ldr	r2, [r7, #0]
 8002538:	430a      	orrs	r2, r1
 800253a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800253c:	4b16      	ldr	r3, [pc, #88]	@ (8002598 <HAL_RCC_ClockConfig+0x184>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	2201      	movs	r2, #1
 8002542:	4013      	ands	r3, r2
 8002544:	683a      	ldr	r2, [r7, #0]
 8002546:	429a      	cmp	r2, r3
 8002548:	d001      	beq.n	800254e <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 800254a:	2301      	movs	r3, #1
 800254c:	e020      	b.n	8002590 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	2204      	movs	r2, #4
 8002554:	4013      	ands	r3, r2
 8002556:	d009      	beq.n	800256c <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002558:	4b10      	ldr	r3, [pc, #64]	@ (800259c <HAL_RCC_ClockConfig+0x188>)
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	4a11      	ldr	r2, [pc, #68]	@ (80025a4 <HAL_RCC_ClockConfig+0x190>)
 800255e:	4013      	ands	r3, r2
 8002560:	0019      	movs	r1, r3
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	68da      	ldr	r2, [r3, #12]
 8002566:	4b0d      	ldr	r3, [pc, #52]	@ (800259c <HAL_RCC_ClockConfig+0x188>)
 8002568:	430a      	orrs	r2, r1
 800256a:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800256c:	f000 f820 	bl	80025b0 <HAL_RCC_GetSysClockFreq>
 8002570:	0001      	movs	r1, r0
 8002572:	4b0a      	ldr	r3, [pc, #40]	@ (800259c <HAL_RCC_ClockConfig+0x188>)
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	091b      	lsrs	r3, r3, #4
 8002578:	220f      	movs	r2, #15
 800257a:	4013      	ands	r3, r2
 800257c:	4a0a      	ldr	r2, [pc, #40]	@ (80025a8 <HAL_RCC_ClockConfig+0x194>)
 800257e:	5cd3      	ldrb	r3, [r2, r3]
 8002580:	000a      	movs	r2, r1
 8002582:	40da      	lsrs	r2, r3
 8002584:	4b09      	ldr	r3, [pc, #36]	@ (80025ac <HAL_RCC_ClockConfig+0x198>)
 8002586:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002588:	2003      	movs	r0, #3
 800258a:	f7fe fcb9 	bl	8000f00 <HAL_InitTick>
  
  return HAL_OK;
 800258e:	2300      	movs	r3, #0
}
 8002590:	0018      	movs	r0, r3
 8002592:	46bd      	mov	sp, r7
 8002594:	b004      	add	sp, #16
 8002596:	bd80      	pop	{r7, pc}
 8002598:	40022000 	.word	0x40022000
 800259c:	40021000 	.word	0x40021000
 80025a0:	00001388 	.word	0x00001388
 80025a4:	fffff8ff 	.word	0xfffff8ff
 80025a8:	0800319c 	.word	0x0800319c
 80025ac:	20000014 	.word	0x20000014

080025b0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b086      	sub	sp, #24
 80025b4:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80025b6:	2300      	movs	r3, #0
 80025b8:	60fb      	str	r3, [r7, #12]
 80025ba:	2300      	movs	r3, #0
 80025bc:	60bb      	str	r3, [r7, #8]
 80025be:	2300      	movs	r3, #0
 80025c0:	617b      	str	r3, [r7, #20]
 80025c2:	2300      	movs	r3, #0
 80025c4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80025c6:	2300      	movs	r3, #0
 80025c8:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80025ca:	4b20      	ldr	r3, [pc, #128]	@ (800264c <HAL_RCC_GetSysClockFreq+0x9c>)
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	220c      	movs	r2, #12
 80025d4:	4013      	ands	r3, r2
 80025d6:	2b04      	cmp	r3, #4
 80025d8:	d002      	beq.n	80025e0 <HAL_RCC_GetSysClockFreq+0x30>
 80025da:	2b08      	cmp	r3, #8
 80025dc:	d003      	beq.n	80025e6 <HAL_RCC_GetSysClockFreq+0x36>
 80025de:	e02c      	b.n	800263a <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80025e0:	4b1b      	ldr	r3, [pc, #108]	@ (8002650 <HAL_RCC_GetSysClockFreq+0xa0>)
 80025e2:	613b      	str	r3, [r7, #16]
      break;
 80025e4:	e02c      	b.n	8002640 <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	0c9b      	lsrs	r3, r3, #18
 80025ea:	220f      	movs	r2, #15
 80025ec:	4013      	ands	r3, r2
 80025ee:	4a19      	ldr	r2, [pc, #100]	@ (8002654 <HAL_RCC_GetSysClockFreq+0xa4>)
 80025f0:	5cd3      	ldrb	r3, [r2, r3]
 80025f2:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80025f4:	4b15      	ldr	r3, [pc, #84]	@ (800264c <HAL_RCC_GetSysClockFreq+0x9c>)
 80025f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025f8:	220f      	movs	r2, #15
 80025fa:	4013      	ands	r3, r2
 80025fc:	4a16      	ldr	r2, [pc, #88]	@ (8002658 <HAL_RCC_GetSysClockFreq+0xa8>)
 80025fe:	5cd3      	ldrb	r3, [r2, r3]
 8002600:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002602:	68fa      	ldr	r2, [r7, #12]
 8002604:	2380      	movs	r3, #128	@ 0x80
 8002606:	025b      	lsls	r3, r3, #9
 8002608:	4013      	ands	r3, r2
 800260a:	d009      	beq.n	8002620 <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800260c:	68b9      	ldr	r1, [r7, #8]
 800260e:	4810      	ldr	r0, [pc, #64]	@ (8002650 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002610:	f7fd fd84 	bl	800011c <__udivsi3>
 8002614:	0003      	movs	r3, r0
 8002616:	001a      	movs	r2, r3
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	4353      	muls	r3, r2
 800261c:	617b      	str	r3, [r7, #20]
 800261e:	e009      	b.n	8002634 <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002620:	6879      	ldr	r1, [r7, #4]
 8002622:	000a      	movs	r2, r1
 8002624:	0152      	lsls	r2, r2, #5
 8002626:	1a52      	subs	r2, r2, r1
 8002628:	0193      	lsls	r3, r2, #6
 800262a:	1a9b      	subs	r3, r3, r2
 800262c:	00db      	lsls	r3, r3, #3
 800262e:	185b      	adds	r3, r3, r1
 8002630:	021b      	lsls	r3, r3, #8
 8002632:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 8002634:	697b      	ldr	r3, [r7, #20]
 8002636:	613b      	str	r3, [r7, #16]
      break;
 8002638:	e002      	b.n	8002640 <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800263a:	4b05      	ldr	r3, [pc, #20]	@ (8002650 <HAL_RCC_GetSysClockFreq+0xa0>)
 800263c:	613b      	str	r3, [r7, #16]
      break;
 800263e:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002640:	693b      	ldr	r3, [r7, #16]
}
 8002642:	0018      	movs	r0, r3
 8002644:	46bd      	mov	sp, r7
 8002646:	b006      	add	sp, #24
 8002648:	bd80      	pop	{r7, pc}
 800264a:	46c0      	nop			@ (mov r8, r8)
 800264c:	40021000 	.word	0x40021000
 8002650:	007a1200 	.word	0x007a1200
 8002654:	080031ac 	.word	0x080031ac
 8002658:	080031bc 	.word	0x080031bc

0800265c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b086      	sub	sp, #24
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002664:	2300      	movs	r3, #0
 8002666:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8002668:	2300      	movs	r3, #0
 800266a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681a      	ldr	r2, [r3, #0]
 8002670:	2380      	movs	r3, #128	@ 0x80
 8002672:	025b      	lsls	r3, r3, #9
 8002674:	4013      	ands	r3, r2
 8002676:	d100      	bne.n	800267a <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8002678:	e08e      	b.n	8002798 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 800267a:	2017      	movs	r0, #23
 800267c:	183b      	adds	r3, r7, r0
 800267e:	2200      	movs	r2, #0
 8002680:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002682:	4b57      	ldr	r3, [pc, #348]	@ (80027e0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002684:	69da      	ldr	r2, [r3, #28]
 8002686:	2380      	movs	r3, #128	@ 0x80
 8002688:	055b      	lsls	r3, r3, #21
 800268a:	4013      	ands	r3, r2
 800268c:	d110      	bne.n	80026b0 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 800268e:	4b54      	ldr	r3, [pc, #336]	@ (80027e0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002690:	69da      	ldr	r2, [r3, #28]
 8002692:	4b53      	ldr	r3, [pc, #332]	@ (80027e0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002694:	2180      	movs	r1, #128	@ 0x80
 8002696:	0549      	lsls	r1, r1, #21
 8002698:	430a      	orrs	r2, r1
 800269a:	61da      	str	r2, [r3, #28]
 800269c:	4b50      	ldr	r3, [pc, #320]	@ (80027e0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800269e:	69da      	ldr	r2, [r3, #28]
 80026a0:	2380      	movs	r3, #128	@ 0x80
 80026a2:	055b      	lsls	r3, r3, #21
 80026a4:	4013      	ands	r3, r2
 80026a6:	60bb      	str	r3, [r7, #8]
 80026a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026aa:	183b      	adds	r3, r7, r0
 80026ac:	2201      	movs	r2, #1
 80026ae:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026b0:	4b4c      	ldr	r3, [pc, #304]	@ (80027e4 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80026b2:	681a      	ldr	r2, [r3, #0]
 80026b4:	2380      	movs	r3, #128	@ 0x80
 80026b6:	005b      	lsls	r3, r3, #1
 80026b8:	4013      	ands	r3, r2
 80026ba:	d11a      	bne.n	80026f2 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026bc:	4b49      	ldr	r3, [pc, #292]	@ (80027e4 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80026be:	681a      	ldr	r2, [r3, #0]
 80026c0:	4b48      	ldr	r3, [pc, #288]	@ (80027e4 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80026c2:	2180      	movs	r1, #128	@ 0x80
 80026c4:	0049      	lsls	r1, r1, #1
 80026c6:	430a      	orrs	r2, r1
 80026c8:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026ca:	f7fe fc5f 	bl	8000f8c <HAL_GetTick>
 80026ce:	0003      	movs	r3, r0
 80026d0:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026d2:	e008      	b.n	80026e6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026d4:	f7fe fc5a 	bl	8000f8c <HAL_GetTick>
 80026d8:	0002      	movs	r2, r0
 80026da:	693b      	ldr	r3, [r7, #16]
 80026dc:	1ad3      	subs	r3, r2, r3
 80026de:	2b64      	cmp	r3, #100	@ 0x64
 80026e0:	d901      	bls.n	80026e6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 80026e2:	2303      	movs	r3, #3
 80026e4:	e077      	b.n	80027d6 <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026e6:	4b3f      	ldr	r3, [pc, #252]	@ (80027e4 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80026e8:	681a      	ldr	r2, [r3, #0]
 80026ea:	2380      	movs	r3, #128	@ 0x80
 80026ec:	005b      	lsls	r3, r3, #1
 80026ee:	4013      	ands	r3, r2
 80026f0:	d0f0      	beq.n	80026d4 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80026f2:	4b3b      	ldr	r3, [pc, #236]	@ (80027e0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80026f4:	6a1a      	ldr	r2, [r3, #32]
 80026f6:	23c0      	movs	r3, #192	@ 0xc0
 80026f8:	009b      	lsls	r3, r3, #2
 80026fa:	4013      	ands	r3, r2
 80026fc:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d034      	beq.n	800276e <HAL_RCCEx_PeriphCLKConfig+0x112>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	685a      	ldr	r2, [r3, #4]
 8002708:	23c0      	movs	r3, #192	@ 0xc0
 800270a:	009b      	lsls	r3, r3, #2
 800270c:	4013      	ands	r3, r2
 800270e:	68fa      	ldr	r2, [r7, #12]
 8002710:	429a      	cmp	r2, r3
 8002712:	d02c      	beq.n	800276e <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002714:	4b32      	ldr	r3, [pc, #200]	@ (80027e0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002716:	6a1b      	ldr	r3, [r3, #32]
 8002718:	4a33      	ldr	r2, [pc, #204]	@ (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 800271a:	4013      	ands	r3, r2
 800271c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800271e:	4b30      	ldr	r3, [pc, #192]	@ (80027e0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002720:	6a1a      	ldr	r2, [r3, #32]
 8002722:	4b2f      	ldr	r3, [pc, #188]	@ (80027e0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002724:	2180      	movs	r1, #128	@ 0x80
 8002726:	0249      	lsls	r1, r1, #9
 8002728:	430a      	orrs	r2, r1
 800272a:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800272c:	4b2c      	ldr	r3, [pc, #176]	@ (80027e0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800272e:	6a1a      	ldr	r2, [r3, #32]
 8002730:	4b2b      	ldr	r3, [pc, #172]	@ (80027e0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002732:	492e      	ldr	r1, [pc, #184]	@ (80027ec <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8002734:	400a      	ands	r2, r1
 8002736:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002738:	4b29      	ldr	r3, [pc, #164]	@ (80027e0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800273a:	68fa      	ldr	r2, [r7, #12]
 800273c:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	2201      	movs	r2, #1
 8002742:	4013      	ands	r3, r2
 8002744:	d013      	beq.n	800276e <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002746:	f7fe fc21 	bl	8000f8c <HAL_GetTick>
 800274a:	0003      	movs	r3, r0
 800274c:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800274e:	e009      	b.n	8002764 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002750:	f7fe fc1c 	bl	8000f8c <HAL_GetTick>
 8002754:	0002      	movs	r2, r0
 8002756:	693b      	ldr	r3, [r7, #16]
 8002758:	1ad3      	subs	r3, r2, r3
 800275a:	4a25      	ldr	r2, [pc, #148]	@ (80027f0 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 800275c:	4293      	cmp	r3, r2
 800275e:	d901      	bls.n	8002764 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002760:	2303      	movs	r3, #3
 8002762:	e038      	b.n	80027d6 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002764:	4b1e      	ldr	r3, [pc, #120]	@ (80027e0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002766:	6a1b      	ldr	r3, [r3, #32]
 8002768:	2202      	movs	r2, #2
 800276a:	4013      	ands	r3, r2
 800276c:	d0f0      	beq.n	8002750 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800276e:	4b1c      	ldr	r3, [pc, #112]	@ (80027e0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002770:	6a1b      	ldr	r3, [r3, #32]
 8002772:	4a1d      	ldr	r2, [pc, #116]	@ (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8002774:	4013      	ands	r3, r2
 8002776:	0019      	movs	r1, r3
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	685a      	ldr	r2, [r3, #4]
 800277c:	4b18      	ldr	r3, [pc, #96]	@ (80027e0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800277e:	430a      	orrs	r2, r1
 8002780:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002782:	2317      	movs	r3, #23
 8002784:	18fb      	adds	r3, r7, r3
 8002786:	781b      	ldrb	r3, [r3, #0]
 8002788:	2b01      	cmp	r3, #1
 800278a:	d105      	bne.n	8002798 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800278c:	4b14      	ldr	r3, [pc, #80]	@ (80027e0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800278e:	69da      	ldr	r2, [r3, #28]
 8002790:	4b13      	ldr	r3, [pc, #76]	@ (80027e0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002792:	4918      	ldr	r1, [pc, #96]	@ (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8002794:	400a      	ands	r2, r1
 8002796:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	2201      	movs	r2, #1
 800279e:	4013      	ands	r3, r2
 80027a0:	d009      	beq.n	80027b6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80027a2:	4b0f      	ldr	r3, [pc, #60]	@ (80027e0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80027a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027a6:	2203      	movs	r2, #3
 80027a8:	4393      	bics	r3, r2
 80027aa:	0019      	movs	r1, r3
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	689a      	ldr	r2, [r3, #8]
 80027b0:	4b0b      	ldr	r3, [pc, #44]	@ (80027e0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80027b2:	430a      	orrs	r2, r1
 80027b4:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	2220      	movs	r2, #32
 80027bc:	4013      	ands	r3, r2
 80027be:	d009      	beq.n	80027d4 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80027c0:	4b07      	ldr	r3, [pc, #28]	@ (80027e0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80027c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027c4:	2210      	movs	r2, #16
 80027c6:	4393      	bics	r3, r2
 80027c8:	0019      	movs	r1, r3
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	68da      	ldr	r2, [r3, #12]
 80027ce:	4b04      	ldr	r3, [pc, #16]	@ (80027e0 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80027d0:	430a      	orrs	r2, r1
 80027d2:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80027d4:	2300      	movs	r3, #0
}
 80027d6:	0018      	movs	r0, r3
 80027d8:	46bd      	mov	sp, r7
 80027da:	b006      	add	sp, #24
 80027dc:	bd80      	pop	{r7, pc}
 80027de:	46c0      	nop			@ (mov r8, r8)
 80027e0:	40021000 	.word	0x40021000
 80027e4:	40007000 	.word	0x40007000
 80027e8:	fffffcff 	.word	0xfffffcff
 80027ec:	fffeffff 	.word	0xfffeffff
 80027f0:	00001388 	.word	0x00001388
 80027f4:	efffffff 	.word	0xefffffff

080027f8 <siprintf>:
 80027f8:	b40e      	push	{r1, r2, r3}
 80027fa:	b510      	push	{r4, lr}
 80027fc:	2400      	movs	r4, #0
 80027fe:	490c      	ldr	r1, [pc, #48]	@ (8002830 <siprintf+0x38>)
 8002800:	b09d      	sub	sp, #116	@ 0x74
 8002802:	ab1f      	add	r3, sp, #124	@ 0x7c
 8002804:	9002      	str	r0, [sp, #8]
 8002806:	9006      	str	r0, [sp, #24]
 8002808:	9107      	str	r1, [sp, #28]
 800280a:	9104      	str	r1, [sp, #16]
 800280c:	4809      	ldr	r0, [pc, #36]	@ (8002834 <siprintf+0x3c>)
 800280e:	490a      	ldr	r1, [pc, #40]	@ (8002838 <siprintf+0x40>)
 8002810:	cb04      	ldmia	r3!, {r2}
 8002812:	9105      	str	r1, [sp, #20]
 8002814:	6800      	ldr	r0, [r0, #0]
 8002816:	a902      	add	r1, sp, #8
 8002818:	9301      	str	r3, [sp, #4]
 800281a:	941b      	str	r4, [sp, #108]	@ 0x6c
 800281c:	f000 f8a2 	bl	8002964 <_svfiprintf_r>
 8002820:	9b02      	ldr	r3, [sp, #8]
 8002822:	701c      	strb	r4, [r3, #0]
 8002824:	b01d      	add	sp, #116	@ 0x74
 8002826:	bc10      	pop	{r4}
 8002828:	bc08      	pop	{r3}
 800282a:	b003      	add	sp, #12
 800282c:	4718      	bx	r3
 800282e:	46c0      	nop			@ (mov r8, r8)
 8002830:	7fffffff 	.word	0x7fffffff
 8002834:	20000020 	.word	0x20000020
 8002838:	ffff0208 	.word	0xffff0208

0800283c <memset>:
 800283c:	0003      	movs	r3, r0
 800283e:	1882      	adds	r2, r0, r2
 8002840:	4293      	cmp	r3, r2
 8002842:	d100      	bne.n	8002846 <memset+0xa>
 8002844:	4770      	bx	lr
 8002846:	7019      	strb	r1, [r3, #0]
 8002848:	3301      	adds	r3, #1
 800284a:	e7f9      	b.n	8002840 <memset+0x4>

0800284c <__errno>:
 800284c:	4b01      	ldr	r3, [pc, #4]	@ (8002854 <__errno+0x8>)
 800284e:	6818      	ldr	r0, [r3, #0]
 8002850:	4770      	bx	lr
 8002852:	46c0      	nop			@ (mov r8, r8)
 8002854:	20000020 	.word	0x20000020

08002858 <__libc_init_array>:
 8002858:	b570      	push	{r4, r5, r6, lr}
 800285a:	2600      	movs	r6, #0
 800285c:	4c0c      	ldr	r4, [pc, #48]	@ (8002890 <__libc_init_array+0x38>)
 800285e:	4d0d      	ldr	r5, [pc, #52]	@ (8002894 <__libc_init_array+0x3c>)
 8002860:	1b64      	subs	r4, r4, r5
 8002862:	10a4      	asrs	r4, r4, #2
 8002864:	42a6      	cmp	r6, r4
 8002866:	d109      	bne.n	800287c <__libc_init_array+0x24>
 8002868:	2600      	movs	r6, #0
 800286a:	f000 fc61 	bl	8003130 <_init>
 800286e:	4c0a      	ldr	r4, [pc, #40]	@ (8002898 <__libc_init_array+0x40>)
 8002870:	4d0a      	ldr	r5, [pc, #40]	@ (800289c <__libc_init_array+0x44>)
 8002872:	1b64      	subs	r4, r4, r5
 8002874:	10a4      	asrs	r4, r4, #2
 8002876:	42a6      	cmp	r6, r4
 8002878:	d105      	bne.n	8002886 <__libc_init_array+0x2e>
 800287a:	bd70      	pop	{r4, r5, r6, pc}
 800287c:	00b3      	lsls	r3, r6, #2
 800287e:	58eb      	ldr	r3, [r5, r3]
 8002880:	4798      	blx	r3
 8002882:	3601      	adds	r6, #1
 8002884:	e7ee      	b.n	8002864 <__libc_init_array+0xc>
 8002886:	00b3      	lsls	r3, r6, #2
 8002888:	58eb      	ldr	r3, [r5, r3]
 800288a:	4798      	blx	r3
 800288c:	3601      	adds	r6, #1
 800288e:	e7f2      	b.n	8002876 <__libc_init_array+0x1e>
 8002890:	08003200 	.word	0x08003200
 8002894:	08003200 	.word	0x08003200
 8002898:	08003204 	.word	0x08003204
 800289c:	08003200 	.word	0x08003200

080028a0 <__retarget_lock_acquire_recursive>:
 80028a0:	4770      	bx	lr

080028a2 <__retarget_lock_release_recursive>:
 80028a2:	4770      	bx	lr

080028a4 <__ssputs_r>:
 80028a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80028a6:	688e      	ldr	r6, [r1, #8]
 80028a8:	b085      	sub	sp, #20
 80028aa:	001f      	movs	r7, r3
 80028ac:	000c      	movs	r4, r1
 80028ae:	680b      	ldr	r3, [r1, #0]
 80028b0:	9002      	str	r0, [sp, #8]
 80028b2:	9203      	str	r2, [sp, #12]
 80028b4:	42be      	cmp	r6, r7
 80028b6:	d830      	bhi.n	800291a <__ssputs_r+0x76>
 80028b8:	210c      	movs	r1, #12
 80028ba:	5e62      	ldrsh	r2, [r4, r1]
 80028bc:	2190      	movs	r1, #144	@ 0x90
 80028be:	00c9      	lsls	r1, r1, #3
 80028c0:	420a      	tst	r2, r1
 80028c2:	d028      	beq.n	8002916 <__ssputs_r+0x72>
 80028c4:	2003      	movs	r0, #3
 80028c6:	6921      	ldr	r1, [r4, #16]
 80028c8:	1a5b      	subs	r3, r3, r1
 80028ca:	9301      	str	r3, [sp, #4]
 80028cc:	6963      	ldr	r3, [r4, #20]
 80028ce:	4343      	muls	r3, r0
 80028d0:	9801      	ldr	r0, [sp, #4]
 80028d2:	0fdd      	lsrs	r5, r3, #31
 80028d4:	18ed      	adds	r5, r5, r3
 80028d6:	1c7b      	adds	r3, r7, #1
 80028d8:	181b      	adds	r3, r3, r0
 80028da:	106d      	asrs	r5, r5, #1
 80028dc:	42ab      	cmp	r3, r5
 80028de:	d900      	bls.n	80028e2 <__ssputs_r+0x3e>
 80028e0:	001d      	movs	r5, r3
 80028e2:	0552      	lsls	r2, r2, #21
 80028e4:	d528      	bpl.n	8002938 <__ssputs_r+0x94>
 80028e6:	0029      	movs	r1, r5
 80028e8:	9802      	ldr	r0, [sp, #8]
 80028ea:	f000 f95b 	bl	8002ba4 <_malloc_r>
 80028ee:	1e06      	subs	r6, r0, #0
 80028f0:	d02c      	beq.n	800294c <__ssputs_r+0xa8>
 80028f2:	9a01      	ldr	r2, [sp, #4]
 80028f4:	6921      	ldr	r1, [r4, #16]
 80028f6:	f000 fbc0 	bl	800307a <memcpy>
 80028fa:	89a2      	ldrh	r2, [r4, #12]
 80028fc:	4b18      	ldr	r3, [pc, #96]	@ (8002960 <__ssputs_r+0xbc>)
 80028fe:	401a      	ands	r2, r3
 8002900:	2380      	movs	r3, #128	@ 0x80
 8002902:	4313      	orrs	r3, r2
 8002904:	81a3      	strh	r3, [r4, #12]
 8002906:	9b01      	ldr	r3, [sp, #4]
 8002908:	6126      	str	r6, [r4, #16]
 800290a:	18f6      	adds	r6, r6, r3
 800290c:	6026      	str	r6, [r4, #0]
 800290e:	003e      	movs	r6, r7
 8002910:	6165      	str	r5, [r4, #20]
 8002912:	1aed      	subs	r5, r5, r3
 8002914:	60a5      	str	r5, [r4, #8]
 8002916:	42be      	cmp	r6, r7
 8002918:	d900      	bls.n	800291c <__ssputs_r+0x78>
 800291a:	003e      	movs	r6, r7
 800291c:	0032      	movs	r2, r6
 800291e:	9903      	ldr	r1, [sp, #12]
 8002920:	6820      	ldr	r0, [r4, #0]
 8002922:	f000 fb7b 	bl	800301c <memmove>
 8002926:	2000      	movs	r0, #0
 8002928:	68a3      	ldr	r3, [r4, #8]
 800292a:	1b9b      	subs	r3, r3, r6
 800292c:	60a3      	str	r3, [r4, #8]
 800292e:	6823      	ldr	r3, [r4, #0]
 8002930:	199b      	adds	r3, r3, r6
 8002932:	6023      	str	r3, [r4, #0]
 8002934:	b005      	add	sp, #20
 8002936:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002938:	002a      	movs	r2, r5
 800293a:	9802      	ldr	r0, [sp, #8]
 800293c:	f000 fb3e 	bl	8002fbc <_realloc_r>
 8002940:	1e06      	subs	r6, r0, #0
 8002942:	d1e0      	bne.n	8002906 <__ssputs_r+0x62>
 8002944:	6921      	ldr	r1, [r4, #16]
 8002946:	9802      	ldr	r0, [sp, #8]
 8002948:	f000 fba0 	bl	800308c <_free_r>
 800294c:	230c      	movs	r3, #12
 800294e:	2001      	movs	r0, #1
 8002950:	9a02      	ldr	r2, [sp, #8]
 8002952:	4240      	negs	r0, r0
 8002954:	6013      	str	r3, [r2, #0]
 8002956:	89a2      	ldrh	r2, [r4, #12]
 8002958:	3334      	adds	r3, #52	@ 0x34
 800295a:	4313      	orrs	r3, r2
 800295c:	81a3      	strh	r3, [r4, #12]
 800295e:	e7e9      	b.n	8002934 <__ssputs_r+0x90>
 8002960:	fffffb7f 	.word	0xfffffb7f

08002964 <_svfiprintf_r>:
 8002964:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002966:	b0a1      	sub	sp, #132	@ 0x84
 8002968:	9003      	str	r0, [sp, #12]
 800296a:	001d      	movs	r5, r3
 800296c:	898b      	ldrh	r3, [r1, #12]
 800296e:	000f      	movs	r7, r1
 8002970:	0016      	movs	r6, r2
 8002972:	061b      	lsls	r3, r3, #24
 8002974:	d511      	bpl.n	800299a <_svfiprintf_r+0x36>
 8002976:	690b      	ldr	r3, [r1, #16]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d10e      	bne.n	800299a <_svfiprintf_r+0x36>
 800297c:	2140      	movs	r1, #64	@ 0x40
 800297e:	f000 f911 	bl	8002ba4 <_malloc_r>
 8002982:	6038      	str	r0, [r7, #0]
 8002984:	6138      	str	r0, [r7, #16]
 8002986:	2800      	cmp	r0, #0
 8002988:	d105      	bne.n	8002996 <_svfiprintf_r+0x32>
 800298a:	230c      	movs	r3, #12
 800298c:	9a03      	ldr	r2, [sp, #12]
 800298e:	6013      	str	r3, [r2, #0]
 8002990:	2001      	movs	r0, #1
 8002992:	4240      	negs	r0, r0
 8002994:	e0cf      	b.n	8002b36 <_svfiprintf_r+0x1d2>
 8002996:	2340      	movs	r3, #64	@ 0x40
 8002998:	617b      	str	r3, [r7, #20]
 800299a:	2300      	movs	r3, #0
 800299c:	ac08      	add	r4, sp, #32
 800299e:	6163      	str	r3, [r4, #20]
 80029a0:	3320      	adds	r3, #32
 80029a2:	7663      	strb	r3, [r4, #25]
 80029a4:	3310      	adds	r3, #16
 80029a6:	76a3      	strb	r3, [r4, #26]
 80029a8:	9507      	str	r5, [sp, #28]
 80029aa:	0035      	movs	r5, r6
 80029ac:	782b      	ldrb	r3, [r5, #0]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d001      	beq.n	80029b6 <_svfiprintf_r+0x52>
 80029b2:	2b25      	cmp	r3, #37	@ 0x25
 80029b4:	d148      	bne.n	8002a48 <_svfiprintf_r+0xe4>
 80029b6:	1bab      	subs	r3, r5, r6
 80029b8:	9305      	str	r3, [sp, #20]
 80029ba:	42b5      	cmp	r5, r6
 80029bc:	d00b      	beq.n	80029d6 <_svfiprintf_r+0x72>
 80029be:	0032      	movs	r2, r6
 80029c0:	0039      	movs	r1, r7
 80029c2:	9803      	ldr	r0, [sp, #12]
 80029c4:	f7ff ff6e 	bl	80028a4 <__ssputs_r>
 80029c8:	3001      	adds	r0, #1
 80029ca:	d100      	bne.n	80029ce <_svfiprintf_r+0x6a>
 80029cc:	e0ae      	b.n	8002b2c <_svfiprintf_r+0x1c8>
 80029ce:	6963      	ldr	r3, [r4, #20]
 80029d0:	9a05      	ldr	r2, [sp, #20]
 80029d2:	189b      	adds	r3, r3, r2
 80029d4:	6163      	str	r3, [r4, #20]
 80029d6:	782b      	ldrb	r3, [r5, #0]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d100      	bne.n	80029de <_svfiprintf_r+0x7a>
 80029dc:	e0a6      	b.n	8002b2c <_svfiprintf_r+0x1c8>
 80029de:	2201      	movs	r2, #1
 80029e0:	2300      	movs	r3, #0
 80029e2:	4252      	negs	r2, r2
 80029e4:	6062      	str	r2, [r4, #4]
 80029e6:	a904      	add	r1, sp, #16
 80029e8:	3254      	adds	r2, #84	@ 0x54
 80029ea:	1852      	adds	r2, r2, r1
 80029ec:	1c6e      	adds	r6, r5, #1
 80029ee:	6023      	str	r3, [r4, #0]
 80029f0:	60e3      	str	r3, [r4, #12]
 80029f2:	60a3      	str	r3, [r4, #8]
 80029f4:	7013      	strb	r3, [r2, #0]
 80029f6:	65a3      	str	r3, [r4, #88]	@ 0x58
 80029f8:	4b54      	ldr	r3, [pc, #336]	@ (8002b4c <_svfiprintf_r+0x1e8>)
 80029fa:	2205      	movs	r2, #5
 80029fc:	0018      	movs	r0, r3
 80029fe:	7831      	ldrb	r1, [r6, #0]
 8002a00:	9305      	str	r3, [sp, #20]
 8002a02:	f000 fb2f 	bl	8003064 <memchr>
 8002a06:	1c75      	adds	r5, r6, #1
 8002a08:	2800      	cmp	r0, #0
 8002a0a:	d11f      	bne.n	8002a4c <_svfiprintf_r+0xe8>
 8002a0c:	6822      	ldr	r2, [r4, #0]
 8002a0e:	06d3      	lsls	r3, r2, #27
 8002a10:	d504      	bpl.n	8002a1c <_svfiprintf_r+0xb8>
 8002a12:	2353      	movs	r3, #83	@ 0x53
 8002a14:	a904      	add	r1, sp, #16
 8002a16:	185b      	adds	r3, r3, r1
 8002a18:	2120      	movs	r1, #32
 8002a1a:	7019      	strb	r1, [r3, #0]
 8002a1c:	0713      	lsls	r3, r2, #28
 8002a1e:	d504      	bpl.n	8002a2a <_svfiprintf_r+0xc6>
 8002a20:	2353      	movs	r3, #83	@ 0x53
 8002a22:	a904      	add	r1, sp, #16
 8002a24:	185b      	adds	r3, r3, r1
 8002a26:	212b      	movs	r1, #43	@ 0x2b
 8002a28:	7019      	strb	r1, [r3, #0]
 8002a2a:	7833      	ldrb	r3, [r6, #0]
 8002a2c:	2b2a      	cmp	r3, #42	@ 0x2a
 8002a2e:	d016      	beq.n	8002a5e <_svfiprintf_r+0xfa>
 8002a30:	0035      	movs	r5, r6
 8002a32:	2100      	movs	r1, #0
 8002a34:	200a      	movs	r0, #10
 8002a36:	68e3      	ldr	r3, [r4, #12]
 8002a38:	782a      	ldrb	r2, [r5, #0]
 8002a3a:	1c6e      	adds	r6, r5, #1
 8002a3c:	3a30      	subs	r2, #48	@ 0x30
 8002a3e:	2a09      	cmp	r2, #9
 8002a40:	d950      	bls.n	8002ae4 <_svfiprintf_r+0x180>
 8002a42:	2900      	cmp	r1, #0
 8002a44:	d111      	bne.n	8002a6a <_svfiprintf_r+0x106>
 8002a46:	e017      	b.n	8002a78 <_svfiprintf_r+0x114>
 8002a48:	3501      	adds	r5, #1
 8002a4a:	e7af      	b.n	80029ac <_svfiprintf_r+0x48>
 8002a4c:	9b05      	ldr	r3, [sp, #20]
 8002a4e:	6822      	ldr	r2, [r4, #0]
 8002a50:	1ac0      	subs	r0, r0, r3
 8002a52:	2301      	movs	r3, #1
 8002a54:	4083      	lsls	r3, r0
 8002a56:	4313      	orrs	r3, r2
 8002a58:	002e      	movs	r6, r5
 8002a5a:	6023      	str	r3, [r4, #0]
 8002a5c:	e7cc      	b.n	80029f8 <_svfiprintf_r+0x94>
 8002a5e:	9b07      	ldr	r3, [sp, #28]
 8002a60:	1d19      	adds	r1, r3, #4
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	9107      	str	r1, [sp, #28]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	db01      	blt.n	8002a6e <_svfiprintf_r+0x10a>
 8002a6a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8002a6c:	e004      	b.n	8002a78 <_svfiprintf_r+0x114>
 8002a6e:	425b      	negs	r3, r3
 8002a70:	60e3      	str	r3, [r4, #12]
 8002a72:	2302      	movs	r3, #2
 8002a74:	4313      	orrs	r3, r2
 8002a76:	6023      	str	r3, [r4, #0]
 8002a78:	782b      	ldrb	r3, [r5, #0]
 8002a7a:	2b2e      	cmp	r3, #46	@ 0x2e
 8002a7c:	d10c      	bne.n	8002a98 <_svfiprintf_r+0x134>
 8002a7e:	786b      	ldrb	r3, [r5, #1]
 8002a80:	2b2a      	cmp	r3, #42	@ 0x2a
 8002a82:	d134      	bne.n	8002aee <_svfiprintf_r+0x18a>
 8002a84:	9b07      	ldr	r3, [sp, #28]
 8002a86:	3502      	adds	r5, #2
 8002a88:	1d1a      	adds	r2, r3, #4
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	9207      	str	r2, [sp, #28]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	da01      	bge.n	8002a96 <_svfiprintf_r+0x132>
 8002a92:	2301      	movs	r3, #1
 8002a94:	425b      	negs	r3, r3
 8002a96:	9309      	str	r3, [sp, #36]	@ 0x24
 8002a98:	4e2d      	ldr	r6, [pc, #180]	@ (8002b50 <_svfiprintf_r+0x1ec>)
 8002a9a:	2203      	movs	r2, #3
 8002a9c:	0030      	movs	r0, r6
 8002a9e:	7829      	ldrb	r1, [r5, #0]
 8002aa0:	f000 fae0 	bl	8003064 <memchr>
 8002aa4:	2800      	cmp	r0, #0
 8002aa6:	d006      	beq.n	8002ab6 <_svfiprintf_r+0x152>
 8002aa8:	2340      	movs	r3, #64	@ 0x40
 8002aaa:	1b80      	subs	r0, r0, r6
 8002aac:	4083      	lsls	r3, r0
 8002aae:	6822      	ldr	r2, [r4, #0]
 8002ab0:	3501      	adds	r5, #1
 8002ab2:	4313      	orrs	r3, r2
 8002ab4:	6023      	str	r3, [r4, #0]
 8002ab6:	7829      	ldrb	r1, [r5, #0]
 8002ab8:	2206      	movs	r2, #6
 8002aba:	4826      	ldr	r0, [pc, #152]	@ (8002b54 <_svfiprintf_r+0x1f0>)
 8002abc:	1c6e      	adds	r6, r5, #1
 8002abe:	7621      	strb	r1, [r4, #24]
 8002ac0:	f000 fad0 	bl	8003064 <memchr>
 8002ac4:	2800      	cmp	r0, #0
 8002ac6:	d038      	beq.n	8002b3a <_svfiprintf_r+0x1d6>
 8002ac8:	4b23      	ldr	r3, [pc, #140]	@ (8002b58 <_svfiprintf_r+0x1f4>)
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d122      	bne.n	8002b14 <_svfiprintf_r+0x1b0>
 8002ace:	2207      	movs	r2, #7
 8002ad0:	9b07      	ldr	r3, [sp, #28]
 8002ad2:	3307      	adds	r3, #7
 8002ad4:	4393      	bics	r3, r2
 8002ad6:	3308      	adds	r3, #8
 8002ad8:	9307      	str	r3, [sp, #28]
 8002ada:	6963      	ldr	r3, [r4, #20]
 8002adc:	9a04      	ldr	r2, [sp, #16]
 8002ade:	189b      	adds	r3, r3, r2
 8002ae0:	6163      	str	r3, [r4, #20]
 8002ae2:	e762      	b.n	80029aa <_svfiprintf_r+0x46>
 8002ae4:	4343      	muls	r3, r0
 8002ae6:	0035      	movs	r5, r6
 8002ae8:	2101      	movs	r1, #1
 8002aea:	189b      	adds	r3, r3, r2
 8002aec:	e7a4      	b.n	8002a38 <_svfiprintf_r+0xd4>
 8002aee:	2300      	movs	r3, #0
 8002af0:	200a      	movs	r0, #10
 8002af2:	0019      	movs	r1, r3
 8002af4:	3501      	adds	r5, #1
 8002af6:	6063      	str	r3, [r4, #4]
 8002af8:	782a      	ldrb	r2, [r5, #0]
 8002afa:	1c6e      	adds	r6, r5, #1
 8002afc:	3a30      	subs	r2, #48	@ 0x30
 8002afe:	2a09      	cmp	r2, #9
 8002b00:	d903      	bls.n	8002b0a <_svfiprintf_r+0x1a6>
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d0c8      	beq.n	8002a98 <_svfiprintf_r+0x134>
 8002b06:	9109      	str	r1, [sp, #36]	@ 0x24
 8002b08:	e7c6      	b.n	8002a98 <_svfiprintf_r+0x134>
 8002b0a:	4341      	muls	r1, r0
 8002b0c:	0035      	movs	r5, r6
 8002b0e:	2301      	movs	r3, #1
 8002b10:	1889      	adds	r1, r1, r2
 8002b12:	e7f1      	b.n	8002af8 <_svfiprintf_r+0x194>
 8002b14:	aa07      	add	r2, sp, #28
 8002b16:	9200      	str	r2, [sp, #0]
 8002b18:	0021      	movs	r1, r4
 8002b1a:	003a      	movs	r2, r7
 8002b1c:	4b0f      	ldr	r3, [pc, #60]	@ (8002b5c <_svfiprintf_r+0x1f8>)
 8002b1e:	9803      	ldr	r0, [sp, #12]
 8002b20:	e000      	b.n	8002b24 <_svfiprintf_r+0x1c0>
 8002b22:	bf00      	nop
 8002b24:	9004      	str	r0, [sp, #16]
 8002b26:	9b04      	ldr	r3, [sp, #16]
 8002b28:	3301      	adds	r3, #1
 8002b2a:	d1d6      	bne.n	8002ada <_svfiprintf_r+0x176>
 8002b2c:	89bb      	ldrh	r3, [r7, #12]
 8002b2e:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8002b30:	065b      	lsls	r3, r3, #25
 8002b32:	d500      	bpl.n	8002b36 <_svfiprintf_r+0x1d2>
 8002b34:	e72c      	b.n	8002990 <_svfiprintf_r+0x2c>
 8002b36:	b021      	add	sp, #132	@ 0x84
 8002b38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002b3a:	aa07      	add	r2, sp, #28
 8002b3c:	9200      	str	r2, [sp, #0]
 8002b3e:	0021      	movs	r1, r4
 8002b40:	003a      	movs	r2, r7
 8002b42:	4b06      	ldr	r3, [pc, #24]	@ (8002b5c <_svfiprintf_r+0x1f8>)
 8002b44:	9803      	ldr	r0, [sp, #12]
 8002b46:	f000 f91d 	bl	8002d84 <_printf_i>
 8002b4a:	e7eb      	b.n	8002b24 <_svfiprintf_r+0x1c0>
 8002b4c:	080031cc 	.word	0x080031cc
 8002b50:	080031d2 	.word	0x080031d2
 8002b54:	080031d6 	.word	0x080031d6
 8002b58:	00000000 	.word	0x00000000
 8002b5c:	080028a5 	.word	0x080028a5

08002b60 <sbrk_aligned>:
 8002b60:	b570      	push	{r4, r5, r6, lr}
 8002b62:	4e0f      	ldr	r6, [pc, #60]	@ (8002ba0 <sbrk_aligned+0x40>)
 8002b64:	000d      	movs	r5, r1
 8002b66:	6831      	ldr	r1, [r6, #0]
 8002b68:	0004      	movs	r4, r0
 8002b6a:	2900      	cmp	r1, #0
 8002b6c:	d102      	bne.n	8002b74 <sbrk_aligned+0x14>
 8002b6e:	f000 fa67 	bl	8003040 <_sbrk_r>
 8002b72:	6030      	str	r0, [r6, #0]
 8002b74:	0029      	movs	r1, r5
 8002b76:	0020      	movs	r0, r4
 8002b78:	f000 fa62 	bl	8003040 <_sbrk_r>
 8002b7c:	1c43      	adds	r3, r0, #1
 8002b7e:	d103      	bne.n	8002b88 <sbrk_aligned+0x28>
 8002b80:	2501      	movs	r5, #1
 8002b82:	426d      	negs	r5, r5
 8002b84:	0028      	movs	r0, r5
 8002b86:	bd70      	pop	{r4, r5, r6, pc}
 8002b88:	2303      	movs	r3, #3
 8002b8a:	1cc5      	adds	r5, r0, #3
 8002b8c:	439d      	bics	r5, r3
 8002b8e:	42a8      	cmp	r0, r5
 8002b90:	d0f8      	beq.n	8002b84 <sbrk_aligned+0x24>
 8002b92:	1a29      	subs	r1, r5, r0
 8002b94:	0020      	movs	r0, r4
 8002b96:	f000 fa53 	bl	8003040 <_sbrk_r>
 8002b9a:	3001      	adds	r0, #1
 8002b9c:	d1f2      	bne.n	8002b84 <sbrk_aligned+0x24>
 8002b9e:	e7ef      	b.n	8002b80 <sbrk_aligned+0x20>
 8002ba0:	20000234 	.word	0x20000234

08002ba4 <_malloc_r>:
 8002ba4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002ba6:	2203      	movs	r2, #3
 8002ba8:	1ccb      	adds	r3, r1, #3
 8002baa:	4393      	bics	r3, r2
 8002bac:	3308      	adds	r3, #8
 8002bae:	0005      	movs	r5, r0
 8002bb0:	001f      	movs	r7, r3
 8002bb2:	2b0c      	cmp	r3, #12
 8002bb4:	d234      	bcs.n	8002c20 <_malloc_r+0x7c>
 8002bb6:	270c      	movs	r7, #12
 8002bb8:	42b9      	cmp	r1, r7
 8002bba:	d833      	bhi.n	8002c24 <_malloc_r+0x80>
 8002bbc:	0028      	movs	r0, r5
 8002bbe:	f000 f9ed 	bl	8002f9c <__malloc_lock>
 8002bc2:	4e37      	ldr	r6, [pc, #220]	@ (8002ca0 <_malloc_r+0xfc>)
 8002bc4:	6833      	ldr	r3, [r6, #0]
 8002bc6:	001c      	movs	r4, r3
 8002bc8:	2c00      	cmp	r4, #0
 8002bca:	d12f      	bne.n	8002c2c <_malloc_r+0x88>
 8002bcc:	0039      	movs	r1, r7
 8002bce:	0028      	movs	r0, r5
 8002bd0:	f7ff ffc6 	bl	8002b60 <sbrk_aligned>
 8002bd4:	0004      	movs	r4, r0
 8002bd6:	1c43      	adds	r3, r0, #1
 8002bd8:	d15f      	bne.n	8002c9a <_malloc_r+0xf6>
 8002bda:	6834      	ldr	r4, [r6, #0]
 8002bdc:	9400      	str	r4, [sp, #0]
 8002bde:	9b00      	ldr	r3, [sp, #0]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d14a      	bne.n	8002c7a <_malloc_r+0xd6>
 8002be4:	2c00      	cmp	r4, #0
 8002be6:	d052      	beq.n	8002c8e <_malloc_r+0xea>
 8002be8:	6823      	ldr	r3, [r4, #0]
 8002bea:	0028      	movs	r0, r5
 8002bec:	18e3      	adds	r3, r4, r3
 8002bee:	9900      	ldr	r1, [sp, #0]
 8002bf0:	9301      	str	r3, [sp, #4]
 8002bf2:	f000 fa25 	bl	8003040 <_sbrk_r>
 8002bf6:	9b01      	ldr	r3, [sp, #4]
 8002bf8:	4283      	cmp	r3, r0
 8002bfa:	d148      	bne.n	8002c8e <_malloc_r+0xea>
 8002bfc:	6823      	ldr	r3, [r4, #0]
 8002bfe:	0028      	movs	r0, r5
 8002c00:	1aff      	subs	r7, r7, r3
 8002c02:	0039      	movs	r1, r7
 8002c04:	f7ff ffac 	bl	8002b60 <sbrk_aligned>
 8002c08:	3001      	adds	r0, #1
 8002c0a:	d040      	beq.n	8002c8e <_malloc_r+0xea>
 8002c0c:	6823      	ldr	r3, [r4, #0]
 8002c0e:	19db      	adds	r3, r3, r7
 8002c10:	6023      	str	r3, [r4, #0]
 8002c12:	6833      	ldr	r3, [r6, #0]
 8002c14:	685a      	ldr	r2, [r3, #4]
 8002c16:	2a00      	cmp	r2, #0
 8002c18:	d133      	bne.n	8002c82 <_malloc_r+0xde>
 8002c1a:	9b00      	ldr	r3, [sp, #0]
 8002c1c:	6033      	str	r3, [r6, #0]
 8002c1e:	e019      	b.n	8002c54 <_malloc_r+0xb0>
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	dac9      	bge.n	8002bb8 <_malloc_r+0x14>
 8002c24:	230c      	movs	r3, #12
 8002c26:	602b      	str	r3, [r5, #0]
 8002c28:	2000      	movs	r0, #0
 8002c2a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002c2c:	6821      	ldr	r1, [r4, #0]
 8002c2e:	1bc9      	subs	r1, r1, r7
 8002c30:	d420      	bmi.n	8002c74 <_malloc_r+0xd0>
 8002c32:	290b      	cmp	r1, #11
 8002c34:	d90a      	bls.n	8002c4c <_malloc_r+0xa8>
 8002c36:	19e2      	adds	r2, r4, r7
 8002c38:	6027      	str	r7, [r4, #0]
 8002c3a:	42a3      	cmp	r3, r4
 8002c3c:	d104      	bne.n	8002c48 <_malloc_r+0xa4>
 8002c3e:	6032      	str	r2, [r6, #0]
 8002c40:	6863      	ldr	r3, [r4, #4]
 8002c42:	6011      	str	r1, [r2, #0]
 8002c44:	6053      	str	r3, [r2, #4]
 8002c46:	e005      	b.n	8002c54 <_malloc_r+0xb0>
 8002c48:	605a      	str	r2, [r3, #4]
 8002c4a:	e7f9      	b.n	8002c40 <_malloc_r+0x9c>
 8002c4c:	6862      	ldr	r2, [r4, #4]
 8002c4e:	42a3      	cmp	r3, r4
 8002c50:	d10e      	bne.n	8002c70 <_malloc_r+0xcc>
 8002c52:	6032      	str	r2, [r6, #0]
 8002c54:	0028      	movs	r0, r5
 8002c56:	f000 f9a9 	bl	8002fac <__malloc_unlock>
 8002c5a:	0020      	movs	r0, r4
 8002c5c:	2207      	movs	r2, #7
 8002c5e:	300b      	adds	r0, #11
 8002c60:	1d23      	adds	r3, r4, #4
 8002c62:	4390      	bics	r0, r2
 8002c64:	1ac2      	subs	r2, r0, r3
 8002c66:	4298      	cmp	r0, r3
 8002c68:	d0df      	beq.n	8002c2a <_malloc_r+0x86>
 8002c6a:	1a1b      	subs	r3, r3, r0
 8002c6c:	50a3      	str	r3, [r4, r2]
 8002c6e:	e7dc      	b.n	8002c2a <_malloc_r+0x86>
 8002c70:	605a      	str	r2, [r3, #4]
 8002c72:	e7ef      	b.n	8002c54 <_malloc_r+0xb0>
 8002c74:	0023      	movs	r3, r4
 8002c76:	6864      	ldr	r4, [r4, #4]
 8002c78:	e7a6      	b.n	8002bc8 <_malloc_r+0x24>
 8002c7a:	9c00      	ldr	r4, [sp, #0]
 8002c7c:	6863      	ldr	r3, [r4, #4]
 8002c7e:	9300      	str	r3, [sp, #0]
 8002c80:	e7ad      	b.n	8002bde <_malloc_r+0x3a>
 8002c82:	001a      	movs	r2, r3
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	42a3      	cmp	r3, r4
 8002c88:	d1fb      	bne.n	8002c82 <_malloc_r+0xde>
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	e7da      	b.n	8002c44 <_malloc_r+0xa0>
 8002c8e:	230c      	movs	r3, #12
 8002c90:	0028      	movs	r0, r5
 8002c92:	602b      	str	r3, [r5, #0]
 8002c94:	f000 f98a 	bl	8002fac <__malloc_unlock>
 8002c98:	e7c6      	b.n	8002c28 <_malloc_r+0x84>
 8002c9a:	6007      	str	r7, [r0, #0]
 8002c9c:	e7da      	b.n	8002c54 <_malloc_r+0xb0>
 8002c9e:	46c0      	nop			@ (mov r8, r8)
 8002ca0:	20000238 	.word	0x20000238

08002ca4 <_printf_common>:
 8002ca4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002ca6:	0016      	movs	r6, r2
 8002ca8:	9301      	str	r3, [sp, #4]
 8002caa:	688a      	ldr	r2, [r1, #8]
 8002cac:	690b      	ldr	r3, [r1, #16]
 8002cae:	000c      	movs	r4, r1
 8002cb0:	9000      	str	r0, [sp, #0]
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	da00      	bge.n	8002cb8 <_printf_common+0x14>
 8002cb6:	0013      	movs	r3, r2
 8002cb8:	0022      	movs	r2, r4
 8002cba:	6033      	str	r3, [r6, #0]
 8002cbc:	3243      	adds	r2, #67	@ 0x43
 8002cbe:	7812      	ldrb	r2, [r2, #0]
 8002cc0:	2a00      	cmp	r2, #0
 8002cc2:	d001      	beq.n	8002cc8 <_printf_common+0x24>
 8002cc4:	3301      	adds	r3, #1
 8002cc6:	6033      	str	r3, [r6, #0]
 8002cc8:	6823      	ldr	r3, [r4, #0]
 8002cca:	069b      	lsls	r3, r3, #26
 8002ccc:	d502      	bpl.n	8002cd4 <_printf_common+0x30>
 8002cce:	6833      	ldr	r3, [r6, #0]
 8002cd0:	3302      	adds	r3, #2
 8002cd2:	6033      	str	r3, [r6, #0]
 8002cd4:	6822      	ldr	r2, [r4, #0]
 8002cd6:	2306      	movs	r3, #6
 8002cd8:	0015      	movs	r5, r2
 8002cda:	401d      	ands	r5, r3
 8002cdc:	421a      	tst	r2, r3
 8002cde:	d027      	beq.n	8002d30 <_printf_common+0x8c>
 8002ce0:	0023      	movs	r3, r4
 8002ce2:	3343      	adds	r3, #67	@ 0x43
 8002ce4:	781b      	ldrb	r3, [r3, #0]
 8002ce6:	1e5a      	subs	r2, r3, #1
 8002ce8:	4193      	sbcs	r3, r2
 8002cea:	6822      	ldr	r2, [r4, #0]
 8002cec:	0692      	lsls	r2, r2, #26
 8002cee:	d430      	bmi.n	8002d52 <_printf_common+0xae>
 8002cf0:	0022      	movs	r2, r4
 8002cf2:	9901      	ldr	r1, [sp, #4]
 8002cf4:	9800      	ldr	r0, [sp, #0]
 8002cf6:	9d08      	ldr	r5, [sp, #32]
 8002cf8:	3243      	adds	r2, #67	@ 0x43
 8002cfa:	47a8      	blx	r5
 8002cfc:	3001      	adds	r0, #1
 8002cfe:	d025      	beq.n	8002d4c <_printf_common+0xa8>
 8002d00:	2206      	movs	r2, #6
 8002d02:	6823      	ldr	r3, [r4, #0]
 8002d04:	2500      	movs	r5, #0
 8002d06:	4013      	ands	r3, r2
 8002d08:	2b04      	cmp	r3, #4
 8002d0a:	d105      	bne.n	8002d18 <_printf_common+0x74>
 8002d0c:	6833      	ldr	r3, [r6, #0]
 8002d0e:	68e5      	ldr	r5, [r4, #12]
 8002d10:	1aed      	subs	r5, r5, r3
 8002d12:	43eb      	mvns	r3, r5
 8002d14:	17db      	asrs	r3, r3, #31
 8002d16:	401d      	ands	r5, r3
 8002d18:	68a3      	ldr	r3, [r4, #8]
 8002d1a:	6922      	ldr	r2, [r4, #16]
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	dd01      	ble.n	8002d24 <_printf_common+0x80>
 8002d20:	1a9b      	subs	r3, r3, r2
 8002d22:	18ed      	adds	r5, r5, r3
 8002d24:	2600      	movs	r6, #0
 8002d26:	42b5      	cmp	r5, r6
 8002d28:	d120      	bne.n	8002d6c <_printf_common+0xc8>
 8002d2a:	2000      	movs	r0, #0
 8002d2c:	e010      	b.n	8002d50 <_printf_common+0xac>
 8002d2e:	3501      	adds	r5, #1
 8002d30:	68e3      	ldr	r3, [r4, #12]
 8002d32:	6832      	ldr	r2, [r6, #0]
 8002d34:	1a9b      	subs	r3, r3, r2
 8002d36:	42ab      	cmp	r3, r5
 8002d38:	ddd2      	ble.n	8002ce0 <_printf_common+0x3c>
 8002d3a:	0022      	movs	r2, r4
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	9901      	ldr	r1, [sp, #4]
 8002d40:	9800      	ldr	r0, [sp, #0]
 8002d42:	9f08      	ldr	r7, [sp, #32]
 8002d44:	3219      	adds	r2, #25
 8002d46:	47b8      	blx	r7
 8002d48:	3001      	adds	r0, #1
 8002d4a:	d1f0      	bne.n	8002d2e <_printf_common+0x8a>
 8002d4c:	2001      	movs	r0, #1
 8002d4e:	4240      	negs	r0, r0
 8002d50:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002d52:	2030      	movs	r0, #48	@ 0x30
 8002d54:	18e1      	adds	r1, r4, r3
 8002d56:	3143      	adds	r1, #67	@ 0x43
 8002d58:	7008      	strb	r0, [r1, #0]
 8002d5a:	0021      	movs	r1, r4
 8002d5c:	1c5a      	adds	r2, r3, #1
 8002d5e:	3145      	adds	r1, #69	@ 0x45
 8002d60:	7809      	ldrb	r1, [r1, #0]
 8002d62:	18a2      	adds	r2, r4, r2
 8002d64:	3243      	adds	r2, #67	@ 0x43
 8002d66:	3302      	adds	r3, #2
 8002d68:	7011      	strb	r1, [r2, #0]
 8002d6a:	e7c1      	b.n	8002cf0 <_printf_common+0x4c>
 8002d6c:	0022      	movs	r2, r4
 8002d6e:	2301      	movs	r3, #1
 8002d70:	9901      	ldr	r1, [sp, #4]
 8002d72:	9800      	ldr	r0, [sp, #0]
 8002d74:	9f08      	ldr	r7, [sp, #32]
 8002d76:	321a      	adds	r2, #26
 8002d78:	47b8      	blx	r7
 8002d7a:	3001      	adds	r0, #1
 8002d7c:	d0e6      	beq.n	8002d4c <_printf_common+0xa8>
 8002d7e:	3601      	adds	r6, #1
 8002d80:	e7d1      	b.n	8002d26 <_printf_common+0x82>
	...

08002d84 <_printf_i>:
 8002d84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d86:	b08b      	sub	sp, #44	@ 0x2c
 8002d88:	9206      	str	r2, [sp, #24]
 8002d8a:	000a      	movs	r2, r1
 8002d8c:	3243      	adds	r2, #67	@ 0x43
 8002d8e:	9307      	str	r3, [sp, #28]
 8002d90:	9005      	str	r0, [sp, #20]
 8002d92:	9203      	str	r2, [sp, #12]
 8002d94:	7e0a      	ldrb	r2, [r1, #24]
 8002d96:	000c      	movs	r4, r1
 8002d98:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8002d9a:	2a78      	cmp	r2, #120	@ 0x78
 8002d9c:	d809      	bhi.n	8002db2 <_printf_i+0x2e>
 8002d9e:	2a62      	cmp	r2, #98	@ 0x62
 8002da0:	d80b      	bhi.n	8002dba <_printf_i+0x36>
 8002da2:	2a00      	cmp	r2, #0
 8002da4:	d100      	bne.n	8002da8 <_printf_i+0x24>
 8002da6:	e0ba      	b.n	8002f1e <_printf_i+0x19a>
 8002da8:	497a      	ldr	r1, [pc, #488]	@ (8002f94 <_printf_i+0x210>)
 8002daa:	9104      	str	r1, [sp, #16]
 8002dac:	2a58      	cmp	r2, #88	@ 0x58
 8002dae:	d100      	bne.n	8002db2 <_printf_i+0x2e>
 8002db0:	e08e      	b.n	8002ed0 <_printf_i+0x14c>
 8002db2:	0025      	movs	r5, r4
 8002db4:	3542      	adds	r5, #66	@ 0x42
 8002db6:	702a      	strb	r2, [r5, #0]
 8002db8:	e022      	b.n	8002e00 <_printf_i+0x7c>
 8002dba:	0010      	movs	r0, r2
 8002dbc:	3863      	subs	r0, #99	@ 0x63
 8002dbe:	2815      	cmp	r0, #21
 8002dc0:	d8f7      	bhi.n	8002db2 <_printf_i+0x2e>
 8002dc2:	f7fd f9a1 	bl	8000108 <__gnu_thumb1_case_shi>
 8002dc6:	0016      	.short	0x0016
 8002dc8:	fff6001f 	.word	0xfff6001f
 8002dcc:	fff6fff6 	.word	0xfff6fff6
 8002dd0:	001ffff6 	.word	0x001ffff6
 8002dd4:	fff6fff6 	.word	0xfff6fff6
 8002dd8:	fff6fff6 	.word	0xfff6fff6
 8002ddc:	0036009f 	.word	0x0036009f
 8002de0:	fff6007e 	.word	0xfff6007e
 8002de4:	00b0fff6 	.word	0x00b0fff6
 8002de8:	0036fff6 	.word	0x0036fff6
 8002dec:	fff6fff6 	.word	0xfff6fff6
 8002df0:	0082      	.short	0x0082
 8002df2:	0025      	movs	r5, r4
 8002df4:	681a      	ldr	r2, [r3, #0]
 8002df6:	3542      	adds	r5, #66	@ 0x42
 8002df8:	1d11      	adds	r1, r2, #4
 8002dfa:	6019      	str	r1, [r3, #0]
 8002dfc:	6813      	ldr	r3, [r2, #0]
 8002dfe:	702b      	strb	r3, [r5, #0]
 8002e00:	2301      	movs	r3, #1
 8002e02:	e09e      	b.n	8002f42 <_printf_i+0x1be>
 8002e04:	6818      	ldr	r0, [r3, #0]
 8002e06:	6809      	ldr	r1, [r1, #0]
 8002e08:	1d02      	adds	r2, r0, #4
 8002e0a:	060d      	lsls	r5, r1, #24
 8002e0c:	d50b      	bpl.n	8002e26 <_printf_i+0xa2>
 8002e0e:	6806      	ldr	r6, [r0, #0]
 8002e10:	601a      	str	r2, [r3, #0]
 8002e12:	2e00      	cmp	r6, #0
 8002e14:	da03      	bge.n	8002e1e <_printf_i+0x9a>
 8002e16:	232d      	movs	r3, #45	@ 0x2d
 8002e18:	9a03      	ldr	r2, [sp, #12]
 8002e1a:	4276      	negs	r6, r6
 8002e1c:	7013      	strb	r3, [r2, #0]
 8002e1e:	4b5d      	ldr	r3, [pc, #372]	@ (8002f94 <_printf_i+0x210>)
 8002e20:	270a      	movs	r7, #10
 8002e22:	9304      	str	r3, [sp, #16]
 8002e24:	e018      	b.n	8002e58 <_printf_i+0xd4>
 8002e26:	6806      	ldr	r6, [r0, #0]
 8002e28:	601a      	str	r2, [r3, #0]
 8002e2a:	0649      	lsls	r1, r1, #25
 8002e2c:	d5f1      	bpl.n	8002e12 <_printf_i+0x8e>
 8002e2e:	b236      	sxth	r6, r6
 8002e30:	e7ef      	b.n	8002e12 <_printf_i+0x8e>
 8002e32:	6808      	ldr	r0, [r1, #0]
 8002e34:	6819      	ldr	r1, [r3, #0]
 8002e36:	c940      	ldmia	r1!, {r6}
 8002e38:	0605      	lsls	r5, r0, #24
 8002e3a:	d402      	bmi.n	8002e42 <_printf_i+0xbe>
 8002e3c:	0640      	lsls	r0, r0, #25
 8002e3e:	d500      	bpl.n	8002e42 <_printf_i+0xbe>
 8002e40:	b2b6      	uxth	r6, r6
 8002e42:	6019      	str	r1, [r3, #0]
 8002e44:	4b53      	ldr	r3, [pc, #332]	@ (8002f94 <_printf_i+0x210>)
 8002e46:	270a      	movs	r7, #10
 8002e48:	9304      	str	r3, [sp, #16]
 8002e4a:	2a6f      	cmp	r2, #111	@ 0x6f
 8002e4c:	d100      	bne.n	8002e50 <_printf_i+0xcc>
 8002e4e:	3f02      	subs	r7, #2
 8002e50:	0023      	movs	r3, r4
 8002e52:	2200      	movs	r2, #0
 8002e54:	3343      	adds	r3, #67	@ 0x43
 8002e56:	701a      	strb	r2, [r3, #0]
 8002e58:	6863      	ldr	r3, [r4, #4]
 8002e5a:	60a3      	str	r3, [r4, #8]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	db06      	blt.n	8002e6e <_printf_i+0xea>
 8002e60:	2104      	movs	r1, #4
 8002e62:	6822      	ldr	r2, [r4, #0]
 8002e64:	9d03      	ldr	r5, [sp, #12]
 8002e66:	438a      	bics	r2, r1
 8002e68:	6022      	str	r2, [r4, #0]
 8002e6a:	4333      	orrs	r3, r6
 8002e6c:	d00c      	beq.n	8002e88 <_printf_i+0x104>
 8002e6e:	9d03      	ldr	r5, [sp, #12]
 8002e70:	0030      	movs	r0, r6
 8002e72:	0039      	movs	r1, r7
 8002e74:	f7fd f9d8 	bl	8000228 <__aeabi_uidivmod>
 8002e78:	9b04      	ldr	r3, [sp, #16]
 8002e7a:	3d01      	subs	r5, #1
 8002e7c:	5c5b      	ldrb	r3, [r3, r1]
 8002e7e:	702b      	strb	r3, [r5, #0]
 8002e80:	0033      	movs	r3, r6
 8002e82:	0006      	movs	r6, r0
 8002e84:	429f      	cmp	r7, r3
 8002e86:	d9f3      	bls.n	8002e70 <_printf_i+0xec>
 8002e88:	2f08      	cmp	r7, #8
 8002e8a:	d109      	bne.n	8002ea0 <_printf_i+0x11c>
 8002e8c:	6823      	ldr	r3, [r4, #0]
 8002e8e:	07db      	lsls	r3, r3, #31
 8002e90:	d506      	bpl.n	8002ea0 <_printf_i+0x11c>
 8002e92:	6862      	ldr	r2, [r4, #4]
 8002e94:	6923      	ldr	r3, [r4, #16]
 8002e96:	429a      	cmp	r2, r3
 8002e98:	dc02      	bgt.n	8002ea0 <_printf_i+0x11c>
 8002e9a:	2330      	movs	r3, #48	@ 0x30
 8002e9c:	3d01      	subs	r5, #1
 8002e9e:	702b      	strb	r3, [r5, #0]
 8002ea0:	9b03      	ldr	r3, [sp, #12]
 8002ea2:	1b5b      	subs	r3, r3, r5
 8002ea4:	6123      	str	r3, [r4, #16]
 8002ea6:	9b07      	ldr	r3, [sp, #28]
 8002ea8:	0021      	movs	r1, r4
 8002eaa:	9300      	str	r3, [sp, #0]
 8002eac:	9805      	ldr	r0, [sp, #20]
 8002eae:	9b06      	ldr	r3, [sp, #24]
 8002eb0:	aa09      	add	r2, sp, #36	@ 0x24
 8002eb2:	f7ff fef7 	bl	8002ca4 <_printf_common>
 8002eb6:	3001      	adds	r0, #1
 8002eb8:	d148      	bne.n	8002f4c <_printf_i+0x1c8>
 8002eba:	2001      	movs	r0, #1
 8002ebc:	4240      	negs	r0, r0
 8002ebe:	b00b      	add	sp, #44	@ 0x2c
 8002ec0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002ec2:	2220      	movs	r2, #32
 8002ec4:	6809      	ldr	r1, [r1, #0]
 8002ec6:	430a      	orrs	r2, r1
 8002ec8:	6022      	str	r2, [r4, #0]
 8002eca:	2278      	movs	r2, #120	@ 0x78
 8002ecc:	4932      	ldr	r1, [pc, #200]	@ (8002f98 <_printf_i+0x214>)
 8002ece:	9104      	str	r1, [sp, #16]
 8002ed0:	0021      	movs	r1, r4
 8002ed2:	3145      	adds	r1, #69	@ 0x45
 8002ed4:	700a      	strb	r2, [r1, #0]
 8002ed6:	6819      	ldr	r1, [r3, #0]
 8002ed8:	6822      	ldr	r2, [r4, #0]
 8002eda:	c940      	ldmia	r1!, {r6}
 8002edc:	0610      	lsls	r0, r2, #24
 8002ede:	d402      	bmi.n	8002ee6 <_printf_i+0x162>
 8002ee0:	0650      	lsls	r0, r2, #25
 8002ee2:	d500      	bpl.n	8002ee6 <_printf_i+0x162>
 8002ee4:	b2b6      	uxth	r6, r6
 8002ee6:	6019      	str	r1, [r3, #0]
 8002ee8:	07d3      	lsls	r3, r2, #31
 8002eea:	d502      	bpl.n	8002ef2 <_printf_i+0x16e>
 8002eec:	2320      	movs	r3, #32
 8002eee:	4313      	orrs	r3, r2
 8002ef0:	6023      	str	r3, [r4, #0]
 8002ef2:	2e00      	cmp	r6, #0
 8002ef4:	d001      	beq.n	8002efa <_printf_i+0x176>
 8002ef6:	2710      	movs	r7, #16
 8002ef8:	e7aa      	b.n	8002e50 <_printf_i+0xcc>
 8002efa:	2220      	movs	r2, #32
 8002efc:	6823      	ldr	r3, [r4, #0]
 8002efe:	4393      	bics	r3, r2
 8002f00:	6023      	str	r3, [r4, #0]
 8002f02:	e7f8      	b.n	8002ef6 <_printf_i+0x172>
 8002f04:	681a      	ldr	r2, [r3, #0]
 8002f06:	680d      	ldr	r5, [r1, #0]
 8002f08:	1d10      	adds	r0, r2, #4
 8002f0a:	6949      	ldr	r1, [r1, #20]
 8002f0c:	6018      	str	r0, [r3, #0]
 8002f0e:	6813      	ldr	r3, [r2, #0]
 8002f10:	062e      	lsls	r6, r5, #24
 8002f12:	d501      	bpl.n	8002f18 <_printf_i+0x194>
 8002f14:	6019      	str	r1, [r3, #0]
 8002f16:	e002      	b.n	8002f1e <_printf_i+0x19a>
 8002f18:	066d      	lsls	r5, r5, #25
 8002f1a:	d5fb      	bpl.n	8002f14 <_printf_i+0x190>
 8002f1c:	8019      	strh	r1, [r3, #0]
 8002f1e:	2300      	movs	r3, #0
 8002f20:	9d03      	ldr	r5, [sp, #12]
 8002f22:	6123      	str	r3, [r4, #16]
 8002f24:	e7bf      	b.n	8002ea6 <_printf_i+0x122>
 8002f26:	681a      	ldr	r2, [r3, #0]
 8002f28:	1d11      	adds	r1, r2, #4
 8002f2a:	6019      	str	r1, [r3, #0]
 8002f2c:	6815      	ldr	r5, [r2, #0]
 8002f2e:	2100      	movs	r1, #0
 8002f30:	0028      	movs	r0, r5
 8002f32:	6862      	ldr	r2, [r4, #4]
 8002f34:	f000 f896 	bl	8003064 <memchr>
 8002f38:	2800      	cmp	r0, #0
 8002f3a:	d001      	beq.n	8002f40 <_printf_i+0x1bc>
 8002f3c:	1b40      	subs	r0, r0, r5
 8002f3e:	6060      	str	r0, [r4, #4]
 8002f40:	6863      	ldr	r3, [r4, #4]
 8002f42:	6123      	str	r3, [r4, #16]
 8002f44:	2300      	movs	r3, #0
 8002f46:	9a03      	ldr	r2, [sp, #12]
 8002f48:	7013      	strb	r3, [r2, #0]
 8002f4a:	e7ac      	b.n	8002ea6 <_printf_i+0x122>
 8002f4c:	002a      	movs	r2, r5
 8002f4e:	6923      	ldr	r3, [r4, #16]
 8002f50:	9906      	ldr	r1, [sp, #24]
 8002f52:	9805      	ldr	r0, [sp, #20]
 8002f54:	9d07      	ldr	r5, [sp, #28]
 8002f56:	47a8      	blx	r5
 8002f58:	3001      	adds	r0, #1
 8002f5a:	d0ae      	beq.n	8002eba <_printf_i+0x136>
 8002f5c:	6823      	ldr	r3, [r4, #0]
 8002f5e:	079b      	lsls	r3, r3, #30
 8002f60:	d415      	bmi.n	8002f8e <_printf_i+0x20a>
 8002f62:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002f64:	68e0      	ldr	r0, [r4, #12]
 8002f66:	4298      	cmp	r0, r3
 8002f68:	daa9      	bge.n	8002ebe <_printf_i+0x13a>
 8002f6a:	0018      	movs	r0, r3
 8002f6c:	e7a7      	b.n	8002ebe <_printf_i+0x13a>
 8002f6e:	0022      	movs	r2, r4
 8002f70:	2301      	movs	r3, #1
 8002f72:	9906      	ldr	r1, [sp, #24]
 8002f74:	9805      	ldr	r0, [sp, #20]
 8002f76:	9e07      	ldr	r6, [sp, #28]
 8002f78:	3219      	adds	r2, #25
 8002f7a:	47b0      	blx	r6
 8002f7c:	3001      	adds	r0, #1
 8002f7e:	d09c      	beq.n	8002eba <_printf_i+0x136>
 8002f80:	3501      	adds	r5, #1
 8002f82:	68e3      	ldr	r3, [r4, #12]
 8002f84:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8002f86:	1a9b      	subs	r3, r3, r2
 8002f88:	42ab      	cmp	r3, r5
 8002f8a:	dcf0      	bgt.n	8002f6e <_printf_i+0x1ea>
 8002f8c:	e7e9      	b.n	8002f62 <_printf_i+0x1de>
 8002f8e:	2500      	movs	r5, #0
 8002f90:	e7f7      	b.n	8002f82 <_printf_i+0x1fe>
 8002f92:	46c0      	nop			@ (mov r8, r8)
 8002f94:	080031dd 	.word	0x080031dd
 8002f98:	080031ee 	.word	0x080031ee

08002f9c <__malloc_lock>:
 8002f9c:	b510      	push	{r4, lr}
 8002f9e:	4802      	ldr	r0, [pc, #8]	@ (8002fa8 <__malloc_lock+0xc>)
 8002fa0:	f7ff fc7e 	bl	80028a0 <__retarget_lock_acquire_recursive>
 8002fa4:	bd10      	pop	{r4, pc}
 8002fa6:	46c0      	nop			@ (mov r8, r8)
 8002fa8:	20000230 	.word	0x20000230

08002fac <__malloc_unlock>:
 8002fac:	b510      	push	{r4, lr}
 8002fae:	4802      	ldr	r0, [pc, #8]	@ (8002fb8 <__malloc_unlock+0xc>)
 8002fb0:	f7ff fc77 	bl	80028a2 <__retarget_lock_release_recursive>
 8002fb4:	bd10      	pop	{r4, pc}
 8002fb6:	46c0      	nop			@ (mov r8, r8)
 8002fb8:	20000230 	.word	0x20000230

08002fbc <_realloc_r>:
 8002fbc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002fbe:	0006      	movs	r6, r0
 8002fc0:	000c      	movs	r4, r1
 8002fc2:	0015      	movs	r5, r2
 8002fc4:	2900      	cmp	r1, #0
 8002fc6:	d105      	bne.n	8002fd4 <_realloc_r+0x18>
 8002fc8:	0011      	movs	r1, r2
 8002fca:	f7ff fdeb 	bl	8002ba4 <_malloc_r>
 8002fce:	0004      	movs	r4, r0
 8002fd0:	0020      	movs	r0, r4
 8002fd2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002fd4:	2a00      	cmp	r2, #0
 8002fd6:	d103      	bne.n	8002fe0 <_realloc_r+0x24>
 8002fd8:	f000 f858 	bl	800308c <_free_r>
 8002fdc:	002c      	movs	r4, r5
 8002fde:	e7f7      	b.n	8002fd0 <_realloc_r+0x14>
 8002fe0:	f000 f89e 	bl	8003120 <_malloc_usable_size_r>
 8002fe4:	0007      	movs	r7, r0
 8002fe6:	4285      	cmp	r5, r0
 8002fe8:	d802      	bhi.n	8002ff0 <_realloc_r+0x34>
 8002fea:	0843      	lsrs	r3, r0, #1
 8002fec:	42ab      	cmp	r3, r5
 8002fee:	d3ef      	bcc.n	8002fd0 <_realloc_r+0x14>
 8002ff0:	0029      	movs	r1, r5
 8002ff2:	0030      	movs	r0, r6
 8002ff4:	f7ff fdd6 	bl	8002ba4 <_malloc_r>
 8002ff8:	9001      	str	r0, [sp, #4]
 8002ffa:	2800      	cmp	r0, #0
 8002ffc:	d101      	bne.n	8003002 <_realloc_r+0x46>
 8002ffe:	9c01      	ldr	r4, [sp, #4]
 8003000:	e7e6      	b.n	8002fd0 <_realloc_r+0x14>
 8003002:	002a      	movs	r2, r5
 8003004:	42bd      	cmp	r5, r7
 8003006:	d900      	bls.n	800300a <_realloc_r+0x4e>
 8003008:	003a      	movs	r2, r7
 800300a:	0021      	movs	r1, r4
 800300c:	9801      	ldr	r0, [sp, #4]
 800300e:	f000 f834 	bl	800307a <memcpy>
 8003012:	0021      	movs	r1, r4
 8003014:	0030      	movs	r0, r6
 8003016:	f000 f839 	bl	800308c <_free_r>
 800301a:	e7f0      	b.n	8002ffe <_realloc_r+0x42>

0800301c <memmove>:
 800301c:	b510      	push	{r4, lr}
 800301e:	4288      	cmp	r0, r1
 8003020:	d902      	bls.n	8003028 <memmove+0xc>
 8003022:	188b      	adds	r3, r1, r2
 8003024:	4298      	cmp	r0, r3
 8003026:	d308      	bcc.n	800303a <memmove+0x1e>
 8003028:	2300      	movs	r3, #0
 800302a:	429a      	cmp	r2, r3
 800302c:	d007      	beq.n	800303e <memmove+0x22>
 800302e:	5ccc      	ldrb	r4, [r1, r3]
 8003030:	54c4      	strb	r4, [r0, r3]
 8003032:	3301      	adds	r3, #1
 8003034:	e7f9      	b.n	800302a <memmove+0xe>
 8003036:	5c8b      	ldrb	r3, [r1, r2]
 8003038:	5483      	strb	r3, [r0, r2]
 800303a:	3a01      	subs	r2, #1
 800303c:	d2fb      	bcs.n	8003036 <memmove+0x1a>
 800303e:	bd10      	pop	{r4, pc}

08003040 <_sbrk_r>:
 8003040:	2300      	movs	r3, #0
 8003042:	b570      	push	{r4, r5, r6, lr}
 8003044:	4d06      	ldr	r5, [pc, #24]	@ (8003060 <_sbrk_r+0x20>)
 8003046:	0004      	movs	r4, r0
 8003048:	0008      	movs	r0, r1
 800304a:	602b      	str	r3, [r5, #0]
 800304c:	f7fd fede 	bl	8000e0c <_sbrk>
 8003050:	1c43      	adds	r3, r0, #1
 8003052:	d103      	bne.n	800305c <_sbrk_r+0x1c>
 8003054:	682b      	ldr	r3, [r5, #0]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d000      	beq.n	800305c <_sbrk_r+0x1c>
 800305a:	6023      	str	r3, [r4, #0]
 800305c:	bd70      	pop	{r4, r5, r6, pc}
 800305e:	46c0      	nop			@ (mov r8, r8)
 8003060:	2000023c 	.word	0x2000023c

08003064 <memchr>:
 8003064:	b2c9      	uxtb	r1, r1
 8003066:	1882      	adds	r2, r0, r2
 8003068:	4290      	cmp	r0, r2
 800306a:	d101      	bne.n	8003070 <memchr+0xc>
 800306c:	2000      	movs	r0, #0
 800306e:	4770      	bx	lr
 8003070:	7803      	ldrb	r3, [r0, #0]
 8003072:	428b      	cmp	r3, r1
 8003074:	d0fb      	beq.n	800306e <memchr+0xa>
 8003076:	3001      	adds	r0, #1
 8003078:	e7f6      	b.n	8003068 <memchr+0x4>

0800307a <memcpy>:
 800307a:	2300      	movs	r3, #0
 800307c:	b510      	push	{r4, lr}
 800307e:	429a      	cmp	r2, r3
 8003080:	d100      	bne.n	8003084 <memcpy+0xa>
 8003082:	bd10      	pop	{r4, pc}
 8003084:	5ccc      	ldrb	r4, [r1, r3]
 8003086:	54c4      	strb	r4, [r0, r3]
 8003088:	3301      	adds	r3, #1
 800308a:	e7f8      	b.n	800307e <memcpy+0x4>

0800308c <_free_r>:
 800308c:	b570      	push	{r4, r5, r6, lr}
 800308e:	0005      	movs	r5, r0
 8003090:	1e0c      	subs	r4, r1, #0
 8003092:	d010      	beq.n	80030b6 <_free_r+0x2a>
 8003094:	3c04      	subs	r4, #4
 8003096:	6823      	ldr	r3, [r4, #0]
 8003098:	2b00      	cmp	r3, #0
 800309a:	da00      	bge.n	800309e <_free_r+0x12>
 800309c:	18e4      	adds	r4, r4, r3
 800309e:	0028      	movs	r0, r5
 80030a0:	f7ff ff7c 	bl	8002f9c <__malloc_lock>
 80030a4:	4a1d      	ldr	r2, [pc, #116]	@ (800311c <_free_r+0x90>)
 80030a6:	6813      	ldr	r3, [r2, #0]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d105      	bne.n	80030b8 <_free_r+0x2c>
 80030ac:	6063      	str	r3, [r4, #4]
 80030ae:	6014      	str	r4, [r2, #0]
 80030b0:	0028      	movs	r0, r5
 80030b2:	f7ff ff7b 	bl	8002fac <__malloc_unlock>
 80030b6:	bd70      	pop	{r4, r5, r6, pc}
 80030b8:	42a3      	cmp	r3, r4
 80030ba:	d908      	bls.n	80030ce <_free_r+0x42>
 80030bc:	6820      	ldr	r0, [r4, #0]
 80030be:	1821      	adds	r1, r4, r0
 80030c0:	428b      	cmp	r3, r1
 80030c2:	d1f3      	bne.n	80030ac <_free_r+0x20>
 80030c4:	6819      	ldr	r1, [r3, #0]
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	1809      	adds	r1, r1, r0
 80030ca:	6021      	str	r1, [r4, #0]
 80030cc:	e7ee      	b.n	80030ac <_free_r+0x20>
 80030ce:	001a      	movs	r2, r3
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d001      	beq.n	80030da <_free_r+0x4e>
 80030d6:	42a3      	cmp	r3, r4
 80030d8:	d9f9      	bls.n	80030ce <_free_r+0x42>
 80030da:	6811      	ldr	r1, [r2, #0]
 80030dc:	1850      	adds	r0, r2, r1
 80030de:	42a0      	cmp	r0, r4
 80030e0:	d10b      	bne.n	80030fa <_free_r+0x6e>
 80030e2:	6820      	ldr	r0, [r4, #0]
 80030e4:	1809      	adds	r1, r1, r0
 80030e6:	1850      	adds	r0, r2, r1
 80030e8:	6011      	str	r1, [r2, #0]
 80030ea:	4283      	cmp	r3, r0
 80030ec:	d1e0      	bne.n	80030b0 <_free_r+0x24>
 80030ee:	6818      	ldr	r0, [r3, #0]
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	1841      	adds	r1, r0, r1
 80030f4:	6011      	str	r1, [r2, #0]
 80030f6:	6053      	str	r3, [r2, #4]
 80030f8:	e7da      	b.n	80030b0 <_free_r+0x24>
 80030fa:	42a0      	cmp	r0, r4
 80030fc:	d902      	bls.n	8003104 <_free_r+0x78>
 80030fe:	230c      	movs	r3, #12
 8003100:	602b      	str	r3, [r5, #0]
 8003102:	e7d5      	b.n	80030b0 <_free_r+0x24>
 8003104:	6820      	ldr	r0, [r4, #0]
 8003106:	1821      	adds	r1, r4, r0
 8003108:	428b      	cmp	r3, r1
 800310a:	d103      	bne.n	8003114 <_free_r+0x88>
 800310c:	6819      	ldr	r1, [r3, #0]
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	1809      	adds	r1, r1, r0
 8003112:	6021      	str	r1, [r4, #0]
 8003114:	6063      	str	r3, [r4, #4]
 8003116:	6054      	str	r4, [r2, #4]
 8003118:	e7ca      	b.n	80030b0 <_free_r+0x24>
 800311a:	46c0      	nop			@ (mov r8, r8)
 800311c:	20000238 	.word	0x20000238

08003120 <_malloc_usable_size_r>:
 8003120:	1f0b      	subs	r3, r1, #4
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	1f18      	subs	r0, r3, #4
 8003126:	2b00      	cmp	r3, #0
 8003128:	da01      	bge.n	800312e <_malloc_usable_size_r+0xe>
 800312a:	580b      	ldr	r3, [r1, r0]
 800312c:	18c0      	adds	r0, r0, r3
 800312e:	4770      	bx	lr

08003130 <_init>:
 8003130:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003132:	46c0      	nop			@ (mov r8, r8)
 8003134:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003136:	bc08      	pop	{r3}
 8003138:	469e      	mov	lr, r3
 800313a:	4770      	bx	lr

0800313c <_fini>:
 800313c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800313e:	46c0      	nop			@ (mov r8, r8)
 8003140:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003142:	bc08      	pop	{r3}
 8003144:	469e      	mov	lr, r3
 8003146:	4770      	bx	lr
