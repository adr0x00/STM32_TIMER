
Blink.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a5c  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  08003b1c  08003b1c  00004b1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003bd4  08003bd4  0000506c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08003bd4  08003bd4  0000506c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08003bd4  08003bd4  0000506c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003bd4  08003bd4  00004bd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003bd8  08003bd8  00004bd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08003bdc  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000218  2000006c  08003c48  0000506c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000284  08003c48  00005284  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000506c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b1e4  00000000  00000000  00005094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e2d  00000000  00000000  00010278  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d40  00000000  00000000  000120a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a4d  00000000  00000000  00012de8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000104db  00000000  00000000  00013835  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f476  00000000  00000000  00023d10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00061372  00000000  00000000  00033186  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000944f8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003498  00000000  00000000  0009453c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  000979d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000006c 	.word	0x2000006c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003b04 	.word	0x08003b04

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000070 	.word	0x20000070
 8000104:	08003b04 	.word	0x08003b04

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	@ 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f8f0 	bl	8000404 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			@ (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__divsi3>:
 8000230:	4603      	mov	r3, r0
 8000232:	430b      	orrs	r3, r1
 8000234:	d47f      	bmi.n	8000336 <__divsi3+0x106>
 8000236:	2200      	movs	r2, #0
 8000238:	0843      	lsrs	r3, r0, #1
 800023a:	428b      	cmp	r3, r1
 800023c:	d374      	bcc.n	8000328 <__divsi3+0xf8>
 800023e:	0903      	lsrs	r3, r0, #4
 8000240:	428b      	cmp	r3, r1
 8000242:	d35f      	bcc.n	8000304 <__divsi3+0xd4>
 8000244:	0a03      	lsrs	r3, r0, #8
 8000246:	428b      	cmp	r3, r1
 8000248:	d344      	bcc.n	80002d4 <__divsi3+0xa4>
 800024a:	0b03      	lsrs	r3, r0, #12
 800024c:	428b      	cmp	r3, r1
 800024e:	d328      	bcc.n	80002a2 <__divsi3+0x72>
 8000250:	0c03      	lsrs	r3, r0, #16
 8000252:	428b      	cmp	r3, r1
 8000254:	d30d      	bcc.n	8000272 <__divsi3+0x42>
 8000256:	22ff      	movs	r2, #255	@ 0xff
 8000258:	0209      	lsls	r1, r1, #8
 800025a:	ba12      	rev	r2, r2
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d302      	bcc.n	8000268 <__divsi3+0x38>
 8000262:	1212      	asrs	r2, r2, #8
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	d065      	beq.n	8000334 <__divsi3+0x104>
 8000268:	0b03      	lsrs	r3, r0, #12
 800026a:	428b      	cmp	r3, r1
 800026c:	d319      	bcc.n	80002a2 <__divsi3+0x72>
 800026e:	e000      	b.n	8000272 <__divsi3+0x42>
 8000270:	0a09      	lsrs	r1, r1, #8
 8000272:	0bc3      	lsrs	r3, r0, #15
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x4c>
 8000278:	03cb      	lsls	r3, r1, #15
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b83      	lsrs	r3, r0, #14
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x58>
 8000284:	038b      	lsls	r3, r1, #14
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b43      	lsrs	r3, r0, #13
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x64>
 8000290:	034b      	lsls	r3, r1, #13
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b03      	lsrs	r3, r0, #12
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x70>
 800029c:	030b      	lsls	r3, r1, #12
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0ac3      	lsrs	r3, r0, #11
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x7c>
 80002a8:	02cb      	lsls	r3, r1, #11
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a83      	lsrs	r3, r0, #10
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x88>
 80002b4:	028b      	lsls	r3, r1, #10
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a43      	lsrs	r3, r0, #9
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x94>
 80002c0:	024b      	lsls	r3, r1, #9
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a03      	lsrs	r3, r0, #8
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0xa0>
 80002cc:	020b      	lsls	r3, r1, #8
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	d2cd      	bcs.n	8000270 <__divsi3+0x40>
 80002d4:	09c3      	lsrs	r3, r0, #7
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xae>
 80002da:	01cb      	lsls	r3, r1, #7
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0983      	lsrs	r3, r0, #6
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xba>
 80002e6:	018b      	lsls	r3, r1, #6
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0943      	lsrs	r3, r0, #5
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xc6>
 80002f2:	014b      	lsls	r3, r1, #5
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0903      	lsrs	r3, r0, #4
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xd2>
 80002fe:	010b      	lsls	r3, r1, #4
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	08c3      	lsrs	r3, r0, #3
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xde>
 800030a:	00cb      	lsls	r3, r1, #3
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0883      	lsrs	r3, r0, #2
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xea>
 8000316:	008b      	lsls	r3, r1, #2
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0843      	lsrs	r3, r0, #1
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xf6>
 8000322:	004b      	lsls	r3, r1, #1
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	1a41      	subs	r1, r0, r1
 800032a:	d200      	bcs.n	800032e <__divsi3+0xfe>
 800032c:	4601      	mov	r1, r0
 800032e:	4152      	adcs	r2, r2
 8000330:	4610      	mov	r0, r2
 8000332:	4770      	bx	lr
 8000334:	e05d      	b.n	80003f2 <__divsi3+0x1c2>
 8000336:	0fca      	lsrs	r2, r1, #31
 8000338:	d000      	beq.n	800033c <__divsi3+0x10c>
 800033a:	4249      	negs	r1, r1
 800033c:	1003      	asrs	r3, r0, #32
 800033e:	d300      	bcc.n	8000342 <__divsi3+0x112>
 8000340:	4240      	negs	r0, r0
 8000342:	4053      	eors	r3, r2
 8000344:	2200      	movs	r2, #0
 8000346:	469c      	mov	ip, r3
 8000348:	0903      	lsrs	r3, r0, #4
 800034a:	428b      	cmp	r3, r1
 800034c:	d32d      	bcc.n	80003aa <__divsi3+0x17a>
 800034e:	0a03      	lsrs	r3, r0, #8
 8000350:	428b      	cmp	r3, r1
 8000352:	d312      	bcc.n	800037a <__divsi3+0x14a>
 8000354:	22fc      	movs	r2, #252	@ 0xfc
 8000356:	0189      	lsls	r1, r1, #6
 8000358:	ba12      	rev	r2, r2
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d30c      	bcc.n	800037a <__divsi3+0x14a>
 8000360:	0189      	lsls	r1, r1, #6
 8000362:	1192      	asrs	r2, r2, #6
 8000364:	428b      	cmp	r3, r1
 8000366:	d308      	bcc.n	800037a <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	1192      	asrs	r2, r2, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d304      	bcc.n	800037a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	d03a      	beq.n	80003ea <__divsi3+0x1ba>
 8000374:	1192      	asrs	r2, r2, #6
 8000376:	e000      	b.n	800037a <__divsi3+0x14a>
 8000378:	0989      	lsrs	r1, r1, #6
 800037a:	09c3      	lsrs	r3, r0, #7
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x154>
 8000380:	01cb      	lsls	r3, r1, #7
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0983      	lsrs	r3, r0, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x160>
 800038c:	018b      	lsls	r3, r1, #6
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0943      	lsrs	r3, r0, #5
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x16c>
 8000398:	014b      	lsls	r3, r1, #5
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0903      	lsrs	r3, r0, #4
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x178>
 80003a4:	010b      	lsls	r3, r1, #4
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	08c3      	lsrs	r3, r0, #3
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x184>
 80003b0:	00cb      	lsls	r3, r1, #3
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0883      	lsrs	r3, r0, #2
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x190>
 80003bc:	008b      	lsls	r3, r1, #2
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	d2d9      	bcs.n	8000378 <__divsi3+0x148>
 80003c4:	0843      	lsrs	r3, r0, #1
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d301      	bcc.n	80003ce <__divsi3+0x19e>
 80003ca:	004b      	lsls	r3, r1, #1
 80003cc:	1ac0      	subs	r0, r0, r3
 80003ce:	4152      	adcs	r2, r2
 80003d0:	1a41      	subs	r1, r0, r1
 80003d2:	d200      	bcs.n	80003d6 <__divsi3+0x1a6>
 80003d4:	4601      	mov	r1, r0
 80003d6:	4663      	mov	r3, ip
 80003d8:	4152      	adcs	r2, r2
 80003da:	105b      	asrs	r3, r3, #1
 80003dc:	4610      	mov	r0, r2
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x1b4>
 80003e0:	4240      	negs	r0, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d500      	bpl.n	80003e8 <__divsi3+0x1b8>
 80003e6:	4249      	negs	r1, r1
 80003e8:	4770      	bx	lr
 80003ea:	4663      	mov	r3, ip
 80003ec:	105b      	asrs	r3, r3, #1
 80003ee:	d300      	bcc.n	80003f2 <__divsi3+0x1c2>
 80003f0:	4240      	negs	r0, r0
 80003f2:	b501      	push	{r0, lr}
 80003f4:	2000      	movs	r0, #0
 80003f6:	f000 f805 	bl	8000404 <__aeabi_idiv0>
 80003fa:	bd02      	pop	{r1, pc}

080003fc <__aeabi_idivmod>:
 80003fc:	2900      	cmp	r1, #0
 80003fe:	d0f8      	beq.n	80003f2 <__divsi3+0x1c2>
 8000400:	e716      	b.n	8000230 <__divsi3>
 8000402:	4770      	bx	lr

08000404 <__aeabi_idiv0>:
 8000404:	4770      	bx	lr
 8000406:	46c0      	nop			@ (mov r8, r8)

08000408 <HD44780_Init>:
        0b00000
};


void HD44780_Init(uint8_t rows)
{
 8000408:	b580      	push	{r7, lr}
 800040a:	b082      	sub	sp, #8
 800040c:	af00      	add	r7, sp, #0
 800040e:	0002      	movs	r2, r0
 8000410:	1dfb      	adds	r3, r7, #7
 8000412:	701a      	strb	r2, [r3, #0]
  dpRows = rows;
 8000414:	4b3a      	ldr	r3, [pc, #232]	@ (8000500 <HD44780_Init+0xf8>)
 8000416:	1dfa      	adds	r2, r7, #7
 8000418:	7812      	ldrb	r2, [r2, #0]
 800041a:	701a      	strb	r2, [r3, #0]

  dpBacklight = LCD_BACKLIGHT;
 800041c:	4b39      	ldr	r3, [pc, #228]	@ (8000504 <HD44780_Init+0xfc>)
 800041e:	2208      	movs	r2, #8
 8000420:	701a      	strb	r2, [r3, #0]

  dpFunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 8000422:	4b39      	ldr	r3, [pc, #228]	@ (8000508 <HD44780_Init+0x100>)
 8000424:	2200      	movs	r2, #0
 8000426:	701a      	strb	r2, [r3, #0]

  if (dpRows > 1)
 8000428:	4b35      	ldr	r3, [pc, #212]	@ (8000500 <HD44780_Init+0xf8>)
 800042a:	781b      	ldrb	r3, [r3, #0]
 800042c:	2b01      	cmp	r3, #1
 800042e:	d907      	bls.n	8000440 <HD44780_Init+0x38>
  {
    dpFunction |= LCD_2LINE;
 8000430:	4b35      	ldr	r3, [pc, #212]	@ (8000508 <HD44780_Init+0x100>)
 8000432:	781b      	ldrb	r3, [r3, #0]
 8000434:	2208      	movs	r2, #8
 8000436:	4313      	orrs	r3, r2
 8000438:	b2da      	uxtb	r2, r3
 800043a:	4b33      	ldr	r3, [pc, #204]	@ (8000508 <HD44780_Init+0x100>)
 800043c:	701a      	strb	r2, [r3, #0]
 800043e:	e006      	b.n	800044e <HD44780_Init+0x46>
  }
  else
  {
    dpFunction |= LCD_5x10DOTS;
 8000440:	4b31      	ldr	r3, [pc, #196]	@ (8000508 <HD44780_Init+0x100>)
 8000442:	781b      	ldrb	r3, [r3, #0]
 8000444:	2204      	movs	r2, #4
 8000446:	4313      	orrs	r3, r2
 8000448:	b2da      	uxtb	r2, r3
 800044a:	4b2f      	ldr	r3, [pc, #188]	@ (8000508 <HD44780_Init+0x100>)
 800044c:	701a      	strb	r2, [r3, #0]
  }

  /* Wait for initialization */
  DelayInit();
 800044e:	f000 f9b3 	bl	80007b8 <DelayInit>
  HAL_Delay(50);
 8000452:	2032      	movs	r0, #50	@ 0x32
 8000454:	f000 fec0 	bl	80011d8 <HAL_Delay>

  ExpanderWrite(dpBacklight);
 8000458:	4b2a      	ldr	r3, [pc, #168]	@ (8000504 <HD44780_Init+0xfc>)
 800045a:	781b      	ldrb	r3, [r3, #0]
 800045c:	0018      	movs	r0, r3
 800045e:	f000 f96b 	bl	8000738 <ExpanderWrite>
  HAL_Delay(1000);
 8000462:	23fa      	movs	r3, #250	@ 0xfa
 8000464:	009b      	lsls	r3, r3, #2
 8000466:	0018      	movs	r0, r3
 8000468:	f000 feb6 	bl	80011d8 <HAL_Delay>

  /* 4bit Mode */
  Write4Bits(0x03 << 4);
 800046c:	2030      	movs	r0, #48	@ 0x30
 800046e:	f000 f94e 	bl	800070e <Write4Bits>
  DelayUS(4500);
 8000472:	4b26      	ldr	r3, [pc, #152]	@ (800050c <HD44780_Init+0x104>)
 8000474:	0018      	movs	r0, r3
 8000476:	f000 f9c9 	bl	800080c <DelayUS>

  Write4Bits(0x03 << 4);
 800047a:	2030      	movs	r0, #48	@ 0x30
 800047c:	f000 f947 	bl	800070e <Write4Bits>
  DelayUS(4500);
 8000480:	4b22      	ldr	r3, [pc, #136]	@ (800050c <HD44780_Init+0x104>)
 8000482:	0018      	movs	r0, r3
 8000484:	f000 f9c2 	bl	800080c <DelayUS>

  Write4Bits(0x03 << 4);
 8000488:	2030      	movs	r0, #48	@ 0x30
 800048a:	f000 f940 	bl	800070e <Write4Bits>
  DelayUS(4500);
 800048e:	4b1f      	ldr	r3, [pc, #124]	@ (800050c <HD44780_Init+0x104>)
 8000490:	0018      	movs	r0, r3
 8000492:	f000 f9bb 	bl	800080c <DelayUS>

  Write4Bits(0x02 << 4);
 8000496:	2020      	movs	r0, #32
 8000498:	f000 f939 	bl	800070e <Write4Bits>
  DelayUS(100);
 800049c:	2064      	movs	r0, #100	@ 0x64
 800049e:	f000 f9b5 	bl	800080c <DelayUS>

  /* Display Control */
  SendCommand(LCD_FUNCTIONSET | dpFunction);
 80004a2:	4b19      	ldr	r3, [pc, #100]	@ (8000508 <HD44780_Init+0x100>)
 80004a4:	781b      	ldrb	r3, [r3, #0]
 80004a6:	2220      	movs	r2, #32
 80004a8:	4313      	orrs	r3, r2
 80004aa:	b2db      	uxtb	r3, r3
 80004ac:	0018      	movs	r0, r3
 80004ae:	f000 f8e2 	bl	8000676 <SendCommand>

  dpControl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 80004b2:	4b17      	ldr	r3, [pc, #92]	@ (8000510 <HD44780_Init+0x108>)
 80004b4:	2204      	movs	r2, #4
 80004b6:	701a      	strb	r2, [r3, #0]
  HD44780_Display();
 80004b8:	f000 f884 	bl	80005c4 <HD44780_Display>
  HD44780_Clear();
 80004bc:	f000 f830 	bl	8000520 <HD44780_Clear>

  /* Display Mode */
  dpMode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 80004c0:	4b14      	ldr	r3, [pc, #80]	@ (8000514 <HD44780_Init+0x10c>)
 80004c2:	2202      	movs	r2, #2
 80004c4:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_ENTRYMODESET | dpMode);
 80004c6:	4b13      	ldr	r3, [pc, #76]	@ (8000514 <HD44780_Init+0x10c>)
 80004c8:	781b      	ldrb	r3, [r3, #0]
 80004ca:	2204      	movs	r2, #4
 80004cc:	4313      	orrs	r3, r2
 80004ce:	b2db      	uxtb	r3, r3
 80004d0:	0018      	movs	r0, r3
 80004d2:	f000 f8d0 	bl	8000676 <SendCommand>
  DelayUS(4500);
 80004d6:	4b0d      	ldr	r3, [pc, #52]	@ (800050c <HD44780_Init+0x104>)
 80004d8:	0018      	movs	r0, r3
 80004da:	f000 f997 	bl	800080c <DelayUS>

  HD44780_CreateSpecialChar(0, special1);
 80004de:	4b0e      	ldr	r3, [pc, #56]	@ (8000518 <HD44780_Init+0x110>)
 80004e0:	0019      	movs	r1, r3
 80004e2:	2000      	movs	r0, #0
 80004e4:	f000 f884 	bl	80005f0 <HD44780_CreateSpecialChar>
  HD44780_CreateSpecialChar(1, special2);
 80004e8:	4b0c      	ldr	r3, [pc, #48]	@ (800051c <HD44780_Init+0x114>)
 80004ea:	0019      	movs	r1, r3
 80004ec:	2001      	movs	r0, #1
 80004ee:	f000 f87f 	bl	80005f0 <HD44780_CreateSpecialChar>

  HD44780_Home();
 80004f2:	f000 f822 	bl	800053a <HD44780_Home>
}
 80004f6:	46c0      	nop			@ (mov r8, r8)
 80004f8:	46bd      	mov	sp, r7
 80004fa:	b002      	add	sp, #8
 80004fc:	bd80      	pop	{r7, pc}
 80004fe:	46c0      	nop			@ (mov r8, r8)
 8000500:	2000008b 	.word	0x2000008b
 8000504:	2000008c 	.word	0x2000008c
 8000508:	20000088 	.word	0x20000088
 800050c:	00001194 	.word	0x00001194
 8000510:	20000089 	.word	0x20000089
 8000514:	2000008a 	.word	0x2000008a
 8000518:	20000000 	.word	0x20000000
 800051c:	20000008 	.word	0x20000008

08000520 <HD44780_Clear>:

void HD44780_Clear()
{
 8000520:	b580      	push	{r7, lr}
 8000522:	af00      	add	r7, sp, #0
  SendCommand(LCD_CLEARDISPLAY);
 8000524:	2001      	movs	r0, #1
 8000526:	f000 f8a6 	bl	8000676 <SendCommand>
  DelayUS(2000);
 800052a:	23fa      	movs	r3, #250	@ 0xfa
 800052c:	00db      	lsls	r3, r3, #3
 800052e:	0018      	movs	r0, r3
 8000530:	f000 f96c 	bl	800080c <DelayUS>
}
 8000534:	46c0      	nop			@ (mov r8, r8)
 8000536:	46bd      	mov	sp, r7
 8000538:	bd80      	pop	{r7, pc}

0800053a <HD44780_Home>:

void HD44780_Home()
{
 800053a:	b580      	push	{r7, lr}
 800053c:	af00      	add	r7, sp, #0
  SendCommand(LCD_RETURNHOME);
 800053e:	2002      	movs	r0, #2
 8000540:	f000 f899 	bl	8000676 <SendCommand>
  DelayUS(2000);
 8000544:	23fa      	movs	r3, #250	@ 0xfa
 8000546:	00db      	lsls	r3, r3, #3
 8000548:	0018      	movs	r0, r3
 800054a:	f000 f95f 	bl	800080c <DelayUS>
}
 800054e:	46c0      	nop			@ (mov r8, r8)
 8000550:	46bd      	mov	sp, r7
 8000552:	bd80      	pop	{r7, pc}

08000554 <HD44780_SetCursor>:

void HD44780_SetCursor(uint8_t col, uint8_t row)
{
 8000554:	b590      	push	{r4, r7, lr}
 8000556:	b087      	sub	sp, #28
 8000558:	af00      	add	r7, sp, #0
 800055a:	0002      	movs	r2, r0
 800055c:	1dfb      	adds	r3, r7, #7
 800055e:	701a      	strb	r2, [r3, #0]
 8000560:	1dbb      	adds	r3, r7, #6
 8000562:	1c0a      	adds	r2, r1, #0
 8000564:	701a      	strb	r2, [r3, #0]
  int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 8000566:	2308      	movs	r3, #8
 8000568:	18fb      	adds	r3, r7, r3
 800056a:	4a14      	ldr	r2, [pc, #80]	@ (80005bc <HD44780_SetCursor+0x68>)
 800056c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800056e:	c313      	stmia	r3!, {r0, r1, r4}
 8000570:	6812      	ldr	r2, [r2, #0]
 8000572:	601a      	str	r2, [r3, #0]
  if (row >= dpRows)
 8000574:	4b12      	ldr	r3, [pc, #72]	@ (80005c0 <HD44780_SetCursor+0x6c>)
 8000576:	781b      	ldrb	r3, [r3, #0]
 8000578:	1dba      	adds	r2, r7, #6
 800057a:	7812      	ldrb	r2, [r2, #0]
 800057c:	429a      	cmp	r2, r3
 800057e:	d304      	bcc.n	800058a <HD44780_SetCursor+0x36>
  {
    row = dpRows-1;
 8000580:	4b0f      	ldr	r3, [pc, #60]	@ (80005c0 <HD44780_SetCursor+0x6c>)
 8000582:	781a      	ldrb	r2, [r3, #0]
 8000584:	1dbb      	adds	r3, r7, #6
 8000586:	3a01      	subs	r2, #1
 8000588:	701a      	strb	r2, [r3, #0]
  }
  SendCommand(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 800058a:	1dbb      	adds	r3, r7, #6
 800058c:	781a      	ldrb	r2, [r3, #0]
 800058e:	2308      	movs	r3, #8
 8000590:	18fb      	adds	r3, r7, r3
 8000592:	0092      	lsls	r2, r2, #2
 8000594:	58d3      	ldr	r3, [r2, r3]
 8000596:	b2da      	uxtb	r2, r3
 8000598:	1dfb      	adds	r3, r7, #7
 800059a:	781b      	ldrb	r3, [r3, #0]
 800059c:	18d3      	adds	r3, r2, r3
 800059e:	b2db      	uxtb	r3, r3
 80005a0:	b25b      	sxtb	r3, r3
 80005a2:	2280      	movs	r2, #128	@ 0x80
 80005a4:	4252      	negs	r2, r2
 80005a6:	4313      	orrs	r3, r2
 80005a8:	b25b      	sxtb	r3, r3
 80005aa:	b2db      	uxtb	r3, r3
 80005ac:	0018      	movs	r0, r3
 80005ae:	f000 f862 	bl	8000676 <SendCommand>
}
 80005b2:	46c0      	nop			@ (mov r8, r8)
 80005b4:	46bd      	mov	sp, r7
 80005b6:	b007      	add	sp, #28
 80005b8:	bd90      	pop	{r4, r7, pc}
 80005ba:	46c0      	nop			@ (mov r8, r8)
 80005bc:	08003b1c 	.word	0x08003b1c
 80005c0:	2000008b 	.word	0x2000008b

080005c4 <HD44780_Display>:
  dpControl &= ~LCD_DISPLAYON;
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
}

void HD44780_Display()
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	af00      	add	r7, sp, #0
  dpControl |= LCD_DISPLAYON;
 80005c8:	4b08      	ldr	r3, [pc, #32]	@ (80005ec <HD44780_Display+0x28>)
 80005ca:	781b      	ldrb	r3, [r3, #0]
 80005cc:	2204      	movs	r2, #4
 80005ce:	4313      	orrs	r3, r2
 80005d0:	b2da      	uxtb	r2, r3
 80005d2:	4b06      	ldr	r3, [pc, #24]	@ (80005ec <HD44780_Display+0x28>)
 80005d4:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 80005d6:	4b05      	ldr	r3, [pc, #20]	@ (80005ec <HD44780_Display+0x28>)
 80005d8:	781b      	ldrb	r3, [r3, #0]
 80005da:	2208      	movs	r2, #8
 80005dc:	4313      	orrs	r3, r2
 80005de:	b2db      	uxtb	r3, r3
 80005e0:	0018      	movs	r0, r3
 80005e2:	f000 f848 	bl	8000676 <SendCommand>
}
 80005e6:	46c0      	nop			@ (mov r8, r8)
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bd80      	pop	{r7, pc}
 80005ec:	20000089 	.word	0x20000089

080005f0 <HD44780_CreateSpecialChar>:
  dpMode &= ~LCD_ENTRYSHIFTINCREMENT;
  SendCommand(LCD_ENTRYMODESET | dpMode);
}

void HD44780_CreateSpecialChar(uint8_t location, uint8_t charmap[])
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b084      	sub	sp, #16
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	0002      	movs	r2, r0
 80005f8:	6039      	str	r1, [r7, #0]
 80005fa:	1dfb      	adds	r3, r7, #7
 80005fc:	701a      	strb	r2, [r3, #0]
  location &= 0x7;
 80005fe:	1dfb      	adds	r3, r7, #7
 8000600:	1dfa      	adds	r2, r7, #7
 8000602:	7812      	ldrb	r2, [r2, #0]
 8000604:	2107      	movs	r1, #7
 8000606:	400a      	ands	r2, r1
 8000608:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_SETCGRAMADDR | (location << 3));
 800060a:	1dfb      	adds	r3, r7, #7
 800060c:	781b      	ldrb	r3, [r3, #0]
 800060e:	b25b      	sxtb	r3, r3
 8000610:	00db      	lsls	r3, r3, #3
 8000612:	b25b      	sxtb	r3, r3
 8000614:	2240      	movs	r2, #64	@ 0x40
 8000616:	4313      	orrs	r3, r2
 8000618:	b25b      	sxtb	r3, r3
 800061a:	b2db      	uxtb	r3, r3
 800061c:	0018      	movs	r0, r3
 800061e:	f000 f82a 	bl	8000676 <SendCommand>
  for (int i=0; i<8; i++)
 8000622:	2300      	movs	r3, #0
 8000624:	60fb      	str	r3, [r7, #12]
 8000626:	e009      	b.n	800063c <HD44780_CreateSpecialChar+0x4c>
  {
    SendChar(charmap[i]);
 8000628:	68fb      	ldr	r3, [r7, #12]
 800062a:	683a      	ldr	r2, [r7, #0]
 800062c:	18d3      	adds	r3, r2, r3
 800062e:	781b      	ldrb	r3, [r3, #0]
 8000630:	0018      	movs	r0, r3
 8000632:	f000 f830 	bl	8000696 <SendChar>
  for (int i=0; i<8; i++)
 8000636:	68fb      	ldr	r3, [r7, #12]
 8000638:	3301      	adds	r3, #1
 800063a:	60fb      	str	r3, [r7, #12]
 800063c:	68fb      	ldr	r3, [r7, #12]
 800063e:	2b07      	cmp	r3, #7
 8000640:	ddf2      	ble.n	8000628 <HD44780_CreateSpecialChar+0x38>
  }
}
 8000642:	46c0      	nop			@ (mov r8, r8)
 8000644:	46c0      	nop			@ (mov r8, r8)
 8000646:	46bd      	mov	sp, r7
 8000648:	b004      	add	sp, #16
 800064a:	bd80      	pop	{r7, pc}

0800064c <HD44780_PrintStr>:
{
  HD44780_CreateSpecialChar(char_num, rows);
}

void HD44780_PrintStr(const char c[])
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b082      	sub	sp, #8
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
  while(*c) SendChar(*c++);
 8000654:	e006      	b.n	8000664 <HD44780_PrintStr+0x18>
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	1c5a      	adds	r2, r3, #1
 800065a:	607a      	str	r2, [r7, #4]
 800065c:	781b      	ldrb	r3, [r3, #0]
 800065e:	0018      	movs	r0, r3
 8000660:	f000 f819 	bl	8000696 <SendChar>
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	781b      	ldrb	r3, [r3, #0]
 8000668:	2b00      	cmp	r3, #0
 800066a:	d1f4      	bne.n	8000656 <HD44780_PrintStr+0xa>
}
 800066c:	46c0      	nop			@ (mov r8, r8)
 800066e:	46c0      	nop			@ (mov r8, r8)
 8000670:	46bd      	mov	sp, r7
 8000672:	b002      	add	sp, #8
 8000674:	bd80      	pop	{r7, pc}

08000676 <SendCommand>:
  dpBacklight=LCD_BACKLIGHT;
  ExpanderWrite(0);
}

static void SendCommand(uint8_t cmd)
{
 8000676:	b580      	push	{r7, lr}
 8000678:	b082      	sub	sp, #8
 800067a:	af00      	add	r7, sp, #0
 800067c:	0002      	movs	r2, r0
 800067e:	1dfb      	adds	r3, r7, #7
 8000680:	701a      	strb	r2, [r3, #0]
  Send(cmd, 0);
 8000682:	1dfb      	adds	r3, r7, #7
 8000684:	781b      	ldrb	r3, [r3, #0]
 8000686:	2100      	movs	r1, #0
 8000688:	0018      	movs	r0, r3
 800068a:	f000 f814 	bl	80006b6 <Send>
}
 800068e:	46c0      	nop			@ (mov r8, r8)
 8000690:	46bd      	mov	sp, r7
 8000692:	b002      	add	sp, #8
 8000694:	bd80      	pop	{r7, pc}

08000696 <SendChar>:

static void SendChar(uint8_t ch)
{
 8000696:	b580      	push	{r7, lr}
 8000698:	b082      	sub	sp, #8
 800069a:	af00      	add	r7, sp, #0
 800069c:	0002      	movs	r2, r0
 800069e:	1dfb      	adds	r3, r7, #7
 80006a0:	701a      	strb	r2, [r3, #0]
  Send(ch, RS);
 80006a2:	1dfb      	adds	r3, r7, #7
 80006a4:	781b      	ldrb	r3, [r3, #0]
 80006a6:	2101      	movs	r1, #1
 80006a8:	0018      	movs	r0, r3
 80006aa:	f000 f804 	bl	80006b6 <Send>
}
 80006ae:	46c0      	nop			@ (mov r8, r8)
 80006b0:	46bd      	mov	sp, r7
 80006b2:	b002      	add	sp, #8
 80006b4:	bd80      	pop	{r7, pc}

080006b6 <Send>:

static void Send(uint8_t value, uint8_t mode)
{
 80006b6:	b590      	push	{r4, r7, lr}
 80006b8:	b085      	sub	sp, #20
 80006ba:	af00      	add	r7, sp, #0
 80006bc:	0002      	movs	r2, r0
 80006be:	1dfb      	adds	r3, r7, #7
 80006c0:	701a      	strb	r2, [r3, #0]
 80006c2:	1dbb      	adds	r3, r7, #6
 80006c4:	1c0a      	adds	r2, r1, #0
 80006c6:	701a      	strb	r2, [r3, #0]
  uint8_t highnib = value & 0xF0;
 80006c8:	200f      	movs	r0, #15
 80006ca:	183b      	adds	r3, r7, r0
 80006cc:	1dfa      	adds	r2, r7, #7
 80006ce:	7812      	ldrb	r2, [r2, #0]
 80006d0:	210f      	movs	r1, #15
 80006d2:	438a      	bics	r2, r1
 80006d4:	701a      	strb	r2, [r3, #0]
  uint8_t lownib = (value<<4) & 0xF0;
 80006d6:	240e      	movs	r4, #14
 80006d8:	193b      	adds	r3, r7, r4
 80006da:	1dfa      	adds	r2, r7, #7
 80006dc:	7812      	ldrb	r2, [r2, #0]
 80006de:	0112      	lsls	r2, r2, #4
 80006e0:	701a      	strb	r2, [r3, #0]
  Write4Bits((highnib)|mode);
 80006e2:	183a      	adds	r2, r7, r0
 80006e4:	1dbb      	adds	r3, r7, #6
 80006e6:	7812      	ldrb	r2, [r2, #0]
 80006e8:	781b      	ldrb	r3, [r3, #0]
 80006ea:	4313      	orrs	r3, r2
 80006ec:	b2db      	uxtb	r3, r3
 80006ee:	0018      	movs	r0, r3
 80006f0:	f000 f80d 	bl	800070e <Write4Bits>
  Write4Bits((lownib)|mode);
 80006f4:	193a      	adds	r2, r7, r4
 80006f6:	1dbb      	adds	r3, r7, #6
 80006f8:	7812      	ldrb	r2, [r2, #0]
 80006fa:	781b      	ldrb	r3, [r3, #0]
 80006fc:	4313      	orrs	r3, r2
 80006fe:	b2db      	uxtb	r3, r3
 8000700:	0018      	movs	r0, r3
 8000702:	f000 f804 	bl	800070e <Write4Bits>
}
 8000706:	46c0      	nop			@ (mov r8, r8)
 8000708:	46bd      	mov	sp, r7
 800070a:	b005      	add	sp, #20
 800070c:	bd90      	pop	{r4, r7, pc}

0800070e <Write4Bits>:

static void Write4Bits(uint8_t value)
{
 800070e:	b580      	push	{r7, lr}
 8000710:	b082      	sub	sp, #8
 8000712:	af00      	add	r7, sp, #0
 8000714:	0002      	movs	r2, r0
 8000716:	1dfb      	adds	r3, r7, #7
 8000718:	701a      	strb	r2, [r3, #0]
  ExpanderWrite(value);
 800071a:	1dfb      	adds	r3, r7, #7
 800071c:	781b      	ldrb	r3, [r3, #0]
 800071e:	0018      	movs	r0, r3
 8000720:	f000 f80a 	bl	8000738 <ExpanderWrite>
  PulseEnable(value);
 8000724:	1dfb      	adds	r3, r7, #7
 8000726:	781b      	ldrb	r3, [r3, #0]
 8000728:	0018      	movs	r0, r3
 800072a:	f000 f825 	bl	8000778 <PulseEnable>
}
 800072e:	46c0      	nop			@ (mov r8, r8)
 8000730:	46bd      	mov	sp, r7
 8000732:	b002      	add	sp, #8
 8000734:	bd80      	pop	{r7, pc}
	...

08000738 <ExpanderWrite>:

static void ExpanderWrite(uint8_t _data)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b086      	sub	sp, #24
 800073c:	af02      	add	r7, sp, #8
 800073e:	0002      	movs	r2, r0
 8000740:	1dfb      	adds	r3, r7, #7
 8000742:	701a      	strb	r2, [r3, #0]
  uint8_t data = _data | dpBacklight;
 8000744:	4b0a      	ldr	r3, [pc, #40]	@ (8000770 <ExpanderWrite+0x38>)
 8000746:	781a      	ldrb	r2, [r3, #0]
 8000748:	1dfb      	adds	r3, r7, #7
 800074a:	781b      	ldrb	r3, [r3, #0]
 800074c:	4313      	orrs	r3, r2
 800074e:	b2da      	uxtb	r2, r3
 8000750:	210f      	movs	r1, #15
 8000752:	187b      	adds	r3, r7, r1
 8000754:	701a      	strb	r2, [r3, #0]
  HAL_I2C_Master_Transmit(&hi2c1, DEVICE_ADDR, (uint8_t*)&data, 1, 10);
 8000756:	187a      	adds	r2, r7, r1
 8000758:	4806      	ldr	r0, [pc, #24]	@ (8000774 <ExpanderWrite+0x3c>)
 800075a:	230a      	movs	r3, #10
 800075c:	9300      	str	r3, [sp, #0]
 800075e:	2301      	movs	r3, #1
 8000760:	214e      	movs	r1, #78	@ 0x4e
 8000762:	f001 f88b 	bl	800187c <HAL_I2C_Master_Transmit>
}
 8000766:	46c0      	nop			@ (mov r8, r8)
 8000768:	46bd      	mov	sp, r7
 800076a:	b004      	add	sp, #16
 800076c:	bd80      	pop	{r7, pc}
 800076e:	46c0      	nop			@ (mov r8, r8)
 8000770:	2000008c 	.word	0x2000008c
 8000774:	20000090 	.word	0x20000090

08000778 <PulseEnable>:

static void PulseEnable(uint8_t _data)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b082      	sub	sp, #8
 800077c:	af00      	add	r7, sp, #0
 800077e:	0002      	movs	r2, r0
 8000780:	1dfb      	adds	r3, r7, #7
 8000782:	701a      	strb	r2, [r3, #0]
  ExpanderWrite(_data | ENABLE);
 8000784:	1dfb      	adds	r3, r7, #7
 8000786:	781b      	ldrb	r3, [r3, #0]
 8000788:	2204      	movs	r2, #4
 800078a:	4313      	orrs	r3, r2
 800078c:	b2db      	uxtb	r3, r3
 800078e:	0018      	movs	r0, r3
 8000790:	f7ff ffd2 	bl	8000738 <ExpanderWrite>
  DelayUS(20);
 8000794:	2014      	movs	r0, #20
 8000796:	f000 f839 	bl	800080c <DelayUS>

  ExpanderWrite(_data & ~ENABLE);
 800079a:	1dfb      	adds	r3, r7, #7
 800079c:	781b      	ldrb	r3, [r3, #0]
 800079e:	2204      	movs	r2, #4
 80007a0:	4393      	bics	r3, r2
 80007a2:	b2db      	uxtb	r3, r3
 80007a4:	0018      	movs	r0, r3
 80007a6:	f7ff ffc7 	bl	8000738 <ExpanderWrite>
  DelayUS(20);
 80007aa:	2014      	movs	r0, #20
 80007ac:	f000 f82e 	bl	800080c <DelayUS>
}
 80007b0:	46c0      	nop			@ (mov r8, r8)
 80007b2:	46bd      	mov	sp, r7
 80007b4:	b002      	add	sp, #8
 80007b6:	bd80      	pop	{r7, pc}

080007b8 <DelayInit>:

static void DelayInit(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	af00      	add	r7, sp, #0
	// Включаем тактирование таймера
	RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 80007bc:	4b0e      	ldr	r3, [pc, #56]	@ (80007f8 <DelayInit+0x40>)
 80007be:	69da      	ldr	r2, [r3, #28]
 80007c0:	4b0d      	ldr	r3, [pc, #52]	@ (80007f8 <DelayInit+0x40>)
 80007c2:	2102      	movs	r1, #2
 80007c4:	430a      	orrs	r2, r1
 80007c6:	61da      	str	r2, [r3, #28]

    // Настраиваем таймер на 1 МГц (1 тик = 1 мкс)
	TIM3->PSC = (SystemCoreClock / 1000000) - 1;
 80007c8:	4b0c      	ldr	r3, [pc, #48]	@ (80007fc <DelayInit+0x44>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	490c      	ldr	r1, [pc, #48]	@ (8000800 <DelayInit+0x48>)
 80007ce:	0018      	movs	r0, r3
 80007d0:	f7ff fca4 	bl	800011c <__udivsi3>
 80007d4:	0003      	movs	r3, r0
 80007d6:	001a      	movs	r2, r3
 80007d8:	4b0a      	ldr	r3, [pc, #40]	@ (8000804 <DelayInit+0x4c>)
 80007da:	3a01      	subs	r2, #1
 80007dc:	629a      	str	r2, [r3, #40]	@ 0x28
	TIM3->ARR = 0xFFFF;
 80007de:	4b09      	ldr	r3, [pc, #36]	@ (8000804 <DelayInit+0x4c>)
 80007e0:	4a09      	ldr	r2, [pc, #36]	@ (8000808 <DelayInit+0x50>)
 80007e2:	62da      	str	r2, [r3, #44]	@ 0x2c
	TIM3->CR1 |= TIM_CR1_CEN;
 80007e4:	4b07      	ldr	r3, [pc, #28]	@ (8000804 <DelayInit+0x4c>)
 80007e6:	681a      	ldr	r2, [r3, #0]
 80007e8:	4b06      	ldr	r3, [pc, #24]	@ (8000804 <DelayInit+0x4c>)
 80007ea:	2101      	movs	r1, #1
 80007ec:	430a      	orrs	r2, r1
 80007ee:	601a      	str	r2, [r3, #0]

}
 80007f0:	46c0      	nop			@ (mov r8, r8)
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	46c0      	nop			@ (mov r8, r8)
 80007f8:	40021000 	.word	0x40021000
 80007fc:	20000010 	.word	0x20000010
 8000800:	000f4240 	.word	0x000f4240
 8000804:	40000400 	.word	0x40000400
 8000808:	0000ffff 	.word	0x0000ffff

0800080c <DelayUS>:

static void DelayUS(uint32_t us) {
 800080c:	b580      	push	{r7, lr}
 800080e:	b084      	sub	sp, #16
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]

	 uint32_t start = TIM3->CNT;
 8000814:	4b09      	ldr	r3, [pc, #36]	@ (800083c <DelayUS+0x30>)
 8000816:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000818:	60fb      	str	r3, [r7, #12]
	 while ( (uint16_t)(TIM3->CNT - start) < us );
 800081a:	46c0      	nop			@ (mov r8, r8)
 800081c:	4b07      	ldr	r3, [pc, #28]	@ (800083c <DelayUS+0x30>)
 800081e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000820:	b29a      	uxth	r2, r3
 8000822:	68fb      	ldr	r3, [r7, #12]
 8000824:	b29b      	uxth	r3, r3
 8000826:	1ad3      	subs	r3, r2, r3
 8000828:	b29b      	uxth	r3, r3
 800082a:	001a      	movs	r2, r3
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	4293      	cmp	r3, r2
 8000830:	d8f4      	bhi.n	800081c <DelayUS+0x10>
}
 8000832:	46c0      	nop			@ (mov r8, r8)
 8000834:	46c0      	nop			@ (mov r8, r8)
 8000836:	46bd      	mov	sp, r7
 8000838:	b004      	add	sp, #16
 800083a:	bd80      	pop	{r7, pc}
 800083c:	40000400 	.word	0x40000400

08000840 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000844:	f000 fc64 	bl	8001110 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000848:	f000 f870 	bl	800092c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800084c:	f000 f906 	bl	8000a5c <MX_GPIO_Init>
  MX_I2C1_Init();
 8000850:	f000 f8c4 	bl	80009dc <MX_I2C1_Init>
  MX_TIM1_Init();
 8000854:	f000 f96c 	bl	8000b30 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  HD44780_Init(2);
 8000858:	2002      	movs	r0, #2
 800085a:	f7ff fdd5 	bl	8000408 <HD44780_Init>

  HD44780_Clear();
 800085e:	f7ff fe5f 	bl	8000520 <HD44780_Clear>
  display_user_enter();
 8000862:	f000 f9e9 	bl	8000c38 <display_user_enter>
	  /* ЛОГИКА :
	   * ОПРОС КНОПОК , ЕСЛИ НАЖАЛИ ТО ПРОГРАММА МЕНЯЕТСЯ
	   * ОТСЧЕТ ЗАДАННОГО ВРЕМЕНИ
	   * ПО ОКОНЧАНИЮ ВЫВОДИМ СИГНАЛ НА ПИН КОТОРЫЙ УПРАВЛЯЕТ ДРАЙВЕРОМ
	   * */
		  if (state == RUNNING) {
 8000866:	4b29      	ldr	r3, [pc, #164]	@ (800090c <main+0xcc>)
 8000868:	781b      	ldrb	r3, [r3, #0]
 800086a:	2b01      	cmp	r3, #1
 800086c:	d118      	bne.n	80008a0 <main+0x60>
			     // ЗДЕСЬ ПРОИСХОДИТ ВСЕ ВОВРЕМЯ ОТСЧЕТА
			   if ( display_update_flag ){    // Обновляем каждую секунду по прерыванию таймера
 800086e:	4b28      	ldr	r3, [pc, #160]	@ (8000910 <main+0xd0>)
 8000870:	781b      	ldrb	r3, [r3, #0]
 8000872:	2b00      	cmp	r3, #0
 8000874:	d010      	beq.n	8000898 <main+0x58>

				    display_update_flag = 0;
 8000876:	4b26      	ldr	r3, [pc, #152]	@ (8000910 <main+0xd0>)
 8000878:	2200      	movs	r2, #0
 800087a:	701a      	strb	r2, [r3, #0]
				    display_time_update();
 800087c:	f000 f9b0 	bl	8000be0 <display_time_update>

				    if( seconds == 0 && minutes == 0){
 8000880:	4b24      	ldr	r3, [pc, #144]	@ (8000914 <main+0xd4>)
 8000882:	781b      	ldrb	r3, [r3, #0]
 8000884:	2b00      	cmp	r3, #0
 8000886:	d107      	bne.n	8000898 <main+0x58>
 8000888:	4b23      	ldr	r3, [pc, #140]	@ (8000918 <main+0xd8>)
 800088a:	781b      	ldrb	r3, [r3, #0]
 800088c:	2b00      	cmp	r3, #0
 800088e:	d103      	bne.n	8000898 <main+0x58>
				    	HD44780_Clear();
 8000890:	f7ff fe46 	bl	8000520 <HD44780_Clear>
				    	display_user_enter();
 8000894:	f000 f9d0 	bl	8000c38 <display_user_enter>
				    }
			   }

			        led_state = ON;
 8000898:	4b20      	ldr	r3, [pc, #128]	@ (800091c <main+0xdc>)
 800089a:	2201      	movs	r2, #1
 800089c:	701a      	strb	r2, [r3, #0]
 800089e:	e002      	b.n	80008a6 <main+0x66>

	       } else {

	    	        led_state = OFF;
 80008a0:	4b1e      	ldr	r3, [pc, #120]	@ (800091c <main+0xdc>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	701a      	strb	r2, [r3, #0]
	       }

		       // ВВОД ДАННЫХ ОТ ПОЛЬЗОВАТЕЛЯ
		  if ( btn_start_stop_flag ) {
 80008a6:	4b1e      	ldr	r3, [pc, #120]	@ (8000920 <main+0xe0>)
 80008a8:	781b      	ldrb	r3, [r3, #0]
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d004      	beq.n	80008b8 <main+0x78>
			   btn_start_stop_flag = 0; // Обрабатываем флаг
 80008ae:	4b1c      	ldr	r3, [pc, #112]	@ (8000920 <main+0xe0>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	701a      	strb	r2, [r3, #0]
			   Button_StartStop();
 80008b4:	f000 fa88 	bl	8000dc8 <Button_StartStop>
		  }

		  if ( btn_seconds_flag ) {
 80008b8:	4b1a      	ldr	r3, [pc, #104]	@ (8000924 <main+0xe4>)
 80008ba:	781b      	ldrb	r3, [r3, #0]
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d006      	beq.n	80008ce <main+0x8e>

			   btn_seconds_flag =  0;// Обрабатываем флаг
 80008c0:	4b18      	ldr	r3, [pc, #96]	@ (8000924 <main+0xe4>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	701a      	strb	r2, [r3, #0]
			   Button_Seconds();
 80008c6:	f000 fa67 	bl	8000d98 <Button_Seconds>
			   // Отображаем изменения
			   display_update_seconds();
 80008ca:	f000 fa01 	bl	8000cd0 <display_update_seconds>
		  }

		  if ( btn_minutes_flag ) {
 80008ce:	4b16      	ldr	r3, [pc, #88]	@ (8000928 <main+0xe8>)
 80008d0:	781b      	ldrb	r3, [r3, #0]
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d006      	beq.n	80008e4 <main+0xa4>
		  	   btn_minutes_flag = 0; // Обрабатываем флаг
 80008d6:	4b14      	ldr	r3, [pc, #80]	@ (8000928 <main+0xe8>)
 80008d8:	2200      	movs	r2, #0
 80008da:	701a      	strb	r2, [r3, #0]
		  	   Button_Minutes();
 80008dc:	f000 fa44 	bl	8000d68 <Button_Minutes>
		  	   // Отображаем изменения
		  	   display_update_minutes();
 80008e0:	f000 fa1c 	bl	8000d1c <display_update_minutes>
		  }

		   if( led_state ) {
 80008e4:	4b0d      	ldr	r3, [pc, #52]	@ (800091c <main+0xdc>)
 80008e6:	781b      	ldrb	r3, [r3, #0]
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d007      	beq.n	80008fc <main+0xbc>

			   HAL_GPIO_WritePin(GPIOA , DRIVER_PIN , GPIO_PIN_SET);  // ВКЛЮЧАЕМ УФ-ЛАМПУ
 80008ec:	2390      	movs	r3, #144	@ 0x90
 80008ee:	05db      	lsls	r3, r3, #23
 80008f0:	2201      	movs	r2, #1
 80008f2:	2101      	movs	r1, #1
 80008f4:	0018      	movs	r0, r3
 80008f6:	f000 fee1 	bl	80016bc <HAL_GPIO_WritePin>
 80008fa:	e7b4      	b.n	8000866 <main+0x26>

		   } else {

			   HAL_GPIO_WritePin(GPIOA , DRIVER_PIN , GPIO_PIN_RESET);  // ВЫКЛЮЧАЕМ УФ-ЛАМПУ
 80008fc:	2390      	movs	r3, #144	@ 0x90
 80008fe:	05db      	lsls	r3, r3, #23
 8000900:	2200      	movs	r2, #0
 8000902:	2101      	movs	r1, #1
 8000904:	0018      	movs	r0, r3
 8000906:	f000 fed9 	bl	80016bc <HAL_GPIO_WritePin>
		  if (state == RUNNING) {
 800090a:	e7ac      	b.n	8000866 <main+0x26>
 800090c:	2000012c 	.word	0x2000012c
 8000910:	20000130 	.word	0x20000130
 8000914:	2000012f 	.word	0x2000012f
 8000918:	2000012e 	.word	0x2000012e
 800091c:	2000012d 	.word	0x2000012d
 8000920:	20000131 	.word	0x20000131
 8000924:	20000132 	.word	0x20000132
 8000928:	20000133 	.word	0x20000133

0800092c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800092c:	b590      	push	{r4, r7, lr}
 800092e:	b095      	sub	sp, #84	@ 0x54
 8000930:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000932:	2420      	movs	r4, #32
 8000934:	193b      	adds	r3, r7, r4
 8000936:	0018      	movs	r0, r3
 8000938:	2330      	movs	r3, #48	@ 0x30
 800093a:	001a      	movs	r2, r3
 800093c:	2100      	movs	r1, #0
 800093e:	f002 fc67 	bl	8003210 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000942:	2310      	movs	r3, #16
 8000944:	18fb      	adds	r3, r7, r3
 8000946:	0018      	movs	r0, r3
 8000948:	2310      	movs	r3, #16
 800094a:	001a      	movs	r2, r3
 800094c:	2100      	movs	r1, #0
 800094e:	f002 fc5f 	bl	8003210 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000952:	003b      	movs	r3, r7
 8000954:	0018      	movs	r0, r3
 8000956:	2310      	movs	r3, #16
 8000958:	001a      	movs	r2, r3
 800095a:	2100      	movs	r1, #0
 800095c:	f002 fc58 	bl	8003210 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000960:	0021      	movs	r1, r4
 8000962:	187b      	adds	r3, r7, r1
 8000964:	2202      	movs	r2, #2
 8000966:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000968:	187b      	adds	r3, r7, r1
 800096a:	2201      	movs	r2, #1
 800096c:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800096e:	187b      	adds	r3, r7, r1
 8000970:	2210      	movs	r2, #16
 8000972:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000974:	187b      	adds	r3, r7, r1
 8000976:	2200      	movs	r2, #0
 8000978:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800097a:	187b      	adds	r3, r7, r1
 800097c:	0018      	movs	r0, r3
 800097e:	f001 fb75 	bl	800206c <HAL_RCC_OscConfig>
 8000982:	1e03      	subs	r3, r0, #0
 8000984:	d001      	beq.n	800098a <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000986:	f000 facb 	bl	8000f20 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800098a:	2110      	movs	r1, #16
 800098c:	187b      	adds	r3, r7, r1
 800098e:	2207      	movs	r2, #7
 8000990:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000992:	187b      	adds	r3, r7, r1
 8000994:	2200      	movs	r2, #0
 8000996:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000998:	187b      	adds	r3, r7, r1
 800099a:	2200      	movs	r2, #0
 800099c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800099e:	187b      	adds	r3, r7, r1
 80009a0:	2200      	movs	r2, #0
 80009a2:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80009a4:	187b      	adds	r3, r7, r1
 80009a6:	2100      	movs	r1, #0
 80009a8:	0018      	movs	r0, r3
 80009aa:	f001 fe79 	bl	80026a0 <HAL_RCC_ClockConfig>
 80009ae:	1e03      	subs	r3, r0, #0
 80009b0:	d001      	beq.n	80009b6 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80009b2:	f000 fab5 	bl	8000f20 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80009b6:	003b      	movs	r3, r7
 80009b8:	2220      	movs	r2, #32
 80009ba:	601a      	str	r2, [r3, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80009bc:	003b      	movs	r3, r7
 80009be:	2200      	movs	r2, #0
 80009c0:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009c2:	003b      	movs	r3, r7
 80009c4:	0018      	movs	r0, r3
 80009c6:	f001 ff8f 	bl	80028e8 <HAL_RCCEx_PeriphCLKConfig>
 80009ca:	1e03      	subs	r3, r0, #0
 80009cc:	d001      	beq.n	80009d2 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80009ce:	f000 faa7 	bl	8000f20 <Error_Handler>
  }
}
 80009d2:	46c0      	nop			@ (mov r8, r8)
 80009d4:	46bd      	mov	sp, r7
 80009d6:	b015      	add	sp, #84	@ 0x54
 80009d8:	bd90      	pop	{r4, r7, pc}
	...

080009dc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80009e0:	4b1b      	ldr	r3, [pc, #108]	@ (8000a50 <MX_I2C1_Init+0x74>)
 80009e2:	4a1c      	ldr	r2, [pc, #112]	@ (8000a54 <MX_I2C1_Init+0x78>)
 80009e4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00201D2B;
 80009e6:	4b1a      	ldr	r3, [pc, #104]	@ (8000a50 <MX_I2C1_Init+0x74>)
 80009e8:	4a1b      	ldr	r2, [pc, #108]	@ (8000a58 <MX_I2C1_Init+0x7c>)
 80009ea:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80009ec:	4b18      	ldr	r3, [pc, #96]	@ (8000a50 <MX_I2C1_Init+0x74>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009f2:	4b17      	ldr	r3, [pc, #92]	@ (8000a50 <MX_I2C1_Init+0x74>)
 80009f4:	2201      	movs	r2, #1
 80009f6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009f8:	4b15      	ldr	r3, [pc, #84]	@ (8000a50 <MX_I2C1_Init+0x74>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80009fe:	4b14      	ldr	r3, [pc, #80]	@ (8000a50 <MX_I2C1_Init+0x74>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a04:	4b12      	ldr	r3, [pc, #72]	@ (8000a50 <MX_I2C1_Init+0x74>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a0a:	4b11      	ldr	r3, [pc, #68]	@ (8000a50 <MX_I2C1_Init+0x74>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a10:	4b0f      	ldr	r3, [pc, #60]	@ (8000a50 <MX_I2C1_Init+0x74>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a16:	4b0e      	ldr	r3, [pc, #56]	@ (8000a50 <MX_I2C1_Init+0x74>)
 8000a18:	0018      	movs	r0, r3
 8000a1a:	f000 fe89 	bl	8001730 <HAL_I2C_Init>
 8000a1e:	1e03      	subs	r3, r0, #0
 8000a20:	d001      	beq.n	8000a26 <MX_I2C1_Init+0x4a>
  {
     Error_Handler();
 8000a22:	f000 fa7d 	bl	8000f20 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a26:	4b0a      	ldr	r3, [pc, #40]	@ (8000a50 <MX_I2C1_Init+0x74>)
 8000a28:	2100      	movs	r1, #0
 8000a2a:	0018      	movs	r0, r3
 8000a2c:	f001 fa86 	bl	8001f3c <HAL_I2CEx_ConfigAnalogFilter>
 8000a30:	1e03      	subs	r3, r0, #0
 8000a32:	d001      	beq.n	8000a38 <MX_I2C1_Init+0x5c>
  {
     Error_Handler();
 8000a34:	f000 fa74 	bl	8000f20 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000a38:	4b05      	ldr	r3, [pc, #20]	@ (8000a50 <MX_I2C1_Init+0x74>)
 8000a3a:	2100      	movs	r1, #0
 8000a3c:	0018      	movs	r0, r3
 8000a3e:	f001 fac9 	bl	8001fd4 <HAL_I2CEx_ConfigDigitalFilter>
 8000a42:	1e03      	subs	r3, r0, #0
 8000a44:	d001      	beq.n	8000a4a <MX_I2C1_Init+0x6e>
  {
     Error_Handler();
 8000a46:	f000 fa6b 	bl	8000f20 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a4a:	46c0      	nop			@ (mov r8, r8)
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bd80      	pop	{r7, pc}
 8000a50:	20000090 	.word	0x20000090
 8000a54:	40005400 	.word	0x40005400
 8000a58:	00201d2b 	.word	0x00201d2b

08000a5c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a5c:	b590      	push	{r4, r7, lr}
 8000a5e:	b089      	sub	sp, #36	@ 0x24
 8000a60:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a62:	240c      	movs	r4, #12
 8000a64:	193b      	adds	r3, r7, r4
 8000a66:	0018      	movs	r0, r3
 8000a68:	2314      	movs	r3, #20
 8000a6a:	001a      	movs	r2, r3
 8000a6c:	2100      	movs	r1, #0
 8000a6e:	f002 fbcf 	bl	8003210 <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a72:	4b2e      	ldr	r3, [pc, #184]	@ (8000b2c <MX_GPIO_Init+0xd0>)
 8000a74:	695a      	ldr	r2, [r3, #20]
 8000a76:	4b2d      	ldr	r3, [pc, #180]	@ (8000b2c <MX_GPIO_Init+0xd0>)
 8000a78:	2180      	movs	r1, #128	@ 0x80
 8000a7a:	03c9      	lsls	r1, r1, #15
 8000a7c:	430a      	orrs	r2, r1
 8000a7e:	615a      	str	r2, [r3, #20]
 8000a80:	4b2a      	ldr	r3, [pc, #168]	@ (8000b2c <MX_GPIO_Init+0xd0>)
 8000a82:	695a      	ldr	r2, [r3, #20]
 8000a84:	2380      	movs	r3, #128	@ 0x80
 8000a86:	03db      	lsls	r3, r3, #15
 8000a88:	4013      	ands	r3, r2
 8000a8a:	60bb      	str	r3, [r7, #8]
 8000a8c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a8e:	4b27      	ldr	r3, [pc, #156]	@ (8000b2c <MX_GPIO_Init+0xd0>)
 8000a90:	695a      	ldr	r2, [r3, #20]
 8000a92:	4b26      	ldr	r3, [pc, #152]	@ (8000b2c <MX_GPIO_Init+0xd0>)
 8000a94:	2180      	movs	r1, #128	@ 0x80
 8000a96:	0289      	lsls	r1, r1, #10
 8000a98:	430a      	orrs	r2, r1
 8000a9a:	615a      	str	r2, [r3, #20]
 8000a9c:	4b23      	ldr	r3, [pc, #140]	@ (8000b2c <MX_GPIO_Init+0xd0>)
 8000a9e:	695a      	ldr	r2, [r3, #20]
 8000aa0:	2380      	movs	r3, #128	@ 0x80
 8000aa2:	029b      	lsls	r3, r3, #10
 8000aa4:	4013      	ands	r3, r2
 8000aa6:	607b      	str	r3, [r7, #4]
 8000aa8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DRIVER_PIN_GPIO_Port, DRIVER_PIN, GPIO_PIN_RESET);
 8000aaa:	2390      	movs	r3, #144	@ 0x90
 8000aac:	05db      	lsls	r3, r3, #23
 8000aae:	2200      	movs	r2, #0
 8000ab0:	2101      	movs	r1, #1
 8000ab2:	0018      	movs	r0, r3
 8000ab4:	f000 fe02 	bl	80016bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : DRIVER_PIN_Pin */
  GPIO_InitStruct.Pin = DRIVER_PIN;
 8000ab8:	193b      	adds	r3, r7, r4
 8000aba:	2201      	movs	r2, #1
 8000abc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000abe:	193b      	adds	r3, r7, r4
 8000ac0:	2201      	movs	r2, #1
 8000ac2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000ac4:	193b      	adds	r3, r7, r4
 8000ac6:	2202      	movs	r2, #2
 8000ac8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aca:	193b      	adds	r3, r7, r4
 8000acc:	2200      	movs	r2, #0
 8000ace:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(DRIVER_PIN_GPIO_Port, &GPIO_InitStruct);
 8000ad0:	193a      	adds	r2, r7, r4
 8000ad2:	2390      	movs	r3, #144	@ 0x90
 8000ad4:	05db      	lsls	r3, r3, #23
 8000ad6:	0011      	movs	r1, r2
 8000ad8:	0018      	movs	r0, r3
 8000ada:	f000 fc7f 	bl	80013dc <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_START_STOP_Pin BUTTON_SECONDS_Pin BUTTON_MINUTES_Pin */
  GPIO_InitStruct.Pin = BUTTON_START_STOP_PIN|BUTTON_SECONDS_PIN|BUTTON_MINUTES_PIN;
 8000ade:	0021      	movs	r1, r4
 8000ae0:	187b      	adds	r3, r7, r1
 8000ae2:	220e      	movs	r2, #14
 8000ae4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000ae6:	187b      	adds	r3, r7, r1
 8000ae8:	2284      	movs	r2, #132	@ 0x84
 8000aea:	0392      	lsls	r2, r2, #14
 8000aec:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000aee:	187b      	adds	r3, r7, r1
 8000af0:	2201      	movs	r2, #1
 8000af2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000af4:	187a      	adds	r2, r7, r1
 8000af6:	2390      	movs	r3, #144	@ 0x90
 8000af8:	05db      	lsls	r3, r3, #23
 8000afa:	0011      	movs	r1, r2
 8000afc:	0018      	movs	r0, r3
 8000afe:	f000 fc6d 	bl	80013dc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 8000b02:	2200      	movs	r2, #0
 8000b04:	2100      	movs	r1, #0
 8000b06:	2005      	movs	r0, #5
 8000b08:	f000 fc36 	bl	8001378 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8000b0c:	2005      	movs	r0, #5
 8000b0e:	f000 fc48 	bl	80013a2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 0, 0);
 8000b12:	2200      	movs	r2, #0
 8000b14:	2100      	movs	r1, #0
 8000b16:	2006      	movs	r0, #6
 8000b18:	f000 fc2e 	bl	8001378 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 8000b1c:	2006      	movs	r0, #6
 8000b1e:	f000 fc40 	bl	80013a2 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000b22:	46c0      	nop			@ (mov r8, r8)
 8000b24:	46bd      	mov	sp, r7
 8000b26:	b009      	add	sp, #36	@ 0x24
 8000b28:	bd90      	pop	{r4, r7, pc}
 8000b2a:	46c0      	nop			@ (mov r8, r8)
 8000b2c:	40021000 	.word	0x40021000

08000b30 <MX_TIM1_Init>:

static void MX_TIM1_Init(void){
 8000b30:	b590      	push	{r4, r7, lr}
 8000b32:	b087      	sub	sp, #28
 8000b34:	af00      	add	r7, sp, #0
     // Инициализация структуры таймера
	__HAL_RCC_TIM1_CLK_ENABLE();  // Включение тактирования таймера.
 8000b36:	4b25      	ldr	r3, [pc, #148]	@ (8000bcc <MX_TIM1_Init+0x9c>)
 8000b38:	699a      	ldr	r2, [r3, #24]
 8000b3a:	4b24      	ldr	r3, [pc, #144]	@ (8000bcc <MX_TIM1_Init+0x9c>)
 8000b3c:	2180      	movs	r1, #128	@ 0x80
 8000b3e:	0109      	lsls	r1, r1, #4
 8000b40:	430a      	orrs	r2, r1
 8000b42:	619a      	str	r2, [r3, #24]
 8000b44:	4b21      	ldr	r3, [pc, #132]	@ (8000bcc <MX_TIM1_Init+0x9c>)
 8000b46:	699a      	ldr	r2, [r3, #24]
 8000b48:	2380      	movs	r3, #128	@ 0x80
 8000b4a:	011b      	lsls	r3, r3, #4
 8000b4c:	4013      	ands	r3, r2
 8000b4e:	607b      	str	r3, [r7, #4]
 8000b50:	687b      	ldr	r3, [r7, #4]
	/* конфигурация TIM1 */
	htim1.Instance = TIM1;
 8000b52:	4b1f      	ldr	r3, [pc, #124]	@ (8000bd0 <MX_TIM1_Init+0xa0>)
 8000b54:	4a1f      	ldr	r2, [pc, #124]	@ (8000bd4 <MX_TIM1_Init+0xa4>)
 8000b56:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 8000 - 1;                         // 1 тик = 1мс
 8000b58:	4b1d      	ldr	r3, [pc, #116]	@ (8000bd0 <MX_TIM1_Init+0xa0>)
 8000b5a:	4a1f      	ldr	r2, [pc, #124]	@ (8000bd8 <MX_TIM1_Init+0xa8>)
 8000b5c:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;             // счет вверх
 8000b5e:	4b1c      	ldr	r3, [pc, #112]	@ (8000bd0 <MX_TIM1_Init+0xa0>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 1000 - 1;                            // период 1с
 8000b64:	4b1a      	ldr	r3, [pc, #104]	@ (8000bd0 <MX_TIM1_Init+0xa0>)
 8000b66:	4a1d      	ldr	r2, [pc, #116]	@ (8000bdc <MX_TIM1_Init+0xac>)
 8000b68:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b6a:	4b19      	ldr	r3, [pc, #100]	@ (8000bd0 <MX_TIM1_Init+0xa0>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8000b70:	4b17      	ldr	r3, [pc, #92]	@ (8000bd0 <MX_TIM1_Init+0xa0>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b76:	4b16      	ldr	r3, [pc, #88]	@ (8000bd0 <MX_TIM1_Init+0xa0>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 8000b7c:	4b14      	ldr	r3, [pc, #80]	@ (8000bd0 <MX_TIM1_Init+0xa0>)
 8000b7e:	0018      	movs	r0, r3
 8000b80:	f001 ff80 	bl	8002a84 <HAL_TIM_Base_Init>

	    // ошибка инициализации
	}

	 // ключение тактирования
	 TIM_ClockConfigTypeDef sClockSourceConfig = {0};   // Тактирование таймера ;
 8000b84:	2408      	movs	r4, #8
 8000b86:	193b      	adds	r3, r7, r4
 8000b88:	0018      	movs	r0, r3
 8000b8a:	2310      	movs	r3, #16
 8000b8c:	001a      	movs	r2, r3
 8000b8e:	2100      	movs	r1, #0
 8000b90:	f002 fb3e 	bl	8003210 <memset>
	 sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b94:	0021      	movs	r1, r4
 8000b96:	187b      	adds	r3, r7, r1
 8000b98:	2280      	movs	r2, #128	@ 0x80
 8000b9a:	0152      	lsls	r2, r2, #5
 8000b9c:	601a      	str	r2, [r3, #0]
	 if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 8000b9e:	187a      	adds	r2, r7, r1
 8000ba0:	4b0b      	ldr	r3, [pc, #44]	@ (8000bd0 <MX_TIM1_Init+0xa0>)
 8000ba2:	0011      	movs	r1, r2
 8000ba4:	0018      	movs	r0, r3
 8000ba6:	f002 f8f9 	bl	8002d9c <HAL_TIM_ConfigClockSource>
	 // ошибка инициализации
	 }

	 // Разрешить работу прерываний
	 HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 0, 0);
 8000baa:	2200      	movs	r2, #0
 8000bac:	2100      	movs	r1, #0
 8000bae:	200d      	movs	r0, #13
 8000bb0:	f000 fbe2 	bl	8001378 <HAL_NVIC_SetPriority>
	 HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 8000bb4:	200d      	movs	r0, #13
 8000bb6:	f000 fbf4 	bl	80013a2 <HAL_NVIC_EnableIRQ>

	 HAL_TIM_Base_Start_IT (&htim1); // Запуск в режиме прерываний
 8000bba:	4b05      	ldr	r3, [pc, #20]	@ (8000bd0 <MX_TIM1_Init+0xa0>)
 8000bbc:	0018      	movs	r0, r3
 8000bbe:	f001 ffb9 	bl	8002b34 <HAL_TIM_Base_Start_IT>

}
 8000bc2:	46c0      	nop			@ (mov r8, r8)
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	b007      	add	sp, #28
 8000bc8:	bd90      	pop	{r4, r7, pc}
 8000bca:	46c0      	nop			@ (mov r8, r8)
 8000bcc:	40021000 	.word	0x40021000
 8000bd0:	200000e4 	.word	0x200000e4
 8000bd4:	40012c00 	.word	0x40012c00
 8000bd8:	00001f3f 	.word	0x00001f3f
 8000bdc:	000003e7 	.word	0x000003e7

08000be0 <display_time_update>:

/* USER CODE BEGIN 4 */

void display_time_update(void) {
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b084      	sub	sp, #16
 8000be4:	af00      	add	r7, sp, #0
	// для конвертации из int в char
	 char time_buffer[16];
	 sprintf(time_buffer, "%02d:%02d", minutes, seconds);
 8000be6:	4b10      	ldr	r3, [pc, #64]	@ (8000c28 <display_time_update+0x48>)
 8000be8:	781b      	ldrb	r3, [r3, #0]
 8000bea:	001a      	movs	r2, r3
 8000bec:	4b0f      	ldr	r3, [pc, #60]	@ (8000c2c <display_time_update+0x4c>)
 8000bee:	781b      	ldrb	r3, [r3, #0]
 8000bf0:	490f      	ldr	r1, [pc, #60]	@ (8000c30 <display_time_update+0x50>)
 8000bf2:	0038      	movs	r0, r7
 8000bf4:	f002 faea 	bl	80031cc <siprintf>

     HD44780_Clear();
 8000bf8:	f7ff fc92 	bl	8000520 <HD44780_Clear>
	 HD44780_SetCursor(0,1);
 8000bfc:	2101      	movs	r1, #1
 8000bfe:	2000      	movs	r0, #0
 8000c00:	f7ff fca8 	bl	8000554 <HD44780_SetCursor>
	 HD44780_PrintStr("  TIMER:");
 8000c04:	4b0b      	ldr	r3, [pc, #44]	@ (8000c34 <display_time_update+0x54>)
 8000c06:	0018      	movs	r0, r3
 8000c08:	f7ff fd20 	bl	800064c <HD44780_PrintStr>
	 HD44780_SetCursor(9,1);
 8000c0c:	2101      	movs	r1, #1
 8000c0e:	2009      	movs	r0, #9
 8000c10:	f7ff fca0 	bl	8000554 <HD44780_SetCursor>
	 HD44780_PrintStr(time_buffer);  // ПЕЧАТАЕМ ВРЕМЯ
 8000c14:	003b      	movs	r3, r7
 8000c16:	0018      	movs	r0, r3
 8000c18:	f7ff fd18 	bl	800064c <HD44780_PrintStr>

	 HD44780_Display();
 8000c1c:	f7ff fcd2 	bl	80005c4 <HD44780_Display>

}// обновление дисплея отсчета
 8000c20:	46c0      	nop			@ (mov r8, r8)
 8000c22:	46bd      	mov	sp, r7
 8000c24:	b004      	add	sp, #16
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	2000012e 	.word	0x2000012e
 8000c2c:	2000012f 	.word	0x2000012f
 8000c30:	08003b2c 	.word	0x08003b2c
 8000c34:	08003b38 	.word	0x08003b38

08000c38 <display_user_enter>:

void display_user_enter(void) {
 8000c38:	b590      	push	{r4, r7, lr}
 8000c3a:	b085      	sub	sp, #20
 8000c3c:	af00      	add	r7, sp, #0
	// для конвертации из int в char
	char min_buffer[8];
	char sec_buffer[8];

	// Форматируем минуты и секунды отдельно
	sprintf(min_buffer, "%02d", minutes);
 8000c3e:	4b1e      	ldr	r3, [pc, #120]	@ (8000cb8 <display_user_enter+0x80>)
 8000c40:	781b      	ldrb	r3, [r3, #0]
 8000c42:	001a      	movs	r2, r3
 8000c44:	491d      	ldr	r1, [pc, #116]	@ (8000cbc <display_user_enter+0x84>)
 8000c46:	2408      	movs	r4, #8
 8000c48:	193b      	adds	r3, r7, r4
 8000c4a:	0018      	movs	r0, r3
 8000c4c:	f002 fabe 	bl	80031cc <siprintf>
	sprintf(sec_buffer, "%02d", seconds);
 8000c50:	4b1b      	ldr	r3, [pc, #108]	@ (8000cc0 <display_user_enter+0x88>)
 8000c52:	781b      	ldrb	r3, [r3, #0]
 8000c54:	001a      	movs	r2, r3
 8000c56:	4919      	ldr	r1, [pc, #100]	@ (8000cbc <display_user_enter+0x84>)
 8000c58:	003b      	movs	r3, r7
 8000c5a:	0018      	movs	r0, r3
 8000c5c:	f002 fab6 	bl	80031cc <siprintf>

	HD44780_SetCursor(0,0);
 8000c60:	2100      	movs	r1, #0
 8000c62:	2000      	movs	r0, #0
 8000c64:	f7ff fc76 	bl	8000554 <HD44780_SetCursor>
	HD44780_PrintStr(" PLS ENTER TIME ");
 8000c68:	4b16      	ldr	r3, [pc, #88]	@ (8000cc4 <display_user_enter+0x8c>)
 8000c6a:	0018      	movs	r0, r3
 8000c6c:	f7ff fcee 	bl	800064c <HD44780_PrintStr>

	HD44780_SetCursor(0,1);
 8000c70:	2101      	movs	r1, #1
 8000c72:	2000      	movs	r0, #0
 8000c74:	f7ff fc6e 	bl	8000554 <HD44780_SetCursor>
	HD44780_PrintStr("SEC:");
 8000c78:	4b13      	ldr	r3, [pc, #76]	@ (8000cc8 <display_user_enter+0x90>)
 8000c7a:	0018      	movs	r0, r3
 8000c7c:	f7ff fce6 	bl	800064c <HD44780_PrintStr>
	HD44780_SetCursor(5,1);
 8000c80:	2101      	movs	r1, #1
 8000c82:	2005      	movs	r0, #5
 8000c84:	f7ff fc66 	bl	8000554 <HD44780_SetCursor>
	HD44780_PrintStr(sec_buffer);  // Только секунды
 8000c88:	003b      	movs	r3, r7
 8000c8a:	0018      	movs	r0, r3
 8000c8c:	f7ff fcde 	bl	800064c <HD44780_PrintStr>

	HD44780_SetCursor(8,1);
 8000c90:	2101      	movs	r1, #1
 8000c92:	2008      	movs	r0, #8
 8000c94:	f7ff fc5e 	bl	8000554 <HD44780_SetCursor>
	HD44780_PrintStr("MIN:");
 8000c98:	4b0c      	ldr	r3, [pc, #48]	@ (8000ccc <display_user_enter+0x94>)
 8000c9a:	0018      	movs	r0, r3
 8000c9c:	f7ff fcd6 	bl	800064c <HD44780_PrintStr>
	HD44780_SetCursor(13,1);
 8000ca0:	2101      	movs	r1, #1
 8000ca2:	200d      	movs	r0, #13
 8000ca4:	f7ff fc56 	bl	8000554 <HD44780_SetCursor>
	HD44780_PrintStr(min_buffer);  // Только минуты
 8000ca8:	193b      	adds	r3, r7, r4
 8000caa:	0018      	movs	r0, r3
 8000cac:	f7ff fcce 	bl	800064c <HD44780_PrintStr>
} // обновление дисплея приветсвия
 8000cb0:	46c0      	nop			@ (mov r8, r8)
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	b005      	add	sp, #20
 8000cb6:	bd90      	pop	{r4, r7, pc}
 8000cb8:	2000012e 	.word	0x2000012e
 8000cbc:	08003b44 	.word	0x08003b44
 8000cc0:	2000012f 	.word	0x2000012f
 8000cc4:	08003b4c 	.word	0x08003b4c
 8000cc8:	08003b60 	.word	0x08003b60
 8000ccc:	08003b68 	.word	0x08003b68

08000cd0 <display_update_seconds>:

void display_update_seconds(void){
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b082      	sub	sp, #8
 8000cd4:	af00      	add	r7, sp, #0
	 char sec_buffer[8];
	 sprintf(sec_buffer, "%02d", seconds);
 8000cd6:	4b0e      	ldr	r3, [pc, #56]	@ (8000d10 <display_update_seconds+0x40>)
 8000cd8:	781b      	ldrb	r3, [r3, #0]
 8000cda:	001a      	movs	r2, r3
 8000cdc:	490d      	ldr	r1, [pc, #52]	@ (8000d14 <display_update_seconds+0x44>)
 8000cde:	003b      	movs	r3, r7
 8000ce0:	0018      	movs	r0, r3
 8000ce2:	f002 fa73 	bl	80031cc <siprintf>

	 HD44780_SetCursor(0,1);
 8000ce6:	2101      	movs	r1, #1
 8000ce8:	2000      	movs	r0, #0
 8000cea:	f7ff fc33 	bl	8000554 <HD44780_SetCursor>
	 HD44780_PrintStr("SEC:");
 8000cee:	4b0a      	ldr	r3, [pc, #40]	@ (8000d18 <display_update_seconds+0x48>)
 8000cf0:	0018      	movs	r0, r3
 8000cf2:	f7ff fcab 	bl	800064c <HD44780_PrintStr>
	 HD44780_SetCursor(5,1);
 8000cf6:	2101      	movs	r1, #1
 8000cf8:	2005      	movs	r0, #5
 8000cfa:	f7ff fc2b 	bl	8000554 <HD44780_SetCursor>
	 HD44780_PrintStr(sec_buffer);
 8000cfe:	003b      	movs	r3, r7
 8000d00:	0018      	movs	r0, r3
 8000d02:	f7ff fca3 	bl	800064c <HD44780_PrintStr>
}
 8000d06:	46c0      	nop			@ (mov r8, r8)
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	b002      	add	sp, #8
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	46c0      	nop			@ (mov r8, r8)
 8000d10:	2000012f 	.word	0x2000012f
 8000d14:	08003b44 	.word	0x08003b44
 8000d18:	08003b60 	.word	0x08003b60

08000d1c <display_update_minutes>:

void display_update_minutes(void){
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b082      	sub	sp, #8
 8000d20:	af00      	add	r7, sp, #0
	 char min_buffer[8];
	 sprintf(min_buffer, "%02d", minutes);
 8000d22:	4b0e      	ldr	r3, [pc, #56]	@ (8000d5c <display_update_minutes+0x40>)
 8000d24:	781b      	ldrb	r3, [r3, #0]
 8000d26:	001a      	movs	r2, r3
 8000d28:	490d      	ldr	r1, [pc, #52]	@ (8000d60 <display_update_minutes+0x44>)
 8000d2a:	003b      	movs	r3, r7
 8000d2c:	0018      	movs	r0, r3
 8000d2e:	f002 fa4d 	bl	80031cc <siprintf>

     HD44780_SetCursor(8,1);
 8000d32:	2101      	movs	r1, #1
 8000d34:	2008      	movs	r0, #8
 8000d36:	f7ff fc0d 	bl	8000554 <HD44780_SetCursor>
	 HD44780_PrintStr("MIN:");
 8000d3a:	4b0a      	ldr	r3, [pc, #40]	@ (8000d64 <display_update_minutes+0x48>)
 8000d3c:	0018      	movs	r0, r3
 8000d3e:	f7ff fc85 	bl	800064c <HD44780_PrintStr>
	 HD44780_SetCursor(13,1);
 8000d42:	2101      	movs	r1, #1
 8000d44:	200d      	movs	r0, #13
 8000d46:	f7ff fc05 	bl	8000554 <HD44780_SetCursor>
	 HD44780_PrintStr(min_buffer);
 8000d4a:	003b      	movs	r3, r7
 8000d4c:	0018      	movs	r0, r3
 8000d4e:	f7ff fc7d 	bl	800064c <HD44780_PrintStr>
}
 8000d52:	46c0      	nop			@ (mov r8, r8)
 8000d54:	46bd      	mov	sp, r7
 8000d56:	b002      	add	sp, #8
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	46c0      	nop			@ (mov r8, r8)
 8000d5c:	2000012e 	.word	0x2000012e
 8000d60:	08003b44 	.word	0x08003b44
 8000d64:	08003b68 	.word	0x08003b68

08000d68 <Button_Minutes>:

void Button_Minutes(void){
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	af00      	add	r7, sp, #0

	 if( state == STOPPED){
 8000d6c:	4b08      	ldr	r3, [pc, #32]	@ (8000d90 <Button_Minutes+0x28>)
 8000d6e:	781b      	ldrb	r3, [r3, #0]
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d10a      	bne.n	8000d8a <Button_Minutes+0x22>
		 // добавляем минуты
		 minutes = (minutes + 1) % 100; // максимум 99 минут
 8000d74:	4b07      	ldr	r3, [pc, #28]	@ (8000d94 <Button_Minutes+0x2c>)
 8000d76:	781b      	ldrb	r3, [r3, #0]
 8000d78:	3301      	adds	r3, #1
 8000d7a:	2164      	movs	r1, #100	@ 0x64
 8000d7c:	0018      	movs	r0, r3
 8000d7e:	f7ff fb3d 	bl	80003fc <__aeabi_idivmod>
 8000d82:	000b      	movs	r3, r1
 8000d84:	b2da      	uxtb	r2, r3
 8000d86:	4b03      	ldr	r3, [pc, #12]	@ (8000d94 <Button_Minutes+0x2c>)
 8000d88:	701a      	strb	r2, [r3, #0]
	 }
}
 8000d8a:	46c0      	nop			@ (mov r8, r8)
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}
 8000d90:	2000012c 	.word	0x2000012c
 8000d94:	2000012e 	.word	0x2000012e

08000d98 <Button_Seconds>:

void Button_Seconds(void){
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	af00      	add	r7, sp, #0

	 if( state == STOPPED){
 8000d9c:	4b08      	ldr	r3, [pc, #32]	@ (8000dc0 <Button_Seconds+0x28>)
 8000d9e:	781b      	ldrb	r3, [r3, #0]
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d10a      	bne.n	8000dba <Button_Seconds+0x22>
	     // добавляем секунды
		 seconds = (seconds + 15) % 60; // шаг 15 секунд
 8000da4:	4b07      	ldr	r3, [pc, #28]	@ (8000dc4 <Button_Seconds+0x2c>)
 8000da6:	781b      	ldrb	r3, [r3, #0]
 8000da8:	330f      	adds	r3, #15
 8000daa:	213c      	movs	r1, #60	@ 0x3c
 8000dac:	0018      	movs	r0, r3
 8000dae:	f7ff fb25 	bl	80003fc <__aeabi_idivmod>
 8000db2:	000b      	movs	r3, r1
 8000db4:	b2da      	uxtb	r2, r3
 8000db6:	4b03      	ldr	r3, [pc, #12]	@ (8000dc4 <Button_Seconds+0x2c>)
 8000db8:	701a      	strb	r2, [r3, #0]
     }

}
 8000dba:	46c0      	nop			@ (mov r8, r8)
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}
 8000dc0:	2000012c 	.word	0x2000012c
 8000dc4:	2000012f 	.word	0x2000012f

08000dc8 <Button_StartStop>:

void Button_StartStop(void){
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	af00      	add	r7, sp, #0

	 if( state == STOPPED && (minutes > 0 || seconds > 0)){
 8000dcc:	4b0b      	ldr	r3, [pc, #44]	@ (8000dfc <Button_StartStop+0x34>)
 8000dce:	781b      	ldrb	r3, [r3, #0]
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d10b      	bne.n	8000dec <Button_StartStop+0x24>
 8000dd4:	4b0a      	ldr	r3, [pc, #40]	@ (8000e00 <Button_StartStop+0x38>)
 8000dd6:	781b      	ldrb	r3, [r3, #0]
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d103      	bne.n	8000de4 <Button_StartStop+0x1c>
 8000ddc:	4b09      	ldr	r3, [pc, #36]	@ (8000e04 <Button_StartStop+0x3c>)
 8000dde:	781b      	ldrb	r3, [r3, #0]
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d003      	beq.n	8000dec <Button_StartStop+0x24>

		 state = RUNNING; // Запускаем таймер.
 8000de4:	4b05      	ldr	r3, [pc, #20]	@ (8000dfc <Button_StartStop+0x34>)
 8000de6:	2201      	movs	r2, #1
 8000de8:	701a      	strb	r2, [r3, #0]
 8000dea:	e003      	b.n	8000df4 <Button_StartStop+0x2c>
	 }  else {

		 state = STOPPED;  // останавливаем
 8000dec:	4b03      	ldr	r3, [pc, #12]	@ (8000dfc <Button_StartStop+0x34>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	701a      	strb	r2, [r3, #0]
	 }

}
 8000df2:	46c0      	nop			@ (mov r8, r8)
 8000df4:	46c0      	nop			@ (mov r8, r8)
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	46c0      	nop			@ (mov r8, r8)
 8000dfc:	2000012c 	.word	0x2000012c
 8000e00:	2000012e 	.word	0x2000012e
 8000e04:	2000012f 	.word	0x2000012f

08000e08 <EXTI0_1_IRQHandler>:
/* USER CODE END 4 */

                                  /* INTERRUPT */

// Обработчик для пинов 0-1
void EXTI0_1_IRQHandler(void) {
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	af00      	add	r7, sp, #0
     HAL_GPIO_EXTI_IRQHandler(BUTTON_START_STOP_PIN);
 8000e0c:	2002      	movs	r0, #2
 8000e0e:	f000 fc73 	bl	80016f8 <HAL_GPIO_EXTI_IRQHandler>
}
 8000e12:	46c0      	nop			@ (mov r8, r8)
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd80      	pop	{r7, pc}

08000e18 <EXTI2_3_IRQHandler>:

// Обработчик для пинов 2-3
void EXTI2_3_IRQHandler(void) {
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	af00      	add	r7, sp, #0

	if (__HAL_GPIO_EXTI_GET_IT(BUTTON_SECONDS_PIN) != RESET) {
 8000e1c:	4b09      	ldr	r3, [pc, #36]	@ (8000e44 <EXTI2_3_IRQHandler+0x2c>)
 8000e1e:	695b      	ldr	r3, [r3, #20]
 8000e20:	2204      	movs	r2, #4
 8000e22:	4013      	ands	r3, r2
 8000e24:	d002      	beq.n	8000e2c <EXTI2_3_IRQHandler+0x14>
        HAL_GPIO_EXTI_IRQHandler(BUTTON_SECONDS_PIN);
 8000e26:	2004      	movs	r0, #4
 8000e28:	f000 fc66 	bl	80016f8 <HAL_GPIO_EXTI_IRQHandler>
    }
    if (__HAL_GPIO_EXTI_GET_IT(BUTTON_MINUTES_PIN) != RESET) {
 8000e2c:	4b05      	ldr	r3, [pc, #20]	@ (8000e44 <EXTI2_3_IRQHandler+0x2c>)
 8000e2e:	695b      	ldr	r3, [r3, #20]
 8000e30:	2208      	movs	r2, #8
 8000e32:	4013      	ands	r3, r2
 8000e34:	d002      	beq.n	8000e3c <EXTI2_3_IRQHandler+0x24>
        HAL_GPIO_EXTI_IRQHandler(BUTTON_MINUTES_PIN);
 8000e36:	2008      	movs	r0, #8
 8000e38:	f000 fc5e 	bl	80016f8 <HAL_GPIO_EXTI_IRQHandler>
    }
}
 8000e3c:	46c0      	nop			@ (mov r8, r8)
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	46c0      	nop			@ (mov r8, r8)
 8000e44:	40010400 	.word	0x40010400

08000e48 <HAL_GPIO_EXTI_Callback>:

// 6. Callback-функции
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b082      	sub	sp, #8
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	0002      	movs	r2, r0
 8000e50:	1dbb      	adds	r3, r7, #6
 8000e52:	801a      	strh	r2, [r3, #0]

	 switch(GPIO_Pin) {
 8000e54:	1dbb      	adds	r3, r7, #6
 8000e56:	881b      	ldrh	r3, [r3, #0]
 8000e58:	2b08      	cmp	r3, #8
 8000e5a:	d00d      	beq.n	8000e78 <HAL_GPIO_EXTI_Callback+0x30>
 8000e5c:	dc10      	bgt.n	8000e80 <HAL_GPIO_EXTI_Callback+0x38>
 8000e5e:	2b02      	cmp	r3, #2
 8000e60:	d002      	beq.n	8000e68 <HAL_GPIO_EXTI_Callback+0x20>
 8000e62:	2b04      	cmp	r3, #4
 8000e64:	d004      	beq.n	8000e70 <HAL_GPIO_EXTI_Callback+0x28>
	        case BUTTON_MINUTES_PIN:
	        	// Поднимаем флаг программе
	        	   btn_minutes_flag = 1;
	            break;
	    }
}
 8000e66:	e00b      	b.n	8000e80 <HAL_GPIO_EXTI_Callback+0x38>
	        	  btn_start_stop_flag = 1;
 8000e68:	4b07      	ldr	r3, [pc, #28]	@ (8000e88 <HAL_GPIO_EXTI_Callback+0x40>)
 8000e6a:	2201      	movs	r2, #1
 8000e6c:	701a      	strb	r2, [r3, #0]
	            break;
 8000e6e:	e007      	b.n	8000e80 <HAL_GPIO_EXTI_Callback+0x38>
	        	  btn_seconds_flag =  1;
 8000e70:	4b06      	ldr	r3, [pc, #24]	@ (8000e8c <HAL_GPIO_EXTI_Callback+0x44>)
 8000e72:	2201      	movs	r2, #1
 8000e74:	701a      	strb	r2, [r3, #0]
	            break;
 8000e76:	e003      	b.n	8000e80 <HAL_GPIO_EXTI_Callback+0x38>
	        	   btn_minutes_flag = 1;
 8000e78:	4b05      	ldr	r3, [pc, #20]	@ (8000e90 <HAL_GPIO_EXTI_Callback+0x48>)
 8000e7a:	2201      	movs	r2, #1
 8000e7c:	701a      	strb	r2, [r3, #0]
	            break;
 8000e7e:	46c0      	nop			@ (mov r8, r8)
}
 8000e80:	46c0      	nop			@ (mov r8, r8)
 8000e82:	46bd      	mov	sp, r7
 8000e84:	b002      	add	sp, #8
 8000e86:	bd80      	pop	{r7, pc}
 8000e88:	20000131 	.word	0x20000131
 8000e8c:	20000132 	.word	0x20000132
 8000e90:	20000133 	.word	0x20000133

08000e94 <TIM1_BRK_UP_TRG_COM_IRQHandler>:

   // ТАЙМЕР И ЕГО ОБРАБОТЧИК

void TIM1_BRK_UP_TRG_COM_IRQHandler(void) {
 8000e94:	b580      	push	{r7, lr}
 8000e96:	af00      	add	r7, sp, #0

	 HAL_TIM_IRQHandler(&htim1);
 8000e98:	4b03      	ldr	r3, [pc, #12]	@ (8000ea8 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x14>)
 8000e9a:	0018      	movs	r0, r3
 8000e9c:	f001 fe90 	bl	8002bc0 <HAL_TIM_IRQHandler>
}
 8000ea0:	46c0      	nop			@ (mov r8, r8)
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	46c0      	nop			@ (mov r8, r8)
 8000ea8:	200000e4 	.word	0x200000e4

08000eac <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b082      	sub	sp, #8
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]

	if (htim->Instance == TIM1) {
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	4a14      	ldr	r2, [pc, #80]	@ (8000f0c <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000eba:	4293      	cmp	r3, r2
 8000ebc:	d122      	bne.n	8000f04 <HAL_TIM_PeriodElapsedCallback+0x58>
        // Вызывается каждую секунду!
        if (state == RUNNING) {
 8000ebe:	4b14      	ldr	r3, [pc, #80]	@ (8000f10 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8000ec0:	781b      	ldrb	r3, [r3, #0]
 8000ec2:	2b01      	cmp	r3, #1
 8000ec4:	d11e      	bne.n	8000f04 <HAL_TIM_PeriodElapsedCallback+0x58>

        	if (seconds > 0) {
 8000ec6:	4b13      	ldr	r3, [pc, #76]	@ (8000f14 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8000ec8:	781b      	ldrb	r3, [r3, #0]
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d006      	beq.n	8000edc <HAL_TIM_PeriodElapsedCallback+0x30>
                seconds--;
 8000ece:	4b11      	ldr	r3, [pc, #68]	@ (8000f14 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8000ed0:	781b      	ldrb	r3, [r3, #0]
 8000ed2:	3b01      	subs	r3, #1
 8000ed4:	b2da      	uxtb	r2, r3
 8000ed6:	4b0f      	ldr	r3, [pc, #60]	@ (8000f14 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8000ed8:	701a      	strb	r2, [r3, #0]
 8000eda:	e010      	b.n	8000efe <HAL_TIM_PeriodElapsedCallback+0x52>
            } else if (minutes > 0) {
 8000edc:	4b0e      	ldr	r3, [pc, #56]	@ (8000f18 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8000ede:	781b      	ldrb	r3, [r3, #0]
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d009      	beq.n	8000ef8 <HAL_TIM_PeriodElapsedCallback+0x4c>
                minutes--;
 8000ee4:	4b0c      	ldr	r3, [pc, #48]	@ (8000f18 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8000ee6:	781b      	ldrb	r3, [r3, #0]
 8000ee8:	3b01      	subs	r3, #1
 8000eea:	b2da      	uxtb	r2, r3
 8000eec:	4b0a      	ldr	r3, [pc, #40]	@ (8000f18 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8000eee:	701a      	strb	r2, [r3, #0]
                seconds = 59;
 8000ef0:	4b08      	ldr	r3, [pc, #32]	@ (8000f14 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8000ef2:	223b      	movs	r2, #59	@ 0x3b
 8000ef4:	701a      	strb	r2, [r3, #0]
 8000ef6:	e002      	b.n	8000efe <HAL_TIM_PeriodElapsedCallback+0x52>

            } else {
                state = STOPPED;
 8000ef8:	4b05      	ldr	r3, [pc, #20]	@ (8000f10 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	701a      	strb	r2, [r3, #0]
            }
            // Обновление дисплея
             display_update_flag = 1;
 8000efe:	4b07      	ldr	r3, [pc, #28]	@ (8000f1c <HAL_TIM_PeriodElapsedCallback+0x70>)
 8000f00:	2201      	movs	r2, #1
 8000f02:	701a      	strb	r2, [r3, #0]
        }
    }
}
 8000f04:	46c0      	nop			@ (mov r8, r8)
 8000f06:	46bd      	mov	sp, r7
 8000f08:	b002      	add	sp, #8
 8000f0a:	bd80      	pop	{r7, pc}
 8000f0c:	40012c00 	.word	0x40012c00
 8000f10:	2000012c 	.word	0x2000012c
 8000f14:	2000012f 	.word	0x2000012f
 8000f18:	2000012e 	.word	0x2000012e
 8000f1c:	20000130 	.word	0x20000130

08000f20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f24:	b672      	cpsid	i
}
 8000f26:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f28:	46c0      	nop			@ (mov r8, r8)
 8000f2a:	e7fd      	b.n	8000f28 <Error_Handler+0x8>

08000f2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b082      	sub	sp, #8
 8000f30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f32:	4b0f      	ldr	r3, [pc, #60]	@ (8000f70 <HAL_MspInit+0x44>)
 8000f34:	699a      	ldr	r2, [r3, #24]
 8000f36:	4b0e      	ldr	r3, [pc, #56]	@ (8000f70 <HAL_MspInit+0x44>)
 8000f38:	2101      	movs	r1, #1
 8000f3a:	430a      	orrs	r2, r1
 8000f3c:	619a      	str	r2, [r3, #24]
 8000f3e:	4b0c      	ldr	r3, [pc, #48]	@ (8000f70 <HAL_MspInit+0x44>)
 8000f40:	699b      	ldr	r3, [r3, #24]
 8000f42:	2201      	movs	r2, #1
 8000f44:	4013      	ands	r3, r2
 8000f46:	607b      	str	r3, [r7, #4]
 8000f48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f4a:	4b09      	ldr	r3, [pc, #36]	@ (8000f70 <HAL_MspInit+0x44>)
 8000f4c:	69da      	ldr	r2, [r3, #28]
 8000f4e:	4b08      	ldr	r3, [pc, #32]	@ (8000f70 <HAL_MspInit+0x44>)
 8000f50:	2180      	movs	r1, #128	@ 0x80
 8000f52:	0549      	lsls	r1, r1, #21
 8000f54:	430a      	orrs	r2, r1
 8000f56:	61da      	str	r2, [r3, #28]
 8000f58:	4b05      	ldr	r3, [pc, #20]	@ (8000f70 <HAL_MspInit+0x44>)
 8000f5a:	69da      	ldr	r2, [r3, #28]
 8000f5c:	2380      	movs	r3, #128	@ 0x80
 8000f5e:	055b      	lsls	r3, r3, #21
 8000f60:	4013      	ands	r3, r2
 8000f62:	603b      	str	r3, [r7, #0]
 8000f64:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f66:	46c0      	nop			@ (mov r8, r8)
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	b002      	add	sp, #8
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	46c0      	nop			@ (mov r8, r8)
 8000f70:	40021000 	.word	0x40021000

08000f74 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000f74:	b590      	push	{r4, r7, lr}
 8000f76:	b08b      	sub	sp, #44	@ 0x2c
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f7c:	2414      	movs	r4, #20
 8000f7e:	193b      	adds	r3, r7, r4
 8000f80:	0018      	movs	r0, r3
 8000f82:	2314      	movs	r3, #20
 8000f84:	001a      	movs	r2, r3
 8000f86:	2100      	movs	r1, #0
 8000f88:	f002 f942 	bl	8003210 <memset>
  if(hi2c->Instance==I2C1)
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	4a1d      	ldr	r2, [pc, #116]	@ (8001008 <HAL_I2C_MspInit+0x94>)
 8000f92:	4293      	cmp	r3, r2
 8000f94:	d133      	bne.n	8000ffe <HAL_I2C_MspInit+0x8a>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f96:	4b1d      	ldr	r3, [pc, #116]	@ (800100c <HAL_I2C_MspInit+0x98>)
 8000f98:	695a      	ldr	r2, [r3, #20]
 8000f9a:	4b1c      	ldr	r3, [pc, #112]	@ (800100c <HAL_I2C_MspInit+0x98>)
 8000f9c:	2180      	movs	r1, #128	@ 0x80
 8000f9e:	0289      	lsls	r1, r1, #10
 8000fa0:	430a      	orrs	r2, r1
 8000fa2:	615a      	str	r2, [r3, #20]
 8000fa4:	4b19      	ldr	r3, [pc, #100]	@ (800100c <HAL_I2C_MspInit+0x98>)
 8000fa6:	695a      	ldr	r2, [r3, #20]
 8000fa8:	2380      	movs	r3, #128	@ 0x80
 8000faa:	029b      	lsls	r3, r3, #10
 8000fac:	4013      	ands	r3, r2
 8000fae:	613b      	str	r3, [r7, #16]
 8000fb0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000fb2:	193b      	adds	r3, r7, r4
 8000fb4:	22c0      	movs	r2, #192	@ 0xc0
 8000fb6:	00d2      	lsls	r2, r2, #3
 8000fb8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000fba:	0021      	movs	r1, r4
 8000fbc:	187b      	adds	r3, r7, r1
 8000fbe:	2212      	movs	r2, #18
 8000fc0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc2:	187b      	adds	r3, r7, r1
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000fc8:	187b      	adds	r3, r7, r1
 8000fca:	2203      	movs	r2, #3
 8000fcc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000fce:	187b      	adds	r3, r7, r1
 8000fd0:	2204      	movs	r2, #4
 8000fd2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fd4:	187a      	adds	r2, r7, r1
 8000fd6:	2390      	movs	r3, #144	@ 0x90
 8000fd8:	05db      	lsls	r3, r3, #23
 8000fda:	0011      	movs	r1, r2
 8000fdc:	0018      	movs	r0, r3
 8000fde:	f000 f9fd 	bl	80013dc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000fe2:	4b0a      	ldr	r3, [pc, #40]	@ (800100c <HAL_I2C_MspInit+0x98>)
 8000fe4:	69da      	ldr	r2, [r3, #28]
 8000fe6:	4b09      	ldr	r3, [pc, #36]	@ (800100c <HAL_I2C_MspInit+0x98>)
 8000fe8:	2180      	movs	r1, #128	@ 0x80
 8000fea:	0389      	lsls	r1, r1, #14
 8000fec:	430a      	orrs	r2, r1
 8000fee:	61da      	str	r2, [r3, #28]
 8000ff0:	4b06      	ldr	r3, [pc, #24]	@ (800100c <HAL_I2C_MspInit+0x98>)
 8000ff2:	69da      	ldr	r2, [r3, #28]
 8000ff4:	2380      	movs	r3, #128	@ 0x80
 8000ff6:	039b      	lsls	r3, r3, #14
 8000ff8:	4013      	ands	r3, r2
 8000ffa:	60fb      	str	r3, [r7, #12]
 8000ffc:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000ffe:	46c0      	nop			@ (mov r8, r8)
 8001000:	46bd      	mov	sp, r7
 8001002:	b00b      	add	sp, #44	@ 0x2c
 8001004:	bd90      	pop	{r4, r7, pc}
 8001006:	46c0      	nop			@ (mov r8, r8)
 8001008:	40005400 	.word	0x40005400
 800100c:	40021000 	.word	0x40021000

08001010 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001014:	46c0      	nop			@ (mov r8, r8)
 8001016:	e7fd      	b.n	8001014 <NMI_Handler+0x4>

08001018 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800101c:	46c0      	nop			@ (mov r8, r8)
 800101e:	e7fd      	b.n	800101c <HardFault_Handler+0x4>

08001020 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001024:	46c0      	nop			@ (mov r8, r8)
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}

0800102a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800102a:	b580      	push	{r7, lr}
 800102c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800102e:	46c0      	nop			@ (mov r8, r8)
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}

08001034 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001038:	f000 f8b2 	bl	80011a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800103c:	46c0      	nop			@ (mov r8, r8)
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
	...

08001044 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b086      	sub	sp, #24
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800104c:	4a14      	ldr	r2, [pc, #80]	@ (80010a0 <_sbrk+0x5c>)
 800104e:	4b15      	ldr	r3, [pc, #84]	@ (80010a4 <_sbrk+0x60>)
 8001050:	1ad3      	subs	r3, r2, r3
 8001052:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001054:	697b      	ldr	r3, [r7, #20]
 8001056:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001058:	4b13      	ldr	r3, [pc, #76]	@ (80010a8 <_sbrk+0x64>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	2b00      	cmp	r3, #0
 800105e:	d102      	bne.n	8001066 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001060:	4b11      	ldr	r3, [pc, #68]	@ (80010a8 <_sbrk+0x64>)
 8001062:	4a12      	ldr	r2, [pc, #72]	@ (80010ac <_sbrk+0x68>)
 8001064:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001066:	4b10      	ldr	r3, [pc, #64]	@ (80010a8 <_sbrk+0x64>)
 8001068:	681a      	ldr	r2, [r3, #0]
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	18d3      	adds	r3, r2, r3
 800106e:	693a      	ldr	r2, [r7, #16]
 8001070:	429a      	cmp	r2, r3
 8001072:	d207      	bcs.n	8001084 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001074:	f002 f8d4 	bl	8003220 <__errno>
 8001078:	0003      	movs	r3, r0
 800107a:	220c      	movs	r2, #12
 800107c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800107e:	2301      	movs	r3, #1
 8001080:	425b      	negs	r3, r3
 8001082:	e009      	b.n	8001098 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001084:	4b08      	ldr	r3, [pc, #32]	@ (80010a8 <_sbrk+0x64>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800108a:	4b07      	ldr	r3, [pc, #28]	@ (80010a8 <_sbrk+0x64>)
 800108c:	681a      	ldr	r2, [r3, #0]
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	18d2      	adds	r2, r2, r3
 8001092:	4b05      	ldr	r3, [pc, #20]	@ (80010a8 <_sbrk+0x64>)
 8001094:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8001096:	68fb      	ldr	r3, [r7, #12]
}
 8001098:	0018      	movs	r0, r3
 800109a:	46bd      	mov	sp, r7
 800109c:	b006      	add	sp, #24
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	20001000 	.word	0x20001000
 80010a4:	00000400 	.word	0x00000400
 80010a8:	20000134 	.word	0x20000134
 80010ac:	20000288 	.word	0x20000288

080010b0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80010b4:	46c0      	nop			@ (mov r8, r8)
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
	...

080010bc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80010bc:	480d      	ldr	r0, [pc, #52]	@ (80010f4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80010be:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 80010c0:	f7ff fff6 	bl	80010b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010c4:	480c      	ldr	r0, [pc, #48]	@ (80010f8 <LoopForever+0x6>)
  ldr r1, =_edata
 80010c6:	490d      	ldr	r1, [pc, #52]	@ (80010fc <LoopForever+0xa>)
  ldr r2, =_sidata
 80010c8:	4a0d      	ldr	r2, [pc, #52]	@ (8001100 <LoopForever+0xe>)
  movs r3, #0
 80010ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010cc:	e002      	b.n	80010d4 <LoopCopyDataInit>

080010ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010d2:	3304      	adds	r3, #4

080010d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010d8:	d3f9      	bcc.n	80010ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010da:	4a0a      	ldr	r2, [pc, #40]	@ (8001104 <LoopForever+0x12>)
  ldr r4, =_ebss
 80010dc:	4c0a      	ldr	r4, [pc, #40]	@ (8001108 <LoopForever+0x16>)
  movs r3, #0
 80010de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010e0:	e001      	b.n	80010e6 <LoopFillZerobss>

080010e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010e4:	3204      	adds	r2, #4

080010e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010e8:	d3fb      	bcc.n	80010e2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80010ea:	f002 f89f 	bl	800322c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80010ee:	f7ff fba7 	bl	8000840 <main>

080010f2 <LoopForever>:

LoopForever:
    b LoopForever
 80010f2:	e7fe      	b.n	80010f2 <LoopForever>
  ldr   r0, =_estack
 80010f4:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 80010f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010fc:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8001100:	08003bdc 	.word	0x08003bdc
  ldr r2, =_sbss
 8001104:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8001108:	20000284 	.word	0x20000284

0800110c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800110c:	e7fe      	b.n	800110c <ADC1_IRQHandler>
	...

08001110 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001114:	4b07      	ldr	r3, [pc, #28]	@ (8001134 <HAL_Init+0x24>)
 8001116:	681a      	ldr	r2, [r3, #0]
 8001118:	4b06      	ldr	r3, [pc, #24]	@ (8001134 <HAL_Init+0x24>)
 800111a:	2110      	movs	r1, #16
 800111c:	430a      	orrs	r2, r1
 800111e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8001120:	2003      	movs	r0, #3
 8001122:	f000 f809 	bl	8001138 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001126:	f7ff ff01 	bl	8000f2c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800112a:	2300      	movs	r3, #0
}
 800112c:	0018      	movs	r0, r3
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
 8001132:	46c0      	nop			@ (mov r8, r8)
 8001134:	40022000 	.word	0x40022000

08001138 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001138:	b590      	push	{r4, r7, lr}
 800113a:	b083      	sub	sp, #12
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001140:	4b14      	ldr	r3, [pc, #80]	@ (8001194 <HAL_InitTick+0x5c>)
 8001142:	681c      	ldr	r4, [r3, #0]
 8001144:	4b14      	ldr	r3, [pc, #80]	@ (8001198 <HAL_InitTick+0x60>)
 8001146:	781b      	ldrb	r3, [r3, #0]
 8001148:	0019      	movs	r1, r3
 800114a:	23fa      	movs	r3, #250	@ 0xfa
 800114c:	0098      	lsls	r0, r3, #2
 800114e:	f7fe ffe5 	bl	800011c <__udivsi3>
 8001152:	0003      	movs	r3, r0
 8001154:	0019      	movs	r1, r3
 8001156:	0020      	movs	r0, r4
 8001158:	f7fe ffe0 	bl	800011c <__udivsi3>
 800115c:	0003      	movs	r3, r0
 800115e:	0018      	movs	r0, r3
 8001160:	f000 f92f 	bl	80013c2 <HAL_SYSTICK_Config>
 8001164:	1e03      	subs	r3, r0, #0
 8001166:	d001      	beq.n	800116c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001168:	2301      	movs	r3, #1
 800116a:	e00f      	b.n	800118c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	2b03      	cmp	r3, #3
 8001170:	d80b      	bhi.n	800118a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001172:	6879      	ldr	r1, [r7, #4]
 8001174:	2301      	movs	r3, #1
 8001176:	425b      	negs	r3, r3
 8001178:	2200      	movs	r2, #0
 800117a:	0018      	movs	r0, r3
 800117c:	f000 f8fc 	bl	8001378 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001180:	4b06      	ldr	r3, [pc, #24]	@ (800119c <HAL_InitTick+0x64>)
 8001182:	687a      	ldr	r2, [r7, #4]
 8001184:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8001186:	2300      	movs	r3, #0
 8001188:	e000      	b.n	800118c <HAL_InitTick+0x54>
    return HAL_ERROR;
 800118a:	2301      	movs	r3, #1
}
 800118c:	0018      	movs	r0, r3
 800118e:	46bd      	mov	sp, r7
 8001190:	b003      	add	sp, #12
 8001192:	bd90      	pop	{r4, r7, pc}
 8001194:	20000010 	.word	0x20000010
 8001198:	20000018 	.word	0x20000018
 800119c:	20000014 	.word	0x20000014

080011a0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011a4:	4b05      	ldr	r3, [pc, #20]	@ (80011bc <HAL_IncTick+0x1c>)
 80011a6:	781b      	ldrb	r3, [r3, #0]
 80011a8:	001a      	movs	r2, r3
 80011aa:	4b05      	ldr	r3, [pc, #20]	@ (80011c0 <HAL_IncTick+0x20>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	18d2      	adds	r2, r2, r3
 80011b0:	4b03      	ldr	r3, [pc, #12]	@ (80011c0 <HAL_IncTick+0x20>)
 80011b2:	601a      	str	r2, [r3, #0]
}
 80011b4:	46c0      	nop			@ (mov r8, r8)
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	46c0      	nop			@ (mov r8, r8)
 80011bc:	20000018 	.word	0x20000018
 80011c0:	20000138 	.word	0x20000138

080011c4 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	af00      	add	r7, sp, #0
  return uwTick;
 80011c8:	4b02      	ldr	r3, [pc, #8]	@ (80011d4 <HAL_GetTick+0x10>)
 80011ca:	681b      	ldr	r3, [r3, #0]
}
 80011cc:	0018      	movs	r0, r3
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	46c0      	nop			@ (mov r8, r8)
 80011d4:	20000138 	.word	0x20000138

080011d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b084      	sub	sp, #16
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011e0:	f7ff fff0 	bl	80011c4 <HAL_GetTick>
 80011e4:	0003      	movs	r3, r0
 80011e6:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	3301      	adds	r3, #1
 80011f0:	d005      	beq.n	80011fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011f2:	4b0a      	ldr	r3, [pc, #40]	@ (800121c <HAL_Delay+0x44>)
 80011f4:	781b      	ldrb	r3, [r3, #0]
 80011f6:	001a      	movs	r2, r3
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	189b      	adds	r3, r3, r2
 80011fc:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80011fe:	46c0      	nop			@ (mov r8, r8)
 8001200:	f7ff ffe0 	bl	80011c4 <HAL_GetTick>
 8001204:	0002      	movs	r2, r0
 8001206:	68bb      	ldr	r3, [r7, #8]
 8001208:	1ad3      	subs	r3, r2, r3
 800120a:	68fa      	ldr	r2, [r7, #12]
 800120c:	429a      	cmp	r2, r3
 800120e:	d8f7      	bhi.n	8001200 <HAL_Delay+0x28>
  {
  }
}
 8001210:	46c0      	nop			@ (mov r8, r8)
 8001212:	46c0      	nop			@ (mov r8, r8)
 8001214:	46bd      	mov	sp, r7
 8001216:	b004      	add	sp, #16
 8001218:	bd80      	pop	{r7, pc}
 800121a:	46c0      	nop			@ (mov r8, r8)
 800121c:	20000018 	.word	0x20000018

08001220 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b082      	sub	sp, #8
 8001224:	af00      	add	r7, sp, #0
 8001226:	0002      	movs	r2, r0
 8001228:	1dfb      	adds	r3, r7, #7
 800122a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800122c:	1dfb      	adds	r3, r7, #7
 800122e:	781b      	ldrb	r3, [r3, #0]
 8001230:	2b7f      	cmp	r3, #127	@ 0x7f
 8001232:	d809      	bhi.n	8001248 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001234:	1dfb      	adds	r3, r7, #7
 8001236:	781b      	ldrb	r3, [r3, #0]
 8001238:	001a      	movs	r2, r3
 800123a:	231f      	movs	r3, #31
 800123c:	401a      	ands	r2, r3
 800123e:	4b04      	ldr	r3, [pc, #16]	@ (8001250 <__NVIC_EnableIRQ+0x30>)
 8001240:	2101      	movs	r1, #1
 8001242:	4091      	lsls	r1, r2
 8001244:	000a      	movs	r2, r1
 8001246:	601a      	str	r2, [r3, #0]
  }
}
 8001248:	46c0      	nop			@ (mov r8, r8)
 800124a:	46bd      	mov	sp, r7
 800124c:	b002      	add	sp, #8
 800124e:	bd80      	pop	{r7, pc}
 8001250:	e000e100 	.word	0xe000e100

08001254 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001254:	b590      	push	{r4, r7, lr}
 8001256:	b083      	sub	sp, #12
 8001258:	af00      	add	r7, sp, #0
 800125a:	0002      	movs	r2, r0
 800125c:	6039      	str	r1, [r7, #0]
 800125e:	1dfb      	adds	r3, r7, #7
 8001260:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001262:	1dfb      	adds	r3, r7, #7
 8001264:	781b      	ldrb	r3, [r3, #0]
 8001266:	2b7f      	cmp	r3, #127	@ 0x7f
 8001268:	d828      	bhi.n	80012bc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800126a:	4a2f      	ldr	r2, [pc, #188]	@ (8001328 <__NVIC_SetPriority+0xd4>)
 800126c:	1dfb      	adds	r3, r7, #7
 800126e:	781b      	ldrb	r3, [r3, #0]
 8001270:	b25b      	sxtb	r3, r3
 8001272:	089b      	lsrs	r3, r3, #2
 8001274:	33c0      	adds	r3, #192	@ 0xc0
 8001276:	009b      	lsls	r3, r3, #2
 8001278:	589b      	ldr	r3, [r3, r2]
 800127a:	1dfa      	adds	r2, r7, #7
 800127c:	7812      	ldrb	r2, [r2, #0]
 800127e:	0011      	movs	r1, r2
 8001280:	2203      	movs	r2, #3
 8001282:	400a      	ands	r2, r1
 8001284:	00d2      	lsls	r2, r2, #3
 8001286:	21ff      	movs	r1, #255	@ 0xff
 8001288:	4091      	lsls	r1, r2
 800128a:	000a      	movs	r2, r1
 800128c:	43d2      	mvns	r2, r2
 800128e:	401a      	ands	r2, r3
 8001290:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	019b      	lsls	r3, r3, #6
 8001296:	22ff      	movs	r2, #255	@ 0xff
 8001298:	401a      	ands	r2, r3
 800129a:	1dfb      	adds	r3, r7, #7
 800129c:	781b      	ldrb	r3, [r3, #0]
 800129e:	0018      	movs	r0, r3
 80012a0:	2303      	movs	r3, #3
 80012a2:	4003      	ands	r3, r0
 80012a4:	00db      	lsls	r3, r3, #3
 80012a6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80012a8:	481f      	ldr	r0, [pc, #124]	@ (8001328 <__NVIC_SetPriority+0xd4>)
 80012aa:	1dfb      	adds	r3, r7, #7
 80012ac:	781b      	ldrb	r3, [r3, #0]
 80012ae:	b25b      	sxtb	r3, r3
 80012b0:	089b      	lsrs	r3, r3, #2
 80012b2:	430a      	orrs	r2, r1
 80012b4:	33c0      	adds	r3, #192	@ 0xc0
 80012b6:	009b      	lsls	r3, r3, #2
 80012b8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80012ba:	e031      	b.n	8001320 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80012bc:	4a1b      	ldr	r2, [pc, #108]	@ (800132c <__NVIC_SetPriority+0xd8>)
 80012be:	1dfb      	adds	r3, r7, #7
 80012c0:	781b      	ldrb	r3, [r3, #0]
 80012c2:	0019      	movs	r1, r3
 80012c4:	230f      	movs	r3, #15
 80012c6:	400b      	ands	r3, r1
 80012c8:	3b08      	subs	r3, #8
 80012ca:	089b      	lsrs	r3, r3, #2
 80012cc:	3306      	adds	r3, #6
 80012ce:	009b      	lsls	r3, r3, #2
 80012d0:	18d3      	adds	r3, r2, r3
 80012d2:	3304      	adds	r3, #4
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	1dfa      	adds	r2, r7, #7
 80012d8:	7812      	ldrb	r2, [r2, #0]
 80012da:	0011      	movs	r1, r2
 80012dc:	2203      	movs	r2, #3
 80012de:	400a      	ands	r2, r1
 80012e0:	00d2      	lsls	r2, r2, #3
 80012e2:	21ff      	movs	r1, #255	@ 0xff
 80012e4:	4091      	lsls	r1, r2
 80012e6:	000a      	movs	r2, r1
 80012e8:	43d2      	mvns	r2, r2
 80012ea:	401a      	ands	r2, r3
 80012ec:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	019b      	lsls	r3, r3, #6
 80012f2:	22ff      	movs	r2, #255	@ 0xff
 80012f4:	401a      	ands	r2, r3
 80012f6:	1dfb      	adds	r3, r7, #7
 80012f8:	781b      	ldrb	r3, [r3, #0]
 80012fa:	0018      	movs	r0, r3
 80012fc:	2303      	movs	r3, #3
 80012fe:	4003      	ands	r3, r0
 8001300:	00db      	lsls	r3, r3, #3
 8001302:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001304:	4809      	ldr	r0, [pc, #36]	@ (800132c <__NVIC_SetPriority+0xd8>)
 8001306:	1dfb      	adds	r3, r7, #7
 8001308:	781b      	ldrb	r3, [r3, #0]
 800130a:	001c      	movs	r4, r3
 800130c:	230f      	movs	r3, #15
 800130e:	4023      	ands	r3, r4
 8001310:	3b08      	subs	r3, #8
 8001312:	089b      	lsrs	r3, r3, #2
 8001314:	430a      	orrs	r2, r1
 8001316:	3306      	adds	r3, #6
 8001318:	009b      	lsls	r3, r3, #2
 800131a:	18c3      	adds	r3, r0, r3
 800131c:	3304      	adds	r3, #4
 800131e:	601a      	str	r2, [r3, #0]
}
 8001320:	46c0      	nop			@ (mov r8, r8)
 8001322:	46bd      	mov	sp, r7
 8001324:	b003      	add	sp, #12
 8001326:	bd90      	pop	{r4, r7, pc}
 8001328:	e000e100 	.word	0xe000e100
 800132c:	e000ed00 	.word	0xe000ed00

08001330 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b082      	sub	sp, #8
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	1e5a      	subs	r2, r3, #1
 800133c:	2380      	movs	r3, #128	@ 0x80
 800133e:	045b      	lsls	r3, r3, #17
 8001340:	429a      	cmp	r2, r3
 8001342:	d301      	bcc.n	8001348 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001344:	2301      	movs	r3, #1
 8001346:	e010      	b.n	800136a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001348:	4b0a      	ldr	r3, [pc, #40]	@ (8001374 <SysTick_Config+0x44>)
 800134a:	687a      	ldr	r2, [r7, #4]
 800134c:	3a01      	subs	r2, #1
 800134e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001350:	2301      	movs	r3, #1
 8001352:	425b      	negs	r3, r3
 8001354:	2103      	movs	r1, #3
 8001356:	0018      	movs	r0, r3
 8001358:	f7ff ff7c 	bl	8001254 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800135c:	4b05      	ldr	r3, [pc, #20]	@ (8001374 <SysTick_Config+0x44>)
 800135e:	2200      	movs	r2, #0
 8001360:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001362:	4b04      	ldr	r3, [pc, #16]	@ (8001374 <SysTick_Config+0x44>)
 8001364:	2207      	movs	r2, #7
 8001366:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001368:	2300      	movs	r3, #0
}
 800136a:	0018      	movs	r0, r3
 800136c:	46bd      	mov	sp, r7
 800136e:	b002      	add	sp, #8
 8001370:	bd80      	pop	{r7, pc}
 8001372:	46c0      	nop			@ (mov r8, r8)
 8001374:	e000e010 	.word	0xe000e010

08001378 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b084      	sub	sp, #16
 800137c:	af00      	add	r7, sp, #0
 800137e:	60b9      	str	r1, [r7, #8]
 8001380:	607a      	str	r2, [r7, #4]
 8001382:	210f      	movs	r1, #15
 8001384:	187b      	adds	r3, r7, r1
 8001386:	1c02      	adds	r2, r0, #0
 8001388:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800138a:	68ba      	ldr	r2, [r7, #8]
 800138c:	187b      	adds	r3, r7, r1
 800138e:	781b      	ldrb	r3, [r3, #0]
 8001390:	b25b      	sxtb	r3, r3
 8001392:	0011      	movs	r1, r2
 8001394:	0018      	movs	r0, r3
 8001396:	f7ff ff5d 	bl	8001254 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 800139a:	46c0      	nop			@ (mov r8, r8)
 800139c:	46bd      	mov	sp, r7
 800139e:	b004      	add	sp, #16
 80013a0:	bd80      	pop	{r7, pc}

080013a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013a2:	b580      	push	{r7, lr}
 80013a4:	b082      	sub	sp, #8
 80013a6:	af00      	add	r7, sp, #0
 80013a8:	0002      	movs	r2, r0
 80013aa:	1dfb      	adds	r3, r7, #7
 80013ac:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013ae:	1dfb      	adds	r3, r7, #7
 80013b0:	781b      	ldrb	r3, [r3, #0]
 80013b2:	b25b      	sxtb	r3, r3
 80013b4:	0018      	movs	r0, r3
 80013b6:	f7ff ff33 	bl	8001220 <__NVIC_EnableIRQ>
}
 80013ba:	46c0      	nop			@ (mov r8, r8)
 80013bc:	46bd      	mov	sp, r7
 80013be:	b002      	add	sp, #8
 80013c0:	bd80      	pop	{r7, pc}

080013c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013c2:	b580      	push	{r7, lr}
 80013c4:	b082      	sub	sp, #8
 80013c6:	af00      	add	r7, sp, #0
 80013c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	0018      	movs	r0, r3
 80013ce:	f7ff ffaf 	bl	8001330 <SysTick_Config>
 80013d2:	0003      	movs	r3, r0
}
 80013d4:	0018      	movs	r0, r3
 80013d6:	46bd      	mov	sp, r7
 80013d8:	b002      	add	sp, #8
 80013da:	bd80      	pop	{r7, pc}

080013dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b086      	sub	sp, #24
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
 80013e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80013e6:	2300      	movs	r3, #0
 80013e8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013ea:	e14f      	b.n	800168c <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	2101      	movs	r1, #1
 80013f2:	697a      	ldr	r2, [r7, #20]
 80013f4:	4091      	lsls	r1, r2
 80013f6:	000a      	movs	r2, r1
 80013f8:	4013      	ands	r3, r2
 80013fa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d100      	bne.n	8001404 <HAL_GPIO_Init+0x28>
 8001402:	e140      	b.n	8001686 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	2203      	movs	r2, #3
 800140a:	4013      	ands	r3, r2
 800140c:	2b01      	cmp	r3, #1
 800140e:	d005      	beq.n	800141c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	2203      	movs	r2, #3
 8001416:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001418:	2b02      	cmp	r3, #2
 800141a:	d130      	bne.n	800147e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	689b      	ldr	r3, [r3, #8]
 8001420:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001422:	697b      	ldr	r3, [r7, #20]
 8001424:	005b      	lsls	r3, r3, #1
 8001426:	2203      	movs	r2, #3
 8001428:	409a      	lsls	r2, r3
 800142a:	0013      	movs	r3, r2
 800142c:	43da      	mvns	r2, r3
 800142e:	693b      	ldr	r3, [r7, #16]
 8001430:	4013      	ands	r3, r2
 8001432:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	68da      	ldr	r2, [r3, #12]
 8001438:	697b      	ldr	r3, [r7, #20]
 800143a:	005b      	lsls	r3, r3, #1
 800143c:	409a      	lsls	r2, r3
 800143e:	0013      	movs	r3, r2
 8001440:	693a      	ldr	r2, [r7, #16]
 8001442:	4313      	orrs	r3, r2
 8001444:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	693a      	ldr	r2, [r7, #16]
 800144a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	685b      	ldr	r3, [r3, #4]
 8001450:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001452:	2201      	movs	r2, #1
 8001454:	697b      	ldr	r3, [r7, #20]
 8001456:	409a      	lsls	r2, r3
 8001458:	0013      	movs	r3, r2
 800145a:	43da      	mvns	r2, r3
 800145c:	693b      	ldr	r3, [r7, #16]
 800145e:	4013      	ands	r3, r2
 8001460:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	685b      	ldr	r3, [r3, #4]
 8001466:	091b      	lsrs	r3, r3, #4
 8001468:	2201      	movs	r2, #1
 800146a:	401a      	ands	r2, r3
 800146c:	697b      	ldr	r3, [r7, #20]
 800146e:	409a      	lsls	r2, r3
 8001470:	0013      	movs	r3, r2
 8001472:	693a      	ldr	r2, [r7, #16]
 8001474:	4313      	orrs	r3, r2
 8001476:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	693a      	ldr	r2, [r7, #16]
 800147c:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	685b      	ldr	r3, [r3, #4]
 8001482:	2203      	movs	r2, #3
 8001484:	4013      	ands	r3, r2
 8001486:	2b03      	cmp	r3, #3
 8001488:	d017      	beq.n	80014ba <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	68db      	ldr	r3, [r3, #12]
 800148e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001490:	697b      	ldr	r3, [r7, #20]
 8001492:	005b      	lsls	r3, r3, #1
 8001494:	2203      	movs	r2, #3
 8001496:	409a      	lsls	r2, r3
 8001498:	0013      	movs	r3, r2
 800149a:	43da      	mvns	r2, r3
 800149c:	693b      	ldr	r3, [r7, #16]
 800149e:	4013      	ands	r3, r2
 80014a0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	689a      	ldr	r2, [r3, #8]
 80014a6:	697b      	ldr	r3, [r7, #20]
 80014a8:	005b      	lsls	r3, r3, #1
 80014aa:	409a      	lsls	r2, r3
 80014ac:	0013      	movs	r3, r2
 80014ae:	693a      	ldr	r2, [r7, #16]
 80014b0:	4313      	orrs	r3, r2
 80014b2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	693a      	ldr	r2, [r7, #16]
 80014b8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	685b      	ldr	r3, [r3, #4]
 80014be:	2203      	movs	r2, #3
 80014c0:	4013      	ands	r3, r2
 80014c2:	2b02      	cmp	r3, #2
 80014c4:	d123      	bne.n	800150e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80014c6:	697b      	ldr	r3, [r7, #20]
 80014c8:	08da      	lsrs	r2, r3, #3
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	3208      	adds	r2, #8
 80014ce:	0092      	lsls	r2, r2, #2
 80014d0:	58d3      	ldr	r3, [r2, r3]
 80014d2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80014d4:	697b      	ldr	r3, [r7, #20]
 80014d6:	2207      	movs	r2, #7
 80014d8:	4013      	ands	r3, r2
 80014da:	009b      	lsls	r3, r3, #2
 80014dc:	220f      	movs	r2, #15
 80014de:	409a      	lsls	r2, r3
 80014e0:	0013      	movs	r3, r2
 80014e2:	43da      	mvns	r2, r3
 80014e4:	693b      	ldr	r3, [r7, #16]
 80014e6:	4013      	ands	r3, r2
 80014e8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	691a      	ldr	r2, [r3, #16]
 80014ee:	697b      	ldr	r3, [r7, #20]
 80014f0:	2107      	movs	r1, #7
 80014f2:	400b      	ands	r3, r1
 80014f4:	009b      	lsls	r3, r3, #2
 80014f6:	409a      	lsls	r2, r3
 80014f8:	0013      	movs	r3, r2
 80014fa:	693a      	ldr	r2, [r7, #16]
 80014fc:	4313      	orrs	r3, r2
 80014fe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001500:	697b      	ldr	r3, [r7, #20]
 8001502:	08da      	lsrs	r2, r3, #3
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	3208      	adds	r2, #8
 8001508:	0092      	lsls	r2, r2, #2
 800150a:	6939      	ldr	r1, [r7, #16]
 800150c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001514:	697b      	ldr	r3, [r7, #20]
 8001516:	005b      	lsls	r3, r3, #1
 8001518:	2203      	movs	r2, #3
 800151a:	409a      	lsls	r2, r3
 800151c:	0013      	movs	r3, r2
 800151e:	43da      	mvns	r2, r3
 8001520:	693b      	ldr	r3, [r7, #16]
 8001522:	4013      	ands	r3, r2
 8001524:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	685b      	ldr	r3, [r3, #4]
 800152a:	2203      	movs	r2, #3
 800152c:	401a      	ands	r2, r3
 800152e:	697b      	ldr	r3, [r7, #20]
 8001530:	005b      	lsls	r3, r3, #1
 8001532:	409a      	lsls	r2, r3
 8001534:	0013      	movs	r3, r2
 8001536:	693a      	ldr	r2, [r7, #16]
 8001538:	4313      	orrs	r3, r2
 800153a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	693a      	ldr	r2, [r7, #16]
 8001540:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	685a      	ldr	r2, [r3, #4]
 8001546:	23c0      	movs	r3, #192	@ 0xc0
 8001548:	029b      	lsls	r3, r3, #10
 800154a:	4013      	ands	r3, r2
 800154c:	d100      	bne.n	8001550 <HAL_GPIO_Init+0x174>
 800154e:	e09a      	b.n	8001686 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001550:	4b54      	ldr	r3, [pc, #336]	@ (80016a4 <HAL_GPIO_Init+0x2c8>)
 8001552:	699a      	ldr	r2, [r3, #24]
 8001554:	4b53      	ldr	r3, [pc, #332]	@ (80016a4 <HAL_GPIO_Init+0x2c8>)
 8001556:	2101      	movs	r1, #1
 8001558:	430a      	orrs	r2, r1
 800155a:	619a      	str	r2, [r3, #24]
 800155c:	4b51      	ldr	r3, [pc, #324]	@ (80016a4 <HAL_GPIO_Init+0x2c8>)
 800155e:	699b      	ldr	r3, [r3, #24]
 8001560:	2201      	movs	r2, #1
 8001562:	4013      	ands	r3, r2
 8001564:	60bb      	str	r3, [r7, #8]
 8001566:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001568:	4a4f      	ldr	r2, [pc, #316]	@ (80016a8 <HAL_GPIO_Init+0x2cc>)
 800156a:	697b      	ldr	r3, [r7, #20]
 800156c:	089b      	lsrs	r3, r3, #2
 800156e:	3302      	adds	r3, #2
 8001570:	009b      	lsls	r3, r3, #2
 8001572:	589b      	ldr	r3, [r3, r2]
 8001574:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001576:	697b      	ldr	r3, [r7, #20]
 8001578:	2203      	movs	r2, #3
 800157a:	4013      	ands	r3, r2
 800157c:	009b      	lsls	r3, r3, #2
 800157e:	220f      	movs	r2, #15
 8001580:	409a      	lsls	r2, r3
 8001582:	0013      	movs	r3, r2
 8001584:	43da      	mvns	r2, r3
 8001586:	693b      	ldr	r3, [r7, #16]
 8001588:	4013      	ands	r3, r2
 800158a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800158c:	687a      	ldr	r2, [r7, #4]
 800158e:	2390      	movs	r3, #144	@ 0x90
 8001590:	05db      	lsls	r3, r3, #23
 8001592:	429a      	cmp	r2, r3
 8001594:	d013      	beq.n	80015be <HAL_GPIO_Init+0x1e2>
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	4a44      	ldr	r2, [pc, #272]	@ (80016ac <HAL_GPIO_Init+0x2d0>)
 800159a:	4293      	cmp	r3, r2
 800159c:	d00d      	beq.n	80015ba <HAL_GPIO_Init+0x1de>
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	4a43      	ldr	r2, [pc, #268]	@ (80016b0 <HAL_GPIO_Init+0x2d4>)
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d007      	beq.n	80015b6 <HAL_GPIO_Init+0x1da>
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	4a42      	ldr	r2, [pc, #264]	@ (80016b4 <HAL_GPIO_Init+0x2d8>)
 80015aa:	4293      	cmp	r3, r2
 80015ac:	d101      	bne.n	80015b2 <HAL_GPIO_Init+0x1d6>
 80015ae:	2303      	movs	r3, #3
 80015b0:	e006      	b.n	80015c0 <HAL_GPIO_Init+0x1e4>
 80015b2:	2305      	movs	r3, #5
 80015b4:	e004      	b.n	80015c0 <HAL_GPIO_Init+0x1e4>
 80015b6:	2302      	movs	r3, #2
 80015b8:	e002      	b.n	80015c0 <HAL_GPIO_Init+0x1e4>
 80015ba:	2301      	movs	r3, #1
 80015bc:	e000      	b.n	80015c0 <HAL_GPIO_Init+0x1e4>
 80015be:	2300      	movs	r3, #0
 80015c0:	697a      	ldr	r2, [r7, #20]
 80015c2:	2103      	movs	r1, #3
 80015c4:	400a      	ands	r2, r1
 80015c6:	0092      	lsls	r2, r2, #2
 80015c8:	4093      	lsls	r3, r2
 80015ca:	693a      	ldr	r2, [r7, #16]
 80015cc:	4313      	orrs	r3, r2
 80015ce:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80015d0:	4935      	ldr	r1, [pc, #212]	@ (80016a8 <HAL_GPIO_Init+0x2cc>)
 80015d2:	697b      	ldr	r3, [r7, #20]
 80015d4:	089b      	lsrs	r3, r3, #2
 80015d6:	3302      	adds	r3, #2
 80015d8:	009b      	lsls	r3, r3, #2
 80015da:	693a      	ldr	r2, [r7, #16]
 80015dc:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80015de:	4b36      	ldr	r3, [pc, #216]	@ (80016b8 <HAL_GPIO_Init+0x2dc>)
 80015e0:	689b      	ldr	r3, [r3, #8]
 80015e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	43da      	mvns	r2, r3
 80015e8:	693b      	ldr	r3, [r7, #16]
 80015ea:	4013      	ands	r3, r2
 80015ec:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	685a      	ldr	r2, [r3, #4]
 80015f2:	2380      	movs	r3, #128	@ 0x80
 80015f4:	035b      	lsls	r3, r3, #13
 80015f6:	4013      	ands	r3, r2
 80015f8:	d003      	beq.n	8001602 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 80015fa:	693a      	ldr	r2, [r7, #16]
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	4313      	orrs	r3, r2
 8001600:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001602:	4b2d      	ldr	r3, [pc, #180]	@ (80016b8 <HAL_GPIO_Init+0x2dc>)
 8001604:	693a      	ldr	r2, [r7, #16]
 8001606:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001608:	4b2b      	ldr	r3, [pc, #172]	@ (80016b8 <HAL_GPIO_Init+0x2dc>)
 800160a:	68db      	ldr	r3, [r3, #12]
 800160c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	43da      	mvns	r2, r3
 8001612:	693b      	ldr	r3, [r7, #16]
 8001614:	4013      	ands	r3, r2
 8001616:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	685a      	ldr	r2, [r3, #4]
 800161c:	2380      	movs	r3, #128	@ 0x80
 800161e:	039b      	lsls	r3, r3, #14
 8001620:	4013      	ands	r3, r2
 8001622:	d003      	beq.n	800162c <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8001624:	693a      	ldr	r2, [r7, #16]
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	4313      	orrs	r3, r2
 800162a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800162c:	4b22      	ldr	r3, [pc, #136]	@ (80016b8 <HAL_GPIO_Init+0x2dc>)
 800162e:	693a      	ldr	r2, [r7, #16]
 8001630:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8001632:	4b21      	ldr	r3, [pc, #132]	@ (80016b8 <HAL_GPIO_Init+0x2dc>)
 8001634:	685b      	ldr	r3, [r3, #4]
 8001636:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	43da      	mvns	r2, r3
 800163c:	693b      	ldr	r3, [r7, #16]
 800163e:	4013      	ands	r3, r2
 8001640:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	685a      	ldr	r2, [r3, #4]
 8001646:	2380      	movs	r3, #128	@ 0x80
 8001648:	029b      	lsls	r3, r3, #10
 800164a:	4013      	ands	r3, r2
 800164c:	d003      	beq.n	8001656 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 800164e:	693a      	ldr	r2, [r7, #16]
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	4313      	orrs	r3, r2
 8001654:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001656:	4b18      	ldr	r3, [pc, #96]	@ (80016b8 <HAL_GPIO_Init+0x2dc>)
 8001658:	693a      	ldr	r2, [r7, #16]
 800165a:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 800165c:	4b16      	ldr	r3, [pc, #88]	@ (80016b8 <HAL_GPIO_Init+0x2dc>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	43da      	mvns	r2, r3
 8001666:	693b      	ldr	r3, [r7, #16]
 8001668:	4013      	ands	r3, r2
 800166a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	685a      	ldr	r2, [r3, #4]
 8001670:	2380      	movs	r3, #128	@ 0x80
 8001672:	025b      	lsls	r3, r3, #9
 8001674:	4013      	ands	r3, r2
 8001676:	d003      	beq.n	8001680 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8001678:	693a      	ldr	r2, [r7, #16]
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	4313      	orrs	r3, r2
 800167e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001680:	4b0d      	ldr	r3, [pc, #52]	@ (80016b8 <HAL_GPIO_Init+0x2dc>)
 8001682:	693a      	ldr	r2, [r7, #16]
 8001684:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001686:	697b      	ldr	r3, [r7, #20]
 8001688:	3301      	adds	r3, #1
 800168a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	681a      	ldr	r2, [r3, #0]
 8001690:	697b      	ldr	r3, [r7, #20]
 8001692:	40da      	lsrs	r2, r3
 8001694:	1e13      	subs	r3, r2, #0
 8001696:	d000      	beq.n	800169a <HAL_GPIO_Init+0x2be>
 8001698:	e6a8      	b.n	80013ec <HAL_GPIO_Init+0x10>
  } 
}
 800169a:	46c0      	nop			@ (mov r8, r8)
 800169c:	46c0      	nop			@ (mov r8, r8)
 800169e:	46bd      	mov	sp, r7
 80016a0:	b006      	add	sp, #24
 80016a2:	bd80      	pop	{r7, pc}
 80016a4:	40021000 	.word	0x40021000
 80016a8:	40010000 	.word	0x40010000
 80016ac:	48000400 	.word	0x48000400
 80016b0:	48000800 	.word	0x48000800
 80016b4:	48000c00 	.word	0x48000c00
 80016b8:	40010400 	.word	0x40010400

080016bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b082      	sub	sp, #8
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
 80016c4:	0008      	movs	r0, r1
 80016c6:	0011      	movs	r1, r2
 80016c8:	1cbb      	adds	r3, r7, #2
 80016ca:	1c02      	adds	r2, r0, #0
 80016cc:	801a      	strh	r2, [r3, #0]
 80016ce:	1c7b      	adds	r3, r7, #1
 80016d0:	1c0a      	adds	r2, r1, #0
 80016d2:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80016d4:	1c7b      	adds	r3, r7, #1
 80016d6:	781b      	ldrb	r3, [r3, #0]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d004      	beq.n	80016e6 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80016dc:	1cbb      	adds	r3, r7, #2
 80016de:	881a      	ldrh	r2, [r3, #0]
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80016e4:	e003      	b.n	80016ee <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80016e6:	1cbb      	adds	r3, r7, #2
 80016e8:	881a      	ldrh	r2, [r3, #0]
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80016ee:	46c0      	nop			@ (mov r8, r8)
 80016f0:	46bd      	mov	sp, r7
 80016f2:	b002      	add	sp, #8
 80016f4:	bd80      	pop	{r7, pc}
	...

080016f8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b082      	sub	sp, #8
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	0002      	movs	r2, r0
 8001700:	1dbb      	adds	r3, r7, #6
 8001702:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001704:	4b09      	ldr	r3, [pc, #36]	@ (800172c <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8001706:	695b      	ldr	r3, [r3, #20]
 8001708:	1dba      	adds	r2, r7, #6
 800170a:	8812      	ldrh	r2, [r2, #0]
 800170c:	4013      	ands	r3, r2
 800170e:	d008      	beq.n	8001722 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001710:	4b06      	ldr	r3, [pc, #24]	@ (800172c <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8001712:	1dba      	adds	r2, r7, #6
 8001714:	8812      	ldrh	r2, [r2, #0]
 8001716:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001718:	1dbb      	adds	r3, r7, #6
 800171a:	881b      	ldrh	r3, [r3, #0]
 800171c:	0018      	movs	r0, r3
 800171e:	f7ff fb93 	bl	8000e48 <HAL_GPIO_EXTI_Callback>
  }
}
 8001722:	46c0      	nop			@ (mov r8, r8)
 8001724:	46bd      	mov	sp, r7
 8001726:	b002      	add	sp, #8
 8001728:	bd80      	pop	{r7, pc}
 800172a:	46c0      	nop			@ (mov r8, r8)
 800172c:	40010400 	.word	0x40010400

08001730 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b082      	sub	sp, #8
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	2b00      	cmp	r3, #0
 800173c:	d101      	bne.n	8001742 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800173e:	2301      	movs	r3, #1
 8001740:	e08f      	b.n	8001862 <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	2241      	movs	r2, #65	@ 0x41
 8001746:	5c9b      	ldrb	r3, [r3, r2]
 8001748:	b2db      	uxtb	r3, r3
 800174a:	2b00      	cmp	r3, #0
 800174c:	d107      	bne.n	800175e <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	2240      	movs	r2, #64	@ 0x40
 8001752:	2100      	movs	r1, #0
 8001754:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	0018      	movs	r0, r3
 800175a:	f7ff fc0b 	bl	8000f74 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	2241      	movs	r2, #65	@ 0x41
 8001762:	2124      	movs	r1, #36	@ 0x24
 8001764:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	681a      	ldr	r2, [r3, #0]
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	2101      	movs	r1, #1
 8001772:	438a      	bics	r2, r1
 8001774:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	685a      	ldr	r2, [r3, #4]
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	493b      	ldr	r1, [pc, #236]	@ (800186c <HAL_I2C_Init+0x13c>)
 8001780:	400a      	ands	r2, r1
 8001782:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	689a      	ldr	r2, [r3, #8]
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4938      	ldr	r1, [pc, #224]	@ (8001870 <HAL_I2C_Init+0x140>)
 8001790:	400a      	ands	r2, r1
 8001792:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	68db      	ldr	r3, [r3, #12]
 8001798:	2b01      	cmp	r3, #1
 800179a:	d108      	bne.n	80017ae <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	689a      	ldr	r2, [r3, #8]
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	2180      	movs	r1, #128	@ 0x80
 80017a6:	0209      	lsls	r1, r1, #8
 80017a8:	430a      	orrs	r2, r1
 80017aa:	609a      	str	r2, [r3, #8]
 80017ac:	e007      	b.n	80017be <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	689a      	ldr	r2, [r3, #8]
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	2184      	movs	r1, #132	@ 0x84
 80017b8:	0209      	lsls	r1, r1, #8
 80017ba:	430a      	orrs	r2, r1
 80017bc:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	68db      	ldr	r3, [r3, #12]
 80017c2:	2b02      	cmp	r3, #2
 80017c4:	d109      	bne.n	80017da <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	685a      	ldr	r2, [r3, #4]
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	2180      	movs	r1, #128	@ 0x80
 80017d2:	0109      	lsls	r1, r1, #4
 80017d4:	430a      	orrs	r2, r1
 80017d6:	605a      	str	r2, [r3, #4]
 80017d8:	e007      	b.n	80017ea <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	685a      	ldr	r2, [r3, #4]
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4923      	ldr	r1, [pc, #140]	@ (8001874 <HAL_I2C_Init+0x144>)
 80017e6:	400a      	ands	r2, r1
 80017e8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	685a      	ldr	r2, [r3, #4]
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4920      	ldr	r1, [pc, #128]	@ (8001878 <HAL_I2C_Init+0x148>)
 80017f6:	430a      	orrs	r2, r1
 80017f8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	68da      	ldr	r2, [r3, #12]
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	491a      	ldr	r1, [pc, #104]	@ (8001870 <HAL_I2C_Init+0x140>)
 8001806:	400a      	ands	r2, r1
 8001808:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	691a      	ldr	r2, [r3, #16]
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	695b      	ldr	r3, [r3, #20]
 8001812:	431a      	orrs	r2, r3
 8001814:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	699b      	ldr	r3, [r3, #24]
 800181a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	430a      	orrs	r2, r1
 8001822:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	69d9      	ldr	r1, [r3, #28]
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6a1a      	ldr	r2, [r3, #32]
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	430a      	orrs	r2, r1
 8001832:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	681a      	ldr	r2, [r3, #0]
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	2101      	movs	r1, #1
 8001840:	430a      	orrs	r2, r1
 8001842:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	2200      	movs	r2, #0
 8001848:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	2241      	movs	r2, #65	@ 0x41
 800184e:	2120      	movs	r1, #32
 8001850:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	2200      	movs	r2, #0
 8001856:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	2242      	movs	r2, #66	@ 0x42
 800185c:	2100      	movs	r1, #0
 800185e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001860:	2300      	movs	r3, #0
}
 8001862:	0018      	movs	r0, r3
 8001864:	46bd      	mov	sp, r7
 8001866:	b002      	add	sp, #8
 8001868:	bd80      	pop	{r7, pc}
 800186a:	46c0      	nop			@ (mov r8, r8)
 800186c:	f0ffffff 	.word	0xf0ffffff
 8001870:	ffff7fff 	.word	0xffff7fff
 8001874:	fffff7ff 	.word	0xfffff7ff
 8001878:	02008000 	.word	0x02008000

0800187c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800187c:	b590      	push	{r4, r7, lr}
 800187e:	b089      	sub	sp, #36	@ 0x24
 8001880:	af02      	add	r7, sp, #8
 8001882:	60f8      	str	r0, [r7, #12]
 8001884:	0008      	movs	r0, r1
 8001886:	607a      	str	r2, [r7, #4]
 8001888:	0019      	movs	r1, r3
 800188a:	230a      	movs	r3, #10
 800188c:	18fb      	adds	r3, r7, r3
 800188e:	1c02      	adds	r2, r0, #0
 8001890:	801a      	strh	r2, [r3, #0]
 8001892:	2308      	movs	r3, #8
 8001894:	18fb      	adds	r3, r7, r3
 8001896:	1c0a      	adds	r2, r1, #0
 8001898:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	2241      	movs	r2, #65	@ 0x41
 800189e:	5c9b      	ldrb	r3, [r3, r2]
 80018a0:	b2db      	uxtb	r3, r3
 80018a2:	2b20      	cmp	r3, #32
 80018a4:	d000      	beq.n	80018a8 <HAL_I2C_Master_Transmit+0x2c>
 80018a6:	e10a      	b.n	8001abe <HAL_I2C_Master_Transmit+0x242>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	2240      	movs	r2, #64	@ 0x40
 80018ac:	5c9b      	ldrb	r3, [r3, r2]
 80018ae:	2b01      	cmp	r3, #1
 80018b0:	d101      	bne.n	80018b6 <HAL_I2C_Master_Transmit+0x3a>
 80018b2:	2302      	movs	r3, #2
 80018b4:	e104      	b.n	8001ac0 <HAL_I2C_Master_Transmit+0x244>
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	2240      	movs	r2, #64	@ 0x40
 80018ba:	2101      	movs	r1, #1
 80018bc:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80018be:	f7ff fc81 	bl	80011c4 <HAL_GetTick>
 80018c2:	0003      	movs	r3, r0
 80018c4:	613b      	str	r3, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80018c6:	2380      	movs	r3, #128	@ 0x80
 80018c8:	0219      	lsls	r1, r3, #8
 80018ca:	68f8      	ldr	r0, [r7, #12]
 80018cc:	693b      	ldr	r3, [r7, #16]
 80018ce:	9300      	str	r3, [sp, #0]
 80018d0:	2319      	movs	r3, #25
 80018d2:	2201      	movs	r2, #1
 80018d4:	f000 f91e 	bl	8001b14 <I2C_WaitOnFlagUntilTimeout>
 80018d8:	1e03      	subs	r3, r0, #0
 80018da:	d001      	beq.n	80018e0 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 80018dc:	2301      	movs	r3, #1
 80018de:	e0ef      	b.n	8001ac0 <HAL_I2C_Master_Transmit+0x244>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	2241      	movs	r2, #65	@ 0x41
 80018e4:	2121      	movs	r1, #33	@ 0x21
 80018e6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	2242      	movs	r2, #66	@ 0x42
 80018ec:	2110      	movs	r1, #16
 80018ee:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	2200      	movs	r2, #0
 80018f4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	687a      	ldr	r2, [r7, #4]
 80018fa:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	2208      	movs	r2, #8
 8001900:	18ba      	adds	r2, r7, r2
 8001902:	8812      	ldrh	r2, [r2, #0]
 8001904:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	2200      	movs	r2, #0
 800190a:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001910:	b29b      	uxth	r3, r3
 8001912:	2bff      	cmp	r3, #255	@ 0xff
 8001914:	d906      	bls.n	8001924 <HAL_I2C_Master_Transmit+0xa8>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	22ff      	movs	r2, #255	@ 0xff
 800191a:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 800191c:	2380      	movs	r3, #128	@ 0x80
 800191e:	045b      	lsls	r3, r3, #17
 8001920:	617b      	str	r3, [r7, #20]
 8001922:	e007      	b.n	8001934 <HAL_I2C_Master_Transmit+0xb8>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001928:	b29a      	uxth	r2, r3
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 800192e:	2380      	movs	r3, #128	@ 0x80
 8001930:	049b      	lsls	r3, r3, #18
 8001932:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001938:	2b00      	cmp	r3, #0
 800193a:	d027      	beq.n	800198c <HAL_I2C_Master_Transmit+0x110>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001940:	781a      	ldrb	r2, [r3, #0]
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800194c:	1c5a      	adds	r2, r3, #1
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001956:	b29b      	uxth	r3, r3
 8001958:	3b01      	subs	r3, #1
 800195a:	b29a      	uxth	r2, r3
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001964:	3b01      	subs	r3, #1
 8001966:	b29a      	uxth	r2, r3
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001970:	b2db      	uxtb	r3, r3
 8001972:	3301      	adds	r3, #1
 8001974:	b2da      	uxtb	r2, r3
 8001976:	697c      	ldr	r4, [r7, #20]
 8001978:	230a      	movs	r3, #10
 800197a:	18fb      	adds	r3, r7, r3
 800197c:	8819      	ldrh	r1, [r3, #0]
 800197e:	68f8      	ldr	r0, [r7, #12]
 8001980:	4b51      	ldr	r3, [pc, #324]	@ (8001ac8 <HAL_I2C_Master_Transmit+0x24c>)
 8001982:	9300      	str	r3, [sp, #0]
 8001984:	0023      	movs	r3, r4
 8001986:	f000 fa9f 	bl	8001ec8 <I2C_TransferConfig>
 800198a:	e06f      	b.n	8001a6c <HAL_I2C_Master_Transmit+0x1f0>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001990:	b2da      	uxtb	r2, r3
 8001992:	697c      	ldr	r4, [r7, #20]
 8001994:	230a      	movs	r3, #10
 8001996:	18fb      	adds	r3, r7, r3
 8001998:	8819      	ldrh	r1, [r3, #0]
 800199a:	68f8      	ldr	r0, [r7, #12]
 800199c:	4b4a      	ldr	r3, [pc, #296]	@ (8001ac8 <HAL_I2C_Master_Transmit+0x24c>)
 800199e:	9300      	str	r3, [sp, #0]
 80019a0:	0023      	movs	r3, r4
 80019a2:	f000 fa91 	bl	8001ec8 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80019a6:	e061      	b.n	8001a6c <HAL_I2C_Master_Transmit+0x1f0>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80019a8:	693a      	ldr	r2, [r7, #16]
 80019aa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	0018      	movs	r0, r3
 80019b0:	f000 f908 	bl	8001bc4 <I2C_WaitOnTXISFlagUntilTimeout>
 80019b4:	1e03      	subs	r3, r0, #0
 80019b6:	d001      	beq.n	80019bc <HAL_I2C_Master_Transmit+0x140>
      {
        return HAL_ERROR;
 80019b8:	2301      	movs	r3, #1
 80019ba:	e081      	b.n	8001ac0 <HAL_I2C_Master_Transmit+0x244>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019c0:	781a      	ldrb	r2, [r3, #0]
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019cc:	1c5a      	adds	r2, r3, #1
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80019d6:	b29b      	uxth	r3, r3
 80019d8:	3b01      	subs	r3, #1
 80019da:	b29a      	uxth	r2, r3
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80019e4:	3b01      	subs	r3, #1
 80019e6:	b29a      	uxth	r2, r3
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80019f0:	b29b      	uxth	r3, r3
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d03a      	beq.n	8001a6c <HAL_I2C_Master_Transmit+0x1f0>
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d136      	bne.n	8001a6c <HAL_I2C_Master_Transmit+0x1f0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80019fe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001a00:	68f8      	ldr	r0, [r7, #12]
 8001a02:	693b      	ldr	r3, [r7, #16]
 8001a04:	9300      	str	r3, [sp, #0]
 8001a06:	0013      	movs	r3, r2
 8001a08:	2200      	movs	r2, #0
 8001a0a:	2180      	movs	r1, #128	@ 0x80
 8001a0c:	f000 f882 	bl	8001b14 <I2C_WaitOnFlagUntilTimeout>
 8001a10:	1e03      	subs	r3, r0, #0
 8001a12:	d001      	beq.n	8001a18 <HAL_I2C_Master_Transmit+0x19c>
        {
          return HAL_ERROR;
 8001a14:	2301      	movs	r3, #1
 8001a16:	e053      	b.n	8001ac0 <HAL_I2C_Master_Transmit+0x244>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a1c:	b29b      	uxth	r3, r3
 8001a1e:	2bff      	cmp	r3, #255	@ 0xff
 8001a20:	d911      	bls.n	8001a46 <HAL_I2C_Master_Transmit+0x1ca>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	22ff      	movs	r2, #255	@ 0xff
 8001a26:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a2c:	b2da      	uxtb	r2, r3
 8001a2e:	2380      	movs	r3, #128	@ 0x80
 8001a30:	045c      	lsls	r4, r3, #17
 8001a32:	230a      	movs	r3, #10
 8001a34:	18fb      	adds	r3, r7, r3
 8001a36:	8819      	ldrh	r1, [r3, #0]
 8001a38:	68f8      	ldr	r0, [r7, #12]
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	9300      	str	r3, [sp, #0]
 8001a3e:	0023      	movs	r3, r4
 8001a40:	f000 fa42 	bl	8001ec8 <I2C_TransferConfig>
 8001a44:	e012      	b.n	8001a6c <HAL_I2C_Master_Transmit+0x1f0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a4a:	b29a      	uxth	r2, r3
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a54:	b2da      	uxtb	r2, r3
 8001a56:	2380      	movs	r3, #128	@ 0x80
 8001a58:	049c      	lsls	r4, r3, #18
 8001a5a:	230a      	movs	r3, #10
 8001a5c:	18fb      	adds	r3, r7, r3
 8001a5e:	8819      	ldrh	r1, [r3, #0]
 8001a60:	68f8      	ldr	r0, [r7, #12]
 8001a62:	2300      	movs	r3, #0
 8001a64:	9300      	str	r3, [sp, #0]
 8001a66:	0023      	movs	r3, r4
 8001a68:	f000 fa2e 	bl	8001ec8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a70:	b29b      	uxth	r3, r3
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d198      	bne.n	80019a8 <HAL_I2C_Master_Transmit+0x12c>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a76:	693a      	ldr	r2, [r7, #16]
 8001a78:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	0018      	movs	r0, r3
 8001a7e:	f000 f8e7 	bl	8001c50 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001a82:	1e03      	subs	r3, r0, #0
 8001a84:	d001      	beq.n	8001a8a <HAL_I2C_Master_Transmit+0x20e>
    {
      return HAL_ERROR;
 8001a86:	2301      	movs	r3, #1
 8001a88:	e01a      	b.n	8001ac0 <HAL_I2C_Master_Transmit+0x244>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	2220      	movs	r2, #32
 8001a90:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	685a      	ldr	r2, [r3, #4]
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	490b      	ldr	r1, [pc, #44]	@ (8001acc <HAL_I2C_Master_Transmit+0x250>)
 8001a9e:	400a      	ands	r2, r1
 8001aa0:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	2241      	movs	r2, #65	@ 0x41
 8001aa6:	2120      	movs	r1, #32
 8001aa8:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	2242      	movs	r2, #66	@ 0x42
 8001aae:	2100      	movs	r1, #0
 8001ab0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	2240      	movs	r2, #64	@ 0x40
 8001ab6:	2100      	movs	r1, #0
 8001ab8:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001aba:	2300      	movs	r3, #0
 8001abc:	e000      	b.n	8001ac0 <HAL_I2C_Master_Transmit+0x244>
  }
  else
  {
    return HAL_BUSY;
 8001abe:	2302      	movs	r3, #2
  }
}
 8001ac0:	0018      	movs	r0, r3
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	b007      	add	sp, #28
 8001ac6:	bd90      	pop	{r4, r7, pc}
 8001ac8:	80002000 	.word	0x80002000
 8001acc:	fe00e800 	.word	0xfe00e800

08001ad0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b082      	sub	sp, #8
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	699b      	ldr	r3, [r3, #24]
 8001ade:	2202      	movs	r2, #2
 8001ae0:	4013      	ands	r3, r2
 8001ae2:	2b02      	cmp	r3, #2
 8001ae4:	d103      	bne.n	8001aee <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	2200      	movs	r2, #0
 8001aec:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	699b      	ldr	r3, [r3, #24]
 8001af4:	2201      	movs	r2, #1
 8001af6:	4013      	ands	r3, r2
 8001af8:	2b01      	cmp	r3, #1
 8001afa:	d007      	beq.n	8001b0c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	699a      	ldr	r2, [r3, #24]
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	2101      	movs	r1, #1
 8001b08:	430a      	orrs	r2, r1
 8001b0a:	619a      	str	r2, [r3, #24]
  }
}
 8001b0c:	46c0      	nop			@ (mov r8, r8)
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	b002      	add	sp, #8
 8001b12:	bd80      	pop	{r7, pc}

08001b14 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b084      	sub	sp, #16
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	60f8      	str	r0, [r7, #12]
 8001b1c:	60b9      	str	r1, [r7, #8]
 8001b1e:	603b      	str	r3, [r7, #0]
 8001b20:	1dfb      	adds	r3, r7, #7
 8001b22:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001b24:	e03a      	b.n	8001b9c <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001b26:	69ba      	ldr	r2, [r7, #24]
 8001b28:	6839      	ldr	r1, [r7, #0]
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	0018      	movs	r0, r3
 8001b2e:	f000 f8d3 	bl	8001cd8 <I2C_IsErrorOccurred>
 8001b32:	1e03      	subs	r3, r0, #0
 8001b34:	d001      	beq.n	8001b3a <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8001b36:	2301      	movs	r3, #1
 8001b38:	e040      	b.n	8001bbc <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	3301      	adds	r3, #1
 8001b3e:	d02d      	beq.n	8001b9c <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b40:	f7ff fb40 	bl	80011c4 <HAL_GetTick>
 8001b44:	0002      	movs	r2, r0
 8001b46:	69bb      	ldr	r3, [r7, #24]
 8001b48:	1ad3      	subs	r3, r2, r3
 8001b4a:	683a      	ldr	r2, [r7, #0]
 8001b4c:	429a      	cmp	r2, r3
 8001b4e:	d302      	bcc.n	8001b56 <I2C_WaitOnFlagUntilTimeout+0x42>
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d122      	bne.n	8001b9c <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	699b      	ldr	r3, [r3, #24]
 8001b5c:	68ba      	ldr	r2, [r7, #8]
 8001b5e:	4013      	ands	r3, r2
 8001b60:	68ba      	ldr	r2, [r7, #8]
 8001b62:	1ad3      	subs	r3, r2, r3
 8001b64:	425a      	negs	r2, r3
 8001b66:	4153      	adcs	r3, r2
 8001b68:	b2db      	uxtb	r3, r3
 8001b6a:	001a      	movs	r2, r3
 8001b6c:	1dfb      	adds	r3, r7, #7
 8001b6e:	781b      	ldrb	r3, [r3, #0]
 8001b70:	429a      	cmp	r2, r3
 8001b72:	d113      	bne.n	8001b9c <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b78:	2220      	movs	r2, #32
 8001b7a:	431a      	orrs	r2, r3
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	2241      	movs	r2, #65	@ 0x41
 8001b84:	2120      	movs	r1, #32
 8001b86:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	2242      	movs	r2, #66	@ 0x42
 8001b8c:	2100      	movs	r1, #0
 8001b8e:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	2240      	movs	r2, #64	@ 0x40
 8001b94:	2100      	movs	r1, #0
 8001b96:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8001b98:	2301      	movs	r3, #1
 8001b9a:	e00f      	b.n	8001bbc <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	699b      	ldr	r3, [r3, #24]
 8001ba2:	68ba      	ldr	r2, [r7, #8]
 8001ba4:	4013      	ands	r3, r2
 8001ba6:	68ba      	ldr	r2, [r7, #8]
 8001ba8:	1ad3      	subs	r3, r2, r3
 8001baa:	425a      	negs	r2, r3
 8001bac:	4153      	adcs	r3, r2
 8001bae:	b2db      	uxtb	r3, r3
 8001bb0:	001a      	movs	r2, r3
 8001bb2:	1dfb      	adds	r3, r7, #7
 8001bb4:	781b      	ldrb	r3, [r3, #0]
 8001bb6:	429a      	cmp	r2, r3
 8001bb8:	d0b5      	beq.n	8001b26 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001bba:	2300      	movs	r3, #0
}
 8001bbc:	0018      	movs	r0, r3
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	b004      	add	sp, #16
 8001bc2:	bd80      	pop	{r7, pc}

08001bc4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b084      	sub	sp, #16
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	60f8      	str	r0, [r7, #12]
 8001bcc:	60b9      	str	r1, [r7, #8]
 8001bce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001bd0:	e032      	b.n	8001c38 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001bd2:	687a      	ldr	r2, [r7, #4]
 8001bd4:	68b9      	ldr	r1, [r7, #8]
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	0018      	movs	r0, r3
 8001bda:	f000 f87d 	bl	8001cd8 <I2C_IsErrorOccurred>
 8001bde:	1e03      	subs	r3, r0, #0
 8001be0:	d001      	beq.n	8001be6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001be2:	2301      	movs	r3, #1
 8001be4:	e030      	b.n	8001c48 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001be6:	68bb      	ldr	r3, [r7, #8]
 8001be8:	3301      	adds	r3, #1
 8001bea:	d025      	beq.n	8001c38 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001bec:	f7ff faea 	bl	80011c4 <HAL_GetTick>
 8001bf0:	0002      	movs	r2, r0
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	1ad3      	subs	r3, r2, r3
 8001bf6:	68ba      	ldr	r2, [r7, #8]
 8001bf8:	429a      	cmp	r2, r3
 8001bfa:	d302      	bcc.n	8001c02 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8001bfc:	68bb      	ldr	r3, [r7, #8]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d11a      	bne.n	8001c38 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	699b      	ldr	r3, [r3, #24]
 8001c08:	2202      	movs	r2, #2
 8001c0a:	4013      	ands	r3, r2
 8001c0c:	2b02      	cmp	r3, #2
 8001c0e:	d013      	beq.n	8001c38 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c14:	2220      	movs	r2, #32
 8001c16:	431a      	orrs	r2, r3
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	2241      	movs	r2, #65	@ 0x41
 8001c20:	2120      	movs	r1, #32
 8001c22:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	2242      	movs	r2, #66	@ 0x42
 8001c28:	2100      	movs	r1, #0
 8001c2a:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	2240      	movs	r2, #64	@ 0x40
 8001c30:	2100      	movs	r1, #0
 8001c32:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8001c34:	2301      	movs	r3, #1
 8001c36:	e007      	b.n	8001c48 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	699b      	ldr	r3, [r3, #24]
 8001c3e:	2202      	movs	r2, #2
 8001c40:	4013      	ands	r3, r2
 8001c42:	2b02      	cmp	r3, #2
 8001c44:	d1c5      	bne.n	8001bd2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001c46:	2300      	movs	r3, #0
}
 8001c48:	0018      	movs	r0, r3
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	b004      	add	sp, #16
 8001c4e:	bd80      	pop	{r7, pc}

08001c50 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b084      	sub	sp, #16
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	60f8      	str	r0, [r7, #12]
 8001c58:	60b9      	str	r1, [r7, #8]
 8001c5a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001c5c:	e02f      	b.n	8001cbe <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001c5e:	687a      	ldr	r2, [r7, #4]
 8001c60:	68b9      	ldr	r1, [r7, #8]
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	0018      	movs	r0, r3
 8001c66:	f000 f837 	bl	8001cd8 <I2C_IsErrorOccurred>
 8001c6a:	1e03      	subs	r3, r0, #0
 8001c6c:	d001      	beq.n	8001c72 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	e02d      	b.n	8001cce <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c72:	f7ff faa7 	bl	80011c4 <HAL_GetTick>
 8001c76:	0002      	movs	r2, r0
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	1ad3      	subs	r3, r2, r3
 8001c7c:	68ba      	ldr	r2, [r7, #8]
 8001c7e:	429a      	cmp	r2, r3
 8001c80:	d302      	bcc.n	8001c88 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001c82:	68bb      	ldr	r3, [r7, #8]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d11a      	bne.n	8001cbe <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	699b      	ldr	r3, [r3, #24]
 8001c8e:	2220      	movs	r2, #32
 8001c90:	4013      	ands	r3, r2
 8001c92:	2b20      	cmp	r3, #32
 8001c94:	d013      	beq.n	8001cbe <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c9a:	2220      	movs	r2, #32
 8001c9c:	431a      	orrs	r2, r3
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	2241      	movs	r2, #65	@ 0x41
 8001ca6:	2120      	movs	r1, #32
 8001ca8:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	2242      	movs	r2, #66	@ 0x42
 8001cae:	2100      	movs	r1, #0
 8001cb0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	2240      	movs	r2, #64	@ 0x40
 8001cb6:	2100      	movs	r1, #0
 8001cb8:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8001cba:	2301      	movs	r3, #1
 8001cbc:	e007      	b.n	8001cce <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	699b      	ldr	r3, [r3, #24]
 8001cc4:	2220      	movs	r2, #32
 8001cc6:	4013      	ands	r3, r2
 8001cc8:	2b20      	cmp	r3, #32
 8001cca:	d1c8      	bne.n	8001c5e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001ccc:	2300      	movs	r3, #0
}
 8001cce:	0018      	movs	r0, r3
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	b004      	add	sp, #16
 8001cd4:	bd80      	pop	{r7, pc}
	...

08001cd8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b08a      	sub	sp, #40	@ 0x28
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	60f8      	str	r0, [r7, #12]
 8001ce0:	60b9      	str	r1, [r7, #8]
 8001ce2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ce4:	2327      	movs	r3, #39	@ 0x27
 8001ce6:	18fb      	adds	r3, r7, r3
 8001ce8:	2200      	movs	r2, #0
 8001cea:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	699b      	ldr	r3, [r3, #24]
 8001cf2:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001cfc:	69bb      	ldr	r3, [r7, #24]
 8001cfe:	2210      	movs	r2, #16
 8001d00:	4013      	ands	r3, r2
 8001d02:	d100      	bne.n	8001d06 <I2C_IsErrorOccurred+0x2e>
 8001d04:	e079      	b.n	8001dfa <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	2210      	movs	r2, #16
 8001d0c:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001d0e:	e057      	b.n	8001dc0 <I2C_IsErrorOccurred+0xe8>
 8001d10:	2227      	movs	r2, #39	@ 0x27
 8001d12:	18bb      	adds	r3, r7, r2
 8001d14:	18ba      	adds	r2, r7, r2
 8001d16:	7812      	ldrb	r2, [r2, #0]
 8001d18:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001d1a:	68bb      	ldr	r3, [r7, #8]
 8001d1c:	3301      	adds	r3, #1
 8001d1e:	d04f      	beq.n	8001dc0 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001d20:	f7ff fa50 	bl	80011c4 <HAL_GetTick>
 8001d24:	0002      	movs	r2, r0
 8001d26:	69fb      	ldr	r3, [r7, #28]
 8001d28:	1ad3      	subs	r3, r2, r3
 8001d2a:	68ba      	ldr	r2, [r7, #8]
 8001d2c:	429a      	cmp	r2, r3
 8001d2e:	d302      	bcc.n	8001d36 <I2C_IsErrorOccurred+0x5e>
 8001d30:	68bb      	ldr	r3, [r7, #8]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d144      	bne.n	8001dc0 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	685a      	ldr	r2, [r3, #4]
 8001d3c:	2380      	movs	r3, #128	@ 0x80
 8001d3e:	01db      	lsls	r3, r3, #7
 8001d40:	4013      	ands	r3, r2
 8001d42:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001d44:	2013      	movs	r0, #19
 8001d46:	183b      	adds	r3, r7, r0
 8001d48:	68fa      	ldr	r2, [r7, #12]
 8001d4a:	2142      	movs	r1, #66	@ 0x42
 8001d4c:	5c52      	ldrb	r2, [r2, r1]
 8001d4e:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	699a      	ldr	r2, [r3, #24]
 8001d56:	2380      	movs	r3, #128	@ 0x80
 8001d58:	021b      	lsls	r3, r3, #8
 8001d5a:	401a      	ands	r2, r3
 8001d5c:	2380      	movs	r3, #128	@ 0x80
 8001d5e:	021b      	lsls	r3, r3, #8
 8001d60:	429a      	cmp	r2, r3
 8001d62:	d126      	bne.n	8001db2 <I2C_IsErrorOccurred+0xda>
 8001d64:	697a      	ldr	r2, [r7, #20]
 8001d66:	2380      	movs	r3, #128	@ 0x80
 8001d68:	01db      	lsls	r3, r3, #7
 8001d6a:	429a      	cmp	r2, r3
 8001d6c:	d021      	beq.n	8001db2 <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 8001d6e:	183b      	adds	r3, r7, r0
 8001d70:	781b      	ldrb	r3, [r3, #0]
 8001d72:	2b20      	cmp	r3, #32
 8001d74:	d01d      	beq.n	8001db2 <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	685a      	ldr	r2, [r3, #4]
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	2180      	movs	r1, #128	@ 0x80
 8001d82:	01c9      	lsls	r1, r1, #7
 8001d84:	430a      	orrs	r2, r1
 8001d86:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001d88:	f7ff fa1c 	bl	80011c4 <HAL_GetTick>
 8001d8c:	0003      	movs	r3, r0
 8001d8e:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001d90:	e00f      	b.n	8001db2 <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001d92:	f7ff fa17 	bl	80011c4 <HAL_GetTick>
 8001d96:	0002      	movs	r2, r0
 8001d98:	69fb      	ldr	r3, [r7, #28]
 8001d9a:	1ad3      	subs	r3, r2, r3
 8001d9c:	2b19      	cmp	r3, #25
 8001d9e:	d908      	bls.n	8001db2 <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8001da0:	6a3b      	ldr	r3, [r7, #32]
 8001da2:	2220      	movs	r2, #32
 8001da4:	4313      	orrs	r3, r2
 8001da6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8001da8:	2327      	movs	r3, #39	@ 0x27
 8001daa:	18fb      	adds	r3, r7, r3
 8001dac:	2201      	movs	r2, #1
 8001dae:	701a      	strb	r2, [r3, #0]

              break;
 8001db0:	e006      	b.n	8001dc0 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	699b      	ldr	r3, [r3, #24]
 8001db8:	2220      	movs	r2, #32
 8001dba:	4013      	ands	r3, r2
 8001dbc:	2b20      	cmp	r3, #32
 8001dbe:	d1e8      	bne.n	8001d92 <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	699b      	ldr	r3, [r3, #24]
 8001dc6:	2220      	movs	r2, #32
 8001dc8:	4013      	ands	r3, r2
 8001dca:	2b20      	cmp	r3, #32
 8001dcc:	d004      	beq.n	8001dd8 <I2C_IsErrorOccurred+0x100>
 8001dce:	2327      	movs	r3, #39	@ 0x27
 8001dd0:	18fb      	adds	r3, r7, r3
 8001dd2:	781b      	ldrb	r3, [r3, #0]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d09b      	beq.n	8001d10 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001dd8:	2327      	movs	r3, #39	@ 0x27
 8001dda:	18fb      	adds	r3, r7, r3
 8001ddc:	781b      	ldrb	r3, [r3, #0]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d103      	bne.n	8001dea <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	2220      	movs	r2, #32
 8001de8:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001dea:	6a3b      	ldr	r3, [r7, #32]
 8001dec:	2204      	movs	r2, #4
 8001dee:	4313      	orrs	r3, r2
 8001df0:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001df2:	2327      	movs	r3, #39	@ 0x27
 8001df4:	18fb      	adds	r3, r7, r3
 8001df6:	2201      	movs	r2, #1
 8001df8:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	699b      	ldr	r3, [r3, #24]
 8001e00:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001e02:	69ba      	ldr	r2, [r7, #24]
 8001e04:	2380      	movs	r3, #128	@ 0x80
 8001e06:	005b      	lsls	r3, r3, #1
 8001e08:	4013      	ands	r3, r2
 8001e0a:	d00c      	beq.n	8001e26 <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001e0c:	6a3b      	ldr	r3, [r7, #32]
 8001e0e:	2201      	movs	r2, #1
 8001e10:	4313      	orrs	r3, r2
 8001e12:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	2280      	movs	r2, #128	@ 0x80
 8001e1a:	0052      	lsls	r2, r2, #1
 8001e1c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001e1e:	2327      	movs	r3, #39	@ 0x27
 8001e20:	18fb      	adds	r3, r7, r3
 8001e22:	2201      	movs	r2, #1
 8001e24:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001e26:	69ba      	ldr	r2, [r7, #24]
 8001e28:	2380      	movs	r3, #128	@ 0x80
 8001e2a:	00db      	lsls	r3, r3, #3
 8001e2c:	4013      	ands	r3, r2
 8001e2e:	d00c      	beq.n	8001e4a <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001e30:	6a3b      	ldr	r3, [r7, #32]
 8001e32:	2208      	movs	r2, #8
 8001e34:	4313      	orrs	r3, r2
 8001e36:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	2280      	movs	r2, #128	@ 0x80
 8001e3e:	00d2      	lsls	r2, r2, #3
 8001e40:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001e42:	2327      	movs	r3, #39	@ 0x27
 8001e44:	18fb      	adds	r3, r7, r3
 8001e46:	2201      	movs	r2, #1
 8001e48:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001e4a:	69ba      	ldr	r2, [r7, #24]
 8001e4c:	2380      	movs	r3, #128	@ 0x80
 8001e4e:	009b      	lsls	r3, r3, #2
 8001e50:	4013      	ands	r3, r2
 8001e52:	d00c      	beq.n	8001e6e <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001e54:	6a3b      	ldr	r3, [r7, #32]
 8001e56:	2202      	movs	r2, #2
 8001e58:	4313      	orrs	r3, r2
 8001e5a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	2280      	movs	r2, #128	@ 0x80
 8001e62:	0092      	lsls	r2, r2, #2
 8001e64:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001e66:	2327      	movs	r3, #39	@ 0x27
 8001e68:	18fb      	adds	r3, r7, r3
 8001e6a:	2201      	movs	r2, #1
 8001e6c:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8001e6e:	2327      	movs	r3, #39	@ 0x27
 8001e70:	18fb      	adds	r3, r7, r3
 8001e72:	781b      	ldrb	r3, [r3, #0]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d01d      	beq.n	8001eb4 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	0018      	movs	r0, r3
 8001e7c:	f7ff fe28 	bl	8001ad0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	685a      	ldr	r2, [r3, #4]
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	490e      	ldr	r1, [pc, #56]	@ (8001ec4 <I2C_IsErrorOccurred+0x1ec>)
 8001e8c:	400a      	ands	r2, r1
 8001e8e:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001e94:	6a3b      	ldr	r3, [r7, #32]
 8001e96:	431a      	orrs	r2, r3
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	2241      	movs	r2, #65	@ 0x41
 8001ea0:	2120      	movs	r1, #32
 8001ea2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	2242      	movs	r2, #66	@ 0x42
 8001ea8:	2100      	movs	r1, #0
 8001eaa:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	2240      	movs	r2, #64	@ 0x40
 8001eb0:	2100      	movs	r1, #0
 8001eb2:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8001eb4:	2327      	movs	r3, #39	@ 0x27
 8001eb6:	18fb      	adds	r3, r7, r3
 8001eb8:	781b      	ldrb	r3, [r3, #0]
}
 8001eba:	0018      	movs	r0, r3
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	b00a      	add	sp, #40	@ 0x28
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	46c0      	nop			@ (mov r8, r8)
 8001ec4:	fe00e800 	.word	0xfe00e800

08001ec8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001ec8:	b590      	push	{r4, r7, lr}
 8001eca:	b087      	sub	sp, #28
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	60f8      	str	r0, [r7, #12]
 8001ed0:	0008      	movs	r0, r1
 8001ed2:	0011      	movs	r1, r2
 8001ed4:	607b      	str	r3, [r7, #4]
 8001ed6:	240a      	movs	r4, #10
 8001ed8:	193b      	adds	r3, r7, r4
 8001eda:	1c02      	adds	r2, r0, #0
 8001edc:	801a      	strh	r2, [r3, #0]
 8001ede:	2009      	movs	r0, #9
 8001ee0:	183b      	adds	r3, r7, r0
 8001ee2:	1c0a      	adds	r2, r1, #0
 8001ee4:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001ee6:	193b      	adds	r3, r7, r4
 8001ee8:	881b      	ldrh	r3, [r3, #0]
 8001eea:	059b      	lsls	r3, r3, #22
 8001eec:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001eee:	183b      	adds	r3, r7, r0
 8001ef0:	781b      	ldrb	r3, [r3, #0]
 8001ef2:	0419      	lsls	r1, r3, #16
 8001ef4:	23ff      	movs	r3, #255	@ 0xff
 8001ef6:	041b      	lsls	r3, r3, #16
 8001ef8:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001efa:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001f00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f02:	4313      	orrs	r3, r2
 8001f04:	005b      	lsls	r3, r3, #1
 8001f06:	085b      	lsrs	r3, r3, #1
 8001f08:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001f12:	0d51      	lsrs	r1, r2, #21
 8001f14:	2280      	movs	r2, #128	@ 0x80
 8001f16:	00d2      	lsls	r2, r2, #3
 8001f18:	400a      	ands	r2, r1
 8001f1a:	4907      	ldr	r1, [pc, #28]	@ (8001f38 <I2C_TransferConfig+0x70>)
 8001f1c:	430a      	orrs	r2, r1
 8001f1e:	43d2      	mvns	r2, r2
 8001f20:	401a      	ands	r2, r3
 8001f22:	0011      	movs	r1, r2
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	697a      	ldr	r2, [r7, #20]
 8001f2a:	430a      	orrs	r2, r1
 8001f2c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8001f2e:	46c0      	nop			@ (mov r8, r8)
 8001f30:	46bd      	mov	sp, r7
 8001f32:	b007      	add	sp, #28
 8001f34:	bd90      	pop	{r4, r7, pc}
 8001f36:	46c0      	nop			@ (mov r8, r8)
 8001f38:	03ff63ff 	.word	0x03ff63ff

08001f3c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b082      	sub	sp, #8
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
 8001f44:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2241      	movs	r2, #65	@ 0x41
 8001f4a:	5c9b      	ldrb	r3, [r3, r2]
 8001f4c:	b2db      	uxtb	r3, r3
 8001f4e:	2b20      	cmp	r3, #32
 8001f50:	d138      	bne.n	8001fc4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2240      	movs	r2, #64	@ 0x40
 8001f56:	5c9b      	ldrb	r3, [r3, r2]
 8001f58:	2b01      	cmp	r3, #1
 8001f5a:	d101      	bne.n	8001f60 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001f5c:	2302      	movs	r3, #2
 8001f5e:	e032      	b.n	8001fc6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2240      	movs	r2, #64	@ 0x40
 8001f64:	2101      	movs	r1, #1
 8001f66:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2241      	movs	r2, #65	@ 0x41
 8001f6c:	2124      	movs	r1, #36	@ 0x24
 8001f6e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	681a      	ldr	r2, [r3, #0]
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	2101      	movs	r1, #1
 8001f7c:	438a      	bics	r2, r1
 8001f7e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	681a      	ldr	r2, [r3, #0]
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	4911      	ldr	r1, [pc, #68]	@ (8001fd0 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8001f8c:	400a      	ands	r2, r1
 8001f8e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	6819      	ldr	r1, [r3, #0]
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	683a      	ldr	r2, [r7, #0]
 8001f9c:	430a      	orrs	r2, r1
 8001f9e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	681a      	ldr	r2, [r3, #0]
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	2101      	movs	r1, #1
 8001fac:	430a      	orrs	r2, r1
 8001fae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2241      	movs	r2, #65	@ 0x41
 8001fb4:	2120      	movs	r1, #32
 8001fb6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2240      	movs	r2, #64	@ 0x40
 8001fbc:	2100      	movs	r1, #0
 8001fbe:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	e000      	b.n	8001fc6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001fc4:	2302      	movs	r3, #2
  }
}
 8001fc6:	0018      	movs	r0, r3
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	b002      	add	sp, #8
 8001fcc:	bd80      	pop	{r7, pc}
 8001fce:	46c0      	nop			@ (mov r8, r8)
 8001fd0:	ffffefff 	.word	0xffffefff

08001fd4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b084      	sub	sp, #16
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
 8001fdc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2241      	movs	r2, #65	@ 0x41
 8001fe2:	5c9b      	ldrb	r3, [r3, r2]
 8001fe4:	b2db      	uxtb	r3, r3
 8001fe6:	2b20      	cmp	r3, #32
 8001fe8:	d139      	bne.n	800205e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2240      	movs	r2, #64	@ 0x40
 8001fee:	5c9b      	ldrb	r3, [r3, r2]
 8001ff0:	2b01      	cmp	r3, #1
 8001ff2:	d101      	bne.n	8001ff8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001ff4:	2302      	movs	r3, #2
 8001ff6:	e033      	b.n	8002060 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2240      	movs	r2, #64	@ 0x40
 8001ffc:	2101      	movs	r1, #1
 8001ffe:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2241      	movs	r2, #65	@ 0x41
 8002004:	2124      	movs	r1, #36	@ 0x24
 8002006:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	681a      	ldr	r2, [r3, #0]
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	2101      	movs	r1, #1
 8002014:	438a      	bics	r2, r1
 8002016:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	4a11      	ldr	r2, [pc, #68]	@ (8002068 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8002024:	4013      	ands	r3, r2
 8002026:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	021b      	lsls	r3, r3, #8
 800202c:	68fa      	ldr	r2, [r7, #12]
 800202e:	4313      	orrs	r3, r2
 8002030:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	68fa      	ldr	r2, [r7, #12]
 8002038:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	681a      	ldr	r2, [r3, #0]
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	2101      	movs	r1, #1
 8002046:	430a      	orrs	r2, r1
 8002048:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2241      	movs	r2, #65	@ 0x41
 800204e:	2120      	movs	r1, #32
 8002050:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2240      	movs	r2, #64	@ 0x40
 8002056:	2100      	movs	r1, #0
 8002058:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800205a:	2300      	movs	r3, #0
 800205c:	e000      	b.n	8002060 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800205e:	2302      	movs	r3, #2
  }
}
 8002060:	0018      	movs	r0, r3
 8002062:	46bd      	mov	sp, r7
 8002064:	b004      	add	sp, #16
 8002066:	bd80      	pop	{r7, pc}
 8002068:	fffff0ff 	.word	0xfffff0ff

0800206c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b088      	sub	sp, #32
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d101      	bne.n	800207e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800207a:	2301      	movs	r3, #1
 800207c:	e301      	b.n	8002682 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	2201      	movs	r2, #1
 8002084:	4013      	ands	r3, r2
 8002086:	d100      	bne.n	800208a <HAL_RCC_OscConfig+0x1e>
 8002088:	e08d      	b.n	80021a6 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800208a:	4bc3      	ldr	r3, [pc, #780]	@ (8002398 <HAL_RCC_OscConfig+0x32c>)
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	220c      	movs	r2, #12
 8002090:	4013      	ands	r3, r2
 8002092:	2b04      	cmp	r3, #4
 8002094:	d00e      	beq.n	80020b4 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002096:	4bc0      	ldr	r3, [pc, #768]	@ (8002398 <HAL_RCC_OscConfig+0x32c>)
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	220c      	movs	r2, #12
 800209c:	4013      	ands	r3, r2
 800209e:	2b08      	cmp	r3, #8
 80020a0:	d116      	bne.n	80020d0 <HAL_RCC_OscConfig+0x64>
 80020a2:	4bbd      	ldr	r3, [pc, #756]	@ (8002398 <HAL_RCC_OscConfig+0x32c>)
 80020a4:	685a      	ldr	r2, [r3, #4]
 80020a6:	2380      	movs	r3, #128	@ 0x80
 80020a8:	025b      	lsls	r3, r3, #9
 80020aa:	401a      	ands	r2, r3
 80020ac:	2380      	movs	r3, #128	@ 0x80
 80020ae:	025b      	lsls	r3, r3, #9
 80020b0:	429a      	cmp	r2, r3
 80020b2:	d10d      	bne.n	80020d0 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020b4:	4bb8      	ldr	r3, [pc, #736]	@ (8002398 <HAL_RCC_OscConfig+0x32c>)
 80020b6:	681a      	ldr	r2, [r3, #0]
 80020b8:	2380      	movs	r3, #128	@ 0x80
 80020ba:	029b      	lsls	r3, r3, #10
 80020bc:	4013      	ands	r3, r2
 80020be:	d100      	bne.n	80020c2 <HAL_RCC_OscConfig+0x56>
 80020c0:	e070      	b.n	80021a4 <HAL_RCC_OscConfig+0x138>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d000      	beq.n	80020cc <HAL_RCC_OscConfig+0x60>
 80020ca:	e06b      	b.n	80021a4 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 80020cc:	2301      	movs	r3, #1
 80020ce:	e2d8      	b.n	8002682 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	2b01      	cmp	r3, #1
 80020d6:	d107      	bne.n	80020e8 <HAL_RCC_OscConfig+0x7c>
 80020d8:	4baf      	ldr	r3, [pc, #700]	@ (8002398 <HAL_RCC_OscConfig+0x32c>)
 80020da:	681a      	ldr	r2, [r3, #0]
 80020dc:	4bae      	ldr	r3, [pc, #696]	@ (8002398 <HAL_RCC_OscConfig+0x32c>)
 80020de:	2180      	movs	r1, #128	@ 0x80
 80020e0:	0249      	lsls	r1, r1, #9
 80020e2:	430a      	orrs	r2, r1
 80020e4:	601a      	str	r2, [r3, #0]
 80020e6:	e02f      	b.n	8002148 <HAL_RCC_OscConfig+0xdc>
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d10c      	bne.n	800210a <HAL_RCC_OscConfig+0x9e>
 80020f0:	4ba9      	ldr	r3, [pc, #676]	@ (8002398 <HAL_RCC_OscConfig+0x32c>)
 80020f2:	681a      	ldr	r2, [r3, #0]
 80020f4:	4ba8      	ldr	r3, [pc, #672]	@ (8002398 <HAL_RCC_OscConfig+0x32c>)
 80020f6:	49a9      	ldr	r1, [pc, #676]	@ (800239c <HAL_RCC_OscConfig+0x330>)
 80020f8:	400a      	ands	r2, r1
 80020fa:	601a      	str	r2, [r3, #0]
 80020fc:	4ba6      	ldr	r3, [pc, #664]	@ (8002398 <HAL_RCC_OscConfig+0x32c>)
 80020fe:	681a      	ldr	r2, [r3, #0]
 8002100:	4ba5      	ldr	r3, [pc, #660]	@ (8002398 <HAL_RCC_OscConfig+0x32c>)
 8002102:	49a7      	ldr	r1, [pc, #668]	@ (80023a0 <HAL_RCC_OscConfig+0x334>)
 8002104:	400a      	ands	r2, r1
 8002106:	601a      	str	r2, [r3, #0]
 8002108:	e01e      	b.n	8002148 <HAL_RCC_OscConfig+0xdc>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	2b05      	cmp	r3, #5
 8002110:	d10e      	bne.n	8002130 <HAL_RCC_OscConfig+0xc4>
 8002112:	4ba1      	ldr	r3, [pc, #644]	@ (8002398 <HAL_RCC_OscConfig+0x32c>)
 8002114:	681a      	ldr	r2, [r3, #0]
 8002116:	4ba0      	ldr	r3, [pc, #640]	@ (8002398 <HAL_RCC_OscConfig+0x32c>)
 8002118:	2180      	movs	r1, #128	@ 0x80
 800211a:	02c9      	lsls	r1, r1, #11
 800211c:	430a      	orrs	r2, r1
 800211e:	601a      	str	r2, [r3, #0]
 8002120:	4b9d      	ldr	r3, [pc, #628]	@ (8002398 <HAL_RCC_OscConfig+0x32c>)
 8002122:	681a      	ldr	r2, [r3, #0]
 8002124:	4b9c      	ldr	r3, [pc, #624]	@ (8002398 <HAL_RCC_OscConfig+0x32c>)
 8002126:	2180      	movs	r1, #128	@ 0x80
 8002128:	0249      	lsls	r1, r1, #9
 800212a:	430a      	orrs	r2, r1
 800212c:	601a      	str	r2, [r3, #0]
 800212e:	e00b      	b.n	8002148 <HAL_RCC_OscConfig+0xdc>
 8002130:	4b99      	ldr	r3, [pc, #612]	@ (8002398 <HAL_RCC_OscConfig+0x32c>)
 8002132:	681a      	ldr	r2, [r3, #0]
 8002134:	4b98      	ldr	r3, [pc, #608]	@ (8002398 <HAL_RCC_OscConfig+0x32c>)
 8002136:	4999      	ldr	r1, [pc, #612]	@ (800239c <HAL_RCC_OscConfig+0x330>)
 8002138:	400a      	ands	r2, r1
 800213a:	601a      	str	r2, [r3, #0]
 800213c:	4b96      	ldr	r3, [pc, #600]	@ (8002398 <HAL_RCC_OscConfig+0x32c>)
 800213e:	681a      	ldr	r2, [r3, #0]
 8002140:	4b95      	ldr	r3, [pc, #596]	@ (8002398 <HAL_RCC_OscConfig+0x32c>)
 8002142:	4997      	ldr	r1, [pc, #604]	@ (80023a0 <HAL_RCC_OscConfig+0x334>)
 8002144:	400a      	ands	r2, r1
 8002146:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d014      	beq.n	800217a <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002150:	f7ff f838 	bl	80011c4 <HAL_GetTick>
 8002154:	0003      	movs	r3, r0
 8002156:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002158:	e008      	b.n	800216c <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800215a:	f7ff f833 	bl	80011c4 <HAL_GetTick>
 800215e:	0002      	movs	r2, r0
 8002160:	69bb      	ldr	r3, [r7, #24]
 8002162:	1ad3      	subs	r3, r2, r3
 8002164:	2b64      	cmp	r3, #100	@ 0x64
 8002166:	d901      	bls.n	800216c <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8002168:	2303      	movs	r3, #3
 800216a:	e28a      	b.n	8002682 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800216c:	4b8a      	ldr	r3, [pc, #552]	@ (8002398 <HAL_RCC_OscConfig+0x32c>)
 800216e:	681a      	ldr	r2, [r3, #0]
 8002170:	2380      	movs	r3, #128	@ 0x80
 8002172:	029b      	lsls	r3, r3, #10
 8002174:	4013      	ands	r3, r2
 8002176:	d0f0      	beq.n	800215a <HAL_RCC_OscConfig+0xee>
 8002178:	e015      	b.n	80021a6 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800217a:	f7ff f823 	bl	80011c4 <HAL_GetTick>
 800217e:	0003      	movs	r3, r0
 8002180:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002182:	e008      	b.n	8002196 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002184:	f7ff f81e 	bl	80011c4 <HAL_GetTick>
 8002188:	0002      	movs	r2, r0
 800218a:	69bb      	ldr	r3, [r7, #24]
 800218c:	1ad3      	subs	r3, r2, r3
 800218e:	2b64      	cmp	r3, #100	@ 0x64
 8002190:	d901      	bls.n	8002196 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8002192:	2303      	movs	r3, #3
 8002194:	e275      	b.n	8002682 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002196:	4b80      	ldr	r3, [pc, #512]	@ (8002398 <HAL_RCC_OscConfig+0x32c>)
 8002198:	681a      	ldr	r2, [r3, #0]
 800219a:	2380      	movs	r3, #128	@ 0x80
 800219c:	029b      	lsls	r3, r3, #10
 800219e:	4013      	ands	r3, r2
 80021a0:	d1f0      	bne.n	8002184 <HAL_RCC_OscConfig+0x118>
 80021a2:	e000      	b.n	80021a6 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021a4:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	2202      	movs	r2, #2
 80021ac:	4013      	ands	r3, r2
 80021ae:	d100      	bne.n	80021b2 <HAL_RCC_OscConfig+0x146>
 80021b0:	e069      	b.n	8002286 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80021b2:	4b79      	ldr	r3, [pc, #484]	@ (8002398 <HAL_RCC_OscConfig+0x32c>)
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	220c      	movs	r2, #12
 80021b8:	4013      	ands	r3, r2
 80021ba:	d00b      	beq.n	80021d4 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80021bc:	4b76      	ldr	r3, [pc, #472]	@ (8002398 <HAL_RCC_OscConfig+0x32c>)
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	220c      	movs	r2, #12
 80021c2:	4013      	ands	r3, r2
 80021c4:	2b08      	cmp	r3, #8
 80021c6:	d11c      	bne.n	8002202 <HAL_RCC_OscConfig+0x196>
 80021c8:	4b73      	ldr	r3, [pc, #460]	@ (8002398 <HAL_RCC_OscConfig+0x32c>)
 80021ca:	685a      	ldr	r2, [r3, #4]
 80021cc:	2380      	movs	r3, #128	@ 0x80
 80021ce:	025b      	lsls	r3, r3, #9
 80021d0:	4013      	ands	r3, r2
 80021d2:	d116      	bne.n	8002202 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021d4:	4b70      	ldr	r3, [pc, #448]	@ (8002398 <HAL_RCC_OscConfig+0x32c>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	2202      	movs	r2, #2
 80021da:	4013      	ands	r3, r2
 80021dc:	d005      	beq.n	80021ea <HAL_RCC_OscConfig+0x17e>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	68db      	ldr	r3, [r3, #12]
 80021e2:	2b01      	cmp	r3, #1
 80021e4:	d001      	beq.n	80021ea <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80021e6:	2301      	movs	r3, #1
 80021e8:	e24b      	b.n	8002682 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021ea:	4b6b      	ldr	r3, [pc, #428]	@ (8002398 <HAL_RCC_OscConfig+0x32c>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	22f8      	movs	r2, #248	@ 0xf8
 80021f0:	4393      	bics	r3, r2
 80021f2:	0019      	movs	r1, r3
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	691b      	ldr	r3, [r3, #16]
 80021f8:	00da      	lsls	r2, r3, #3
 80021fa:	4b67      	ldr	r3, [pc, #412]	@ (8002398 <HAL_RCC_OscConfig+0x32c>)
 80021fc:	430a      	orrs	r2, r1
 80021fe:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002200:	e041      	b.n	8002286 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	68db      	ldr	r3, [r3, #12]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d024      	beq.n	8002254 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800220a:	4b63      	ldr	r3, [pc, #396]	@ (8002398 <HAL_RCC_OscConfig+0x32c>)
 800220c:	681a      	ldr	r2, [r3, #0]
 800220e:	4b62      	ldr	r3, [pc, #392]	@ (8002398 <HAL_RCC_OscConfig+0x32c>)
 8002210:	2101      	movs	r1, #1
 8002212:	430a      	orrs	r2, r1
 8002214:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002216:	f7fe ffd5 	bl	80011c4 <HAL_GetTick>
 800221a:	0003      	movs	r3, r0
 800221c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800221e:	e008      	b.n	8002232 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002220:	f7fe ffd0 	bl	80011c4 <HAL_GetTick>
 8002224:	0002      	movs	r2, r0
 8002226:	69bb      	ldr	r3, [r7, #24]
 8002228:	1ad3      	subs	r3, r2, r3
 800222a:	2b02      	cmp	r3, #2
 800222c:	d901      	bls.n	8002232 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 800222e:	2303      	movs	r3, #3
 8002230:	e227      	b.n	8002682 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002232:	4b59      	ldr	r3, [pc, #356]	@ (8002398 <HAL_RCC_OscConfig+0x32c>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	2202      	movs	r2, #2
 8002238:	4013      	ands	r3, r2
 800223a:	d0f1      	beq.n	8002220 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800223c:	4b56      	ldr	r3, [pc, #344]	@ (8002398 <HAL_RCC_OscConfig+0x32c>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	22f8      	movs	r2, #248	@ 0xf8
 8002242:	4393      	bics	r3, r2
 8002244:	0019      	movs	r1, r3
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	691b      	ldr	r3, [r3, #16]
 800224a:	00da      	lsls	r2, r3, #3
 800224c:	4b52      	ldr	r3, [pc, #328]	@ (8002398 <HAL_RCC_OscConfig+0x32c>)
 800224e:	430a      	orrs	r2, r1
 8002250:	601a      	str	r2, [r3, #0]
 8002252:	e018      	b.n	8002286 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002254:	4b50      	ldr	r3, [pc, #320]	@ (8002398 <HAL_RCC_OscConfig+0x32c>)
 8002256:	681a      	ldr	r2, [r3, #0]
 8002258:	4b4f      	ldr	r3, [pc, #316]	@ (8002398 <HAL_RCC_OscConfig+0x32c>)
 800225a:	2101      	movs	r1, #1
 800225c:	438a      	bics	r2, r1
 800225e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002260:	f7fe ffb0 	bl	80011c4 <HAL_GetTick>
 8002264:	0003      	movs	r3, r0
 8002266:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002268:	e008      	b.n	800227c <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800226a:	f7fe ffab 	bl	80011c4 <HAL_GetTick>
 800226e:	0002      	movs	r2, r0
 8002270:	69bb      	ldr	r3, [r7, #24]
 8002272:	1ad3      	subs	r3, r2, r3
 8002274:	2b02      	cmp	r3, #2
 8002276:	d901      	bls.n	800227c <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8002278:	2303      	movs	r3, #3
 800227a:	e202      	b.n	8002682 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800227c:	4b46      	ldr	r3, [pc, #280]	@ (8002398 <HAL_RCC_OscConfig+0x32c>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	2202      	movs	r2, #2
 8002282:	4013      	ands	r3, r2
 8002284:	d1f1      	bne.n	800226a <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	2208      	movs	r2, #8
 800228c:	4013      	ands	r3, r2
 800228e:	d036      	beq.n	80022fe <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	69db      	ldr	r3, [r3, #28]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d019      	beq.n	80022cc <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002298:	4b3f      	ldr	r3, [pc, #252]	@ (8002398 <HAL_RCC_OscConfig+0x32c>)
 800229a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800229c:	4b3e      	ldr	r3, [pc, #248]	@ (8002398 <HAL_RCC_OscConfig+0x32c>)
 800229e:	2101      	movs	r1, #1
 80022a0:	430a      	orrs	r2, r1
 80022a2:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022a4:	f7fe ff8e 	bl	80011c4 <HAL_GetTick>
 80022a8:	0003      	movs	r3, r0
 80022aa:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022ac:	e008      	b.n	80022c0 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80022ae:	f7fe ff89 	bl	80011c4 <HAL_GetTick>
 80022b2:	0002      	movs	r2, r0
 80022b4:	69bb      	ldr	r3, [r7, #24]
 80022b6:	1ad3      	subs	r3, r2, r3
 80022b8:	2b02      	cmp	r3, #2
 80022ba:	d901      	bls.n	80022c0 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 80022bc:	2303      	movs	r3, #3
 80022be:	e1e0      	b.n	8002682 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022c0:	4b35      	ldr	r3, [pc, #212]	@ (8002398 <HAL_RCC_OscConfig+0x32c>)
 80022c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022c4:	2202      	movs	r2, #2
 80022c6:	4013      	ands	r3, r2
 80022c8:	d0f1      	beq.n	80022ae <HAL_RCC_OscConfig+0x242>
 80022ca:	e018      	b.n	80022fe <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022cc:	4b32      	ldr	r3, [pc, #200]	@ (8002398 <HAL_RCC_OscConfig+0x32c>)
 80022ce:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80022d0:	4b31      	ldr	r3, [pc, #196]	@ (8002398 <HAL_RCC_OscConfig+0x32c>)
 80022d2:	2101      	movs	r1, #1
 80022d4:	438a      	bics	r2, r1
 80022d6:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022d8:	f7fe ff74 	bl	80011c4 <HAL_GetTick>
 80022dc:	0003      	movs	r3, r0
 80022de:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022e0:	e008      	b.n	80022f4 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80022e2:	f7fe ff6f 	bl	80011c4 <HAL_GetTick>
 80022e6:	0002      	movs	r2, r0
 80022e8:	69bb      	ldr	r3, [r7, #24]
 80022ea:	1ad3      	subs	r3, r2, r3
 80022ec:	2b02      	cmp	r3, #2
 80022ee:	d901      	bls.n	80022f4 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 80022f0:	2303      	movs	r3, #3
 80022f2:	e1c6      	b.n	8002682 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022f4:	4b28      	ldr	r3, [pc, #160]	@ (8002398 <HAL_RCC_OscConfig+0x32c>)
 80022f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022f8:	2202      	movs	r2, #2
 80022fa:	4013      	ands	r3, r2
 80022fc:	d1f1      	bne.n	80022e2 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	2204      	movs	r2, #4
 8002304:	4013      	ands	r3, r2
 8002306:	d100      	bne.n	800230a <HAL_RCC_OscConfig+0x29e>
 8002308:	e0b4      	b.n	8002474 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 800230a:	201f      	movs	r0, #31
 800230c:	183b      	adds	r3, r7, r0
 800230e:	2200      	movs	r2, #0
 8002310:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002312:	4b21      	ldr	r3, [pc, #132]	@ (8002398 <HAL_RCC_OscConfig+0x32c>)
 8002314:	69da      	ldr	r2, [r3, #28]
 8002316:	2380      	movs	r3, #128	@ 0x80
 8002318:	055b      	lsls	r3, r3, #21
 800231a:	4013      	ands	r3, r2
 800231c:	d110      	bne.n	8002340 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800231e:	4b1e      	ldr	r3, [pc, #120]	@ (8002398 <HAL_RCC_OscConfig+0x32c>)
 8002320:	69da      	ldr	r2, [r3, #28]
 8002322:	4b1d      	ldr	r3, [pc, #116]	@ (8002398 <HAL_RCC_OscConfig+0x32c>)
 8002324:	2180      	movs	r1, #128	@ 0x80
 8002326:	0549      	lsls	r1, r1, #21
 8002328:	430a      	orrs	r2, r1
 800232a:	61da      	str	r2, [r3, #28]
 800232c:	4b1a      	ldr	r3, [pc, #104]	@ (8002398 <HAL_RCC_OscConfig+0x32c>)
 800232e:	69da      	ldr	r2, [r3, #28]
 8002330:	2380      	movs	r3, #128	@ 0x80
 8002332:	055b      	lsls	r3, r3, #21
 8002334:	4013      	ands	r3, r2
 8002336:	60fb      	str	r3, [r7, #12]
 8002338:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800233a:	183b      	adds	r3, r7, r0
 800233c:	2201      	movs	r2, #1
 800233e:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002340:	4b18      	ldr	r3, [pc, #96]	@ (80023a4 <HAL_RCC_OscConfig+0x338>)
 8002342:	681a      	ldr	r2, [r3, #0]
 8002344:	2380      	movs	r3, #128	@ 0x80
 8002346:	005b      	lsls	r3, r3, #1
 8002348:	4013      	ands	r3, r2
 800234a:	d11a      	bne.n	8002382 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800234c:	4b15      	ldr	r3, [pc, #84]	@ (80023a4 <HAL_RCC_OscConfig+0x338>)
 800234e:	681a      	ldr	r2, [r3, #0]
 8002350:	4b14      	ldr	r3, [pc, #80]	@ (80023a4 <HAL_RCC_OscConfig+0x338>)
 8002352:	2180      	movs	r1, #128	@ 0x80
 8002354:	0049      	lsls	r1, r1, #1
 8002356:	430a      	orrs	r2, r1
 8002358:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800235a:	f7fe ff33 	bl	80011c4 <HAL_GetTick>
 800235e:	0003      	movs	r3, r0
 8002360:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002362:	e008      	b.n	8002376 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002364:	f7fe ff2e 	bl	80011c4 <HAL_GetTick>
 8002368:	0002      	movs	r2, r0
 800236a:	69bb      	ldr	r3, [r7, #24]
 800236c:	1ad3      	subs	r3, r2, r3
 800236e:	2b64      	cmp	r3, #100	@ 0x64
 8002370:	d901      	bls.n	8002376 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8002372:	2303      	movs	r3, #3
 8002374:	e185      	b.n	8002682 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002376:	4b0b      	ldr	r3, [pc, #44]	@ (80023a4 <HAL_RCC_OscConfig+0x338>)
 8002378:	681a      	ldr	r2, [r3, #0]
 800237a:	2380      	movs	r3, #128	@ 0x80
 800237c:	005b      	lsls	r3, r3, #1
 800237e:	4013      	ands	r3, r2
 8002380:	d0f0      	beq.n	8002364 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	689b      	ldr	r3, [r3, #8]
 8002386:	2b01      	cmp	r3, #1
 8002388:	d10e      	bne.n	80023a8 <HAL_RCC_OscConfig+0x33c>
 800238a:	4b03      	ldr	r3, [pc, #12]	@ (8002398 <HAL_RCC_OscConfig+0x32c>)
 800238c:	6a1a      	ldr	r2, [r3, #32]
 800238e:	4b02      	ldr	r3, [pc, #8]	@ (8002398 <HAL_RCC_OscConfig+0x32c>)
 8002390:	2101      	movs	r1, #1
 8002392:	430a      	orrs	r2, r1
 8002394:	621a      	str	r2, [r3, #32]
 8002396:	e035      	b.n	8002404 <HAL_RCC_OscConfig+0x398>
 8002398:	40021000 	.word	0x40021000
 800239c:	fffeffff 	.word	0xfffeffff
 80023a0:	fffbffff 	.word	0xfffbffff
 80023a4:	40007000 	.word	0x40007000
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	689b      	ldr	r3, [r3, #8]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d10c      	bne.n	80023ca <HAL_RCC_OscConfig+0x35e>
 80023b0:	4bb6      	ldr	r3, [pc, #728]	@ (800268c <HAL_RCC_OscConfig+0x620>)
 80023b2:	6a1a      	ldr	r2, [r3, #32]
 80023b4:	4bb5      	ldr	r3, [pc, #724]	@ (800268c <HAL_RCC_OscConfig+0x620>)
 80023b6:	2101      	movs	r1, #1
 80023b8:	438a      	bics	r2, r1
 80023ba:	621a      	str	r2, [r3, #32]
 80023bc:	4bb3      	ldr	r3, [pc, #716]	@ (800268c <HAL_RCC_OscConfig+0x620>)
 80023be:	6a1a      	ldr	r2, [r3, #32]
 80023c0:	4bb2      	ldr	r3, [pc, #712]	@ (800268c <HAL_RCC_OscConfig+0x620>)
 80023c2:	2104      	movs	r1, #4
 80023c4:	438a      	bics	r2, r1
 80023c6:	621a      	str	r2, [r3, #32]
 80023c8:	e01c      	b.n	8002404 <HAL_RCC_OscConfig+0x398>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	689b      	ldr	r3, [r3, #8]
 80023ce:	2b05      	cmp	r3, #5
 80023d0:	d10c      	bne.n	80023ec <HAL_RCC_OscConfig+0x380>
 80023d2:	4bae      	ldr	r3, [pc, #696]	@ (800268c <HAL_RCC_OscConfig+0x620>)
 80023d4:	6a1a      	ldr	r2, [r3, #32]
 80023d6:	4bad      	ldr	r3, [pc, #692]	@ (800268c <HAL_RCC_OscConfig+0x620>)
 80023d8:	2104      	movs	r1, #4
 80023da:	430a      	orrs	r2, r1
 80023dc:	621a      	str	r2, [r3, #32]
 80023de:	4bab      	ldr	r3, [pc, #684]	@ (800268c <HAL_RCC_OscConfig+0x620>)
 80023e0:	6a1a      	ldr	r2, [r3, #32]
 80023e2:	4baa      	ldr	r3, [pc, #680]	@ (800268c <HAL_RCC_OscConfig+0x620>)
 80023e4:	2101      	movs	r1, #1
 80023e6:	430a      	orrs	r2, r1
 80023e8:	621a      	str	r2, [r3, #32]
 80023ea:	e00b      	b.n	8002404 <HAL_RCC_OscConfig+0x398>
 80023ec:	4ba7      	ldr	r3, [pc, #668]	@ (800268c <HAL_RCC_OscConfig+0x620>)
 80023ee:	6a1a      	ldr	r2, [r3, #32]
 80023f0:	4ba6      	ldr	r3, [pc, #664]	@ (800268c <HAL_RCC_OscConfig+0x620>)
 80023f2:	2101      	movs	r1, #1
 80023f4:	438a      	bics	r2, r1
 80023f6:	621a      	str	r2, [r3, #32]
 80023f8:	4ba4      	ldr	r3, [pc, #656]	@ (800268c <HAL_RCC_OscConfig+0x620>)
 80023fa:	6a1a      	ldr	r2, [r3, #32]
 80023fc:	4ba3      	ldr	r3, [pc, #652]	@ (800268c <HAL_RCC_OscConfig+0x620>)
 80023fe:	2104      	movs	r1, #4
 8002400:	438a      	bics	r2, r1
 8002402:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	689b      	ldr	r3, [r3, #8]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d014      	beq.n	8002436 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800240c:	f7fe feda 	bl	80011c4 <HAL_GetTick>
 8002410:	0003      	movs	r3, r0
 8002412:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002414:	e009      	b.n	800242a <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002416:	f7fe fed5 	bl	80011c4 <HAL_GetTick>
 800241a:	0002      	movs	r2, r0
 800241c:	69bb      	ldr	r3, [r7, #24]
 800241e:	1ad3      	subs	r3, r2, r3
 8002420:	4a9b      	ldr	r2, [pc, #620]	@ (8002690 <HAL_RCC_OscConfig+0x624>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d901      	bls.n	800242a <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8002426:	2303      	movs	r3, #3
 8002428:	e12b      	b.n	8002682 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800242a:	4b98      	ldr	r3, [pc, #608]	@ (800268c <HAL_RCC_OscConfig+0x620>)
 800242c:	6a1b      	ldr	r3, [r3, #32]
 800242e:	2202      	movs	r2, #2
 8002430:	4013      	ands	r3, r2
 8002432:	d0f0      	beq.n	8002416 <HAL_RCC_OscConfig+0x3aa>
 8002434:	e013      	b.n	800245e <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002436:	f7fe fec5 	bl	80011c4 <HAL_GetTick>
 800243a:	0003      	movs	r3, r0
 800243c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800243e:	e009      	b.n	8002454 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002440:	f7fe fec0 	bl	80011c4 <HAL_GetTick>
 8002444:	0002      	movs	r2, r0
 8002446:	69bb      	ldr	r3, [r7, #24]
 8002448:	1ad3      	subs	r3, r2, r3
 800244a:	4a91      	ldr	r2, [pc, #580]	@ (8002690 <HAL_RCC_OscConfig+0x624>)
 800244c:	4293      	cmp	r3, r2
 800244e:	d901      	bls.n	8002454 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8002450:	2303      	movs	r3, #3
 8002452:	e116      	b.n	8002682 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002454:	4b8d      	ldr	r3, [pc, #564]	@ (800268c <HAL_RCC_OscConfig+0x620>)
 8002456:	6a1b      	ldr	r3, [r3, #32]
 8002458:	2202      	movs	r2, #2
 800245a:	4013      	ands	r3, r2
 800245c:	d1f0      	bne.n	8002440 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800245e:	231f      	movs	r3, #31
 8002460:	18fb      	adds	r3, r7, r3
 8002462:	781b      	ldrb	r3, [r3, #0]
 8002464:	2b01      	cmp	r3, #1
 8002466:	d105      	bne.n	8002474 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002468:	4b88      	ldr	r3, [pc, #544]	@ (800268c <HAL_RCC_OscConfig+0x620>)
 800246a:	69da      	ldr	r2, [r3, #28]
 800246c:	4b87      	ldr	r3, [pc, #540]	@ (800268c <HAL_RCC_OscConfig+0x620>)
 800246e:	4989      	ldr	r1, [pc, #548]	@ (8002694 <HAL_RCC_OscConfig+0x628>)
 8002470:	400a      	ands	r2, r1
 8002472:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	2210      	movs	r2, #16
 800247a:	4013      	ands	r3, r2
 800247c:	d063      	beq.n	8002546 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	695b      	ldr	r3, [r3, #20]
 8002482:	2b01      	cmp	r3, #1
 8002484:	d12a      	bne.n	80024dc <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002486:	4b81      	ldr	r3, [pc, #516]	@ (800268c <HAL_RCC_OscConfig+0x620>)
 8002488:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800248a:	4b80      	ldr	r3, [pc, #512]	@ (800268c <HAL_RCC_OscConfig+0x620>)
 800248c:	2104      	movs	r1, #4
 800248e:	430a      	orrs	r2, r1
 8002490:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8002492:	4b7e      	ldr	r3, [pc, #504]	@ (800268c <HAL_RCC_OscConfig+0x620>)
 8002494:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002496:	4b7d      	ldr	r3, [pc, #500]	@ (800268c <HAL_RCC_OscConfig+0x620>)
 8002498:	2101      	movs	r1, #1
 800249a:	430a      	orrs	r2, r1
 800249c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800249e:	f7fe fe91 	bl	80011c4 <HAL_GetTick>
 80024a2:	0003      	movs	r3, r0
 80024a4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80024a6:	e008      	b.n	80024ba <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80024a8:	f7fe fe8c 	bl	80011c4 <HAL_GetTick>
 80024ac:	0002      	movs	r2, r0
 80024ae:	69bb      	ldr	r3, [r7, #24]
 80024b0:	1ad3      	subs	r3, r2, r3
 80024b2:	2b02      	cmp	r3, #2
 80024b4:	d901      	bls.n	80024ba <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 80024b6:	2303      	movs	r3, #3
 80024b8:	e0e3      	b.n	8002682 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80024ba:	4b74      	ldr	r3, [pc, #464]	@ (800268c <HAL_RCC_OscConfig+0x620>)
 80024bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80024be:	2202      	movs	r2, #2
 80024c0:	4013      	ands	r3, r2
 80024c2:	d0f1      	beq.n	80024a8 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80024c4:	4b71      	ldr	r3, [pc, #452]	@ (800268c <HAL_RCC_OscConfig+0x620>)
 80024c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80024c8:	22f8      	movs	r2, #248	@ 0xf8
 80024ca:	4393      	bics	r3, r2
 80024cc:	0019      	movs	r1, r3
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	699b      	ldr	r3, [r3, #24]
 80024d2:	00da      	lsls	r2, r3, #3
 80024d4:	4b6d      	ldr	r3, [pc, #436]	@ (800268c <HAL_RCC_OscConfig+0x620>)
 80024d6:	430a      	orrs	r2, r1
 80024d8:	635a      	str	r2, [r3, #52]	@ 0x34
 80024da:	e034      	b.n	8002546 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	695b      	ldr	r3, [r3, #20]
 80024e0:	3305      	adds	r3, #5
 80024e2:	d111      	bne.n	8002508 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80024e4:	4b69      	ldr	r3, [pc, #420]	@ (800268c <HAL_RCC_OscConfig+0x620>)
 80024e6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80024e8:	4b68      	ldr	r3, [pc, #416]	@ (800268c <HAL_RCC_OscConfig+0x620>)
 80024ea:	2104      	movs	r1, #4
 80024ec:	438a      	bics	r2, r1
 80024ee:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80024f0:	4b66      	ldr	r3, [pc, #408]	@ (800268c <HAL_RCC_OscConfig+0x620>)
 80024f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80024f4:	22f8      	movs	r2, #248	@ 0xf8
 80024f6:	4393      	bics	r3, r2
 80024f8:	0019      	movs	r1, r3
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	699b      	ldr	r3, [r3, #24]
 80024fe:	00da      	lsls	r2, r3, #3
 8002500:	4b62      	ldr	r3, [pc, #392]	@ (800268c <HAL_RCC_OscConfig+0x620>)
 8002502:	430a      	orrs	r2, r1
 8002504:	635a      	str	r2, [r3, #52]	@ 0x34
 8002506:	e01e      	b.n	8002546 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002508:	4b60      	ldr	r3, [pc, #384]	@ (800268c <HAL_RCC_OscConfig+0x620>)
 800250a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800250c:	4b5f      	ldr	r3, [pc, #380]	@ (800268c <HAL_RCC_OscConfig+0x620>)
 800250e:	2104      	movs	r1, #4
 8002510:	430a      	orrs	r2, r1
 8002512:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8002514:	4b5d      	ldr	r3, [pc, #372]	@ (800268c <HAL_RCC_OscConfig+0x620>)
 8002516:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002518:	4b5c      	ldr	r3, [pc, #368]	@ (800268c <HAL_RCC_OscConfig+0x620>)
 800251a:	2101      	movs	r1, #1
 800251c:	438a      	bics	r2, r1
 800251e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002520:	f7fe fe50 	bl	80011c4 <HAL_GetTick>
 8002524:	0003      	movs	r3, r0
 8002526:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002528:	e008      	b.n	800253c <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800252a:	f7fe fe4b 	bl	80011c4 <HAL_GetTick>
 800252e:	0002      	movs	r2, r0
 8002530:	69bb      	ldr	r3, [r7, #24]
 8002532:	1ad3      	subs	r3, r2, r3
 8002534:	2b02      	cmp	r3, #2
 8002536:	d901      	bls.n	800253c <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8002538:	2303      	movs	r3, #3
 800253a:	e0a2      	b.n	8002682 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800253c:	4b53      	ldr	r3, [pc, #332]	@ (800268c <HAL_RCC_OscConfig+0x620>)
 800253e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002540:	2202      	movs	r2, #2
 8002542:	4013      	ands	r3, r2
 8002544:	d1f1      	bne.n	800252a <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6a1b      	ldr	r3, [r3, #32]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d100      	bne.n	8002550 <HAL_RCC_OscConfig+0x4e4>
 800254e:	e097      	b.n	8002680 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002550:	4b4e      	ldr	r3, [pc, #312]	@ (800268c <HAL_RCC_OscConfig+0x620>)
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	220c      	movs	r2, #12
 8002556:	4013      	ands	r3, r2
 8002558:	2b08      	cmp	r3, #8
 800255a:	d100      	bne.n	800255e <HAL_RCC_OscConfig+0x4f2>
 800255c:	e06b      	b.n	8002636 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6a1b      	ldr	r3, [r3, #32]
 8002562:	2b02      	cmp	r3, #2
 8002564:	d14c      	bne.n	8002600 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002566:	4b49      	ldr	r3, [pc, #292]	@ (800268c <HAL_RCC_OscConfig+0x620>)
 8002568:	681a      	ldr	r2, [r3, #0]
 800256a:	4b48      	ldr	r3, [pc, #288]	@ (800268c <HAL_RCC_OscConfig+0x620>)
 800256c:	494a      	ldr	r1, [pc, #296]	@ (8002698 <HAL_RCC_OscConfig+0x62c>)
 800256e:	400a      	ands	r2, r1
 8002570:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002572:	f7fe fe27 	bl	80011c4 <HAL_GetTick>
 8002576:	0003      	movs	r3, r0
 8002578:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800257a:	e008      	b.n	800258e <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800257c:	f7fe fe22 	bl	80011c4 <HAL_GetTick>
 8002580:	0002      	movs	r2, r0
 8002582:	69bb      	ldr	r3, [r7, #24]
 8002584:	1ad3      	subs	r3, r2, r3
 8002586:	2b02      	cmp	r3, #2
 8002588:	d901      	bls.n	800258e <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 800258a:	2303      	movs	r3, #3
 800258c:	e079      	b.n	8002682 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800258e:	4b3f      	ldr	r3, [pc, #252]	@ (800268c <HAL_RCC_OscConfig+0x620>)
 8002590:	681a      	ldr	r2, [r3, #0]
 8002592:	2380      	movs	r3, #128	@ 0x80
 8002594:	049b      	lsls	r3, r3, #18
 8002596:	4013      	ands	r3, r2
 8002598:	d1f0      	bne.n	800257c <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800259a:	4b3c      	ldr	r3, [pc, #240]	@ (800268c <HAL_RCC_OscConfig+0x620>)
 800259c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800259e:	220f      	movs	r2, #15
 80025a0:	4393      	bics	r3, r2
 80025a2:	0019      	movs	r1, r3
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80025a8:	4b38      	ldr	r3, [pc, #224]	@ (800268c <HAL_RCC_OscConfig+0x620>)
 80025aa:	430a      	orrs	r2, r1
 80025ac:	62da      	str	r2, [r3, #44]	@ 0x2c
 80025ae:	4b37      	ldr	r3, [pc, #220]	@ (800268c <HAL_RCC_OscConfig+0x620>)
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	4a3a      	ldr	r2, [pc, #232]	@ (800269c <HAL_RCC_OscConfig+0x630>)
 80025b4:	4013      	ands	r3, r2
 80025b6:	0019      	movs	r1, r3
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025c0:	431a      	orrs	r2, r3
 80025c2:	4b32      	ldr	r3, [pc, #200]	@ (800268c <HAL_RCC_OscConfig+0x620>)
 80025c4:	430a      	orrs	r2, r1
 80025c6:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80025c8:	4b30      	ldr	r3, [pc, #192]	@ (800268c <HAL_RCC_OscConfig+0x620>)
 80025ca:	681a      	ldr	r2, [r3, #0]
 80025cc:	4b2f      	ldr	r3, [pc, #188]	@ (800268c <HAL_RCC_OscConfig+0x620>)
 80025ce:	2180      	movs	r1, #128	@ 0x80
 80025d0:	0449      	lsls	r1, r1, #17
 80025d2:	430a      	orrs	r2, r1
 80025d4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025d6:	f7fe fdf5 	bl	80011c4 <HAL_GetTick>
 80025da:	0003      	movs	r3, r0
 80025dc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80025de:	e008      	b.n	80025f2 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025e0:	f7fe fdf0 	bl	80011c4 <HAL_GetTick>
 80025e4:	0002      	movs	r2, r0
 80025e6:	69bb      	ldr	r3, [r7, #24]
 80025e8:	1ad3      	subs	r3, r2, r3
 80025ea:	2b02      	cmp	r3, #2
 80025ec:	d901      	bls.n	80025f2 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80025ee:	2303      	movs	r3, #3
 80025f0:	e047      	b.n	8002682 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80025f2:	4b26      	ldr	r3, [pc, #152]	@ (800268c <HAL_RCC_OscConfig+0x620>)
 80025f4:	681a      	ldr	r2, [r3, #0]
 80025f6:	2380      	movs	r3, #128	@ 0x80
 80025f8:	049b      	lsls	r3, r3, #18
 80025fa:	4013      	ands	r3, r2
 80025fc:	d0f0      	beq.n	80025e0 <HAL_RCC_OscConfig+0x574>
 80025fe:	e03f      	b.n	8002680 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002600:	4b22      	ldr	r3, [pc, #136]	@ (800268c <HAL_RCC_OscConfig+0x620>)
 8002602:	681a      	ldr	r2, [r3, #0]
 8002604:	4b21      	ldr	r3, [pc, #132]	@ (800268c <HAL_RCC_OscConfig+0x620>)
 8002606:	4924      	ldr	r1, [pc, #144]	@ (8002698 <HAL_RCC_OscConfig+0x62c>)
 8002608:	400a      	ands	r2, r1
 800260a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800260c:	f7fe fdda 	bl	80011c4 <HAL_GetTick>
 8002610:	0003      	movs	r3, r0
 8002612:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002614:	e008      	b.n	8002628 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002616:	f7fe fdd5 	bl	80011c4 <HAL_GetTick>
 800261a:	0002      	movs	r2, r0
 800261c:	69bb      	ldr	r3, [r7, #24]
 800261e:	1ad3      	subs	r3, r2, r3
 8002620:	2b02      	cmp	r3, #2
 8002622:	d901      	bls.n	8002628 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8002624:	2303      	movs	r3, #3
 8002626:	e02c      	b.n	8002682 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002628:	4b18      	ldr	r3, [pc, #96]	@ (800268c <HAL_RCC_OscConfig+0x620>)
 800262a:	681a      	ldr	r2, [r3, #0]
 800262c:	2380      	movs	r3, #128	@ 0x80
 800262e:	049b      	lsls	r3, r3, #18
 8002630:	4013      	ands	r3, r2
 8002632:	d1f0      	bne.n	8002616 <HAL_RCC_OscConfig+0x5aa>
 8002634:	e024      	b.n	8002680 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6a1b      	ldr	r3, [r3, #32]
 800263a:	2b01      	cmp	r3, #1
 800263c:	d101      	bne.n	8002642 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 800263e:	2301      	movs	r3, #1
 8002640:	e01f      	b.n	8002682 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8002642:	4b12      	ldr	r3, [pc, #72]	@ (800268c <HAL_RCC_OscConfig+0x620>)
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8002648:	4b10      	ldr	r3, [pc, #64]	@ (800268c <HAL_RCC_OscConfig+0x620>)
 800264a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800264c:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800264e:	697a      	ldr	r2, [r7, #20]
 8002650:	2380      	movs	r3, #128	@ 0x80
 8002652:	025b      	lsls	r3, r3, #9
 8002654:	401a      	ands	r2, r3
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800265a:	429a      	cmp	r2, r3
 800265c:	d10e      	bne.n	800267c <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800265e:	693b      	ldr	r3, [r7, #16]
 8002660:	220f      	movs	r2, #15
 8002662:	401a      	ands	r2, r3
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002668:	429a      	cmp	r2, r3
 800266a:	d107      	bne.n	800267c <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 800266c:	697a      	ldr	r2, [r7, #20]
 800266e:	23f0      	movs	r3, #240	@ 0xf0
 8002670:	039b      	lsls	r3, r3, #14
 8002672:	401a      	ands	r2, r3
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002678:	429a      	cmp	r2, r3
 800267a:	d001      	beq.n	8002680 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 800267c:	2301      	movs	r3, #1
 800267e:	e000      	b.n	8002682 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8002680:	2300      	movs	r3, #0
}
 8002682:	0018      	movs	r0, r3
 8002684:	46bd      	mov	sp, r7
 8002686:	b008      	add	sp, #32
 8002688:	bd80      	pop	{r7, pc}
 800268a:	46c0      	nop			@ (mov r8, r8)
 800268c:	40021000 	.word	0x40021000
 8002690:	00001388 	.word	0x00001388
 8002694:	efffffff 	.word	0xefffffff
 8002698:	feffffff 	.word	0xfeffffff
 800269c:	ffc2ffff 	.word	0xffc2ffff

080026a0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b084      	sub	sp, #16
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
 80026a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d101      	bne.n	80026b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80026b0:	2301      	movs	r3, #1
 80026b2:	e0b3      	b.n	800281c <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80026b4:	4b5b      	ldr	r3, [pc, #364]	@ (8002824 <HAL_RCC_ClockConfig+0x184>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	2201      	movs	r2, #1
 80026ba:	4013      	ands	r3, r2
 80026bc:	683a      	ldr	r2, [r7, #0]
 80026be:	429a      	cmp	r2, r3
 80026c0:	d911      	bls.n	80026e6 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026c2:	4b58      	ldr	r3, [pc, #352]	@ (8002824 <HAL_RCC_ClockConfig+0x184>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	2201      	movs	r2, #1
 80026c8:	4393      	bics	r3, r2
 80026ca:	0019      	movs	r1, r3
 80026cc:	4b55      	ldr	r3, [pc, #340]	@ (8002824 <HAL_RCC_ClockConfig+0x184>)
 80026ce:	683a      	ldr	r2, [r7, #0]
 80026d0:	430a      	orrs	r2, r1
 80026d2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026d4:	4b53      	ldr	r3, [pc, #332]	@ (8002824 <HAL_RCC_ClockConfig+0x184>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	2201      	movs	r2, #1
 80026da:	4013      	ands	r3, r2
 80026dc:	683a      	ldr	r2, [r7, #0]
 80026de:	429a      	cmp	r2, r3
 80026e0:	d001      	beq.n	80026e6 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80026e2:	2301      	movs	r3, #1
 80026e4:	e09a      	b.n	800281c <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	2202      	movs	r2, #2
 80026ec:	4013      	ands	r3, r2
 80026ee:	d015      	beq.n	800271c <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	2204      	movs	r2, #4
 80026f6:	4013      	ands	r3, r2
 80026f8:	d006      	beq.n	8002708 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80026fa:	4b4b      	ldr	r3, [pc, #300]	@ (8002828 <HAL_RCC_ClockConfig+0x188>)
 80026fc:	685a      	ldr	r2, [r3, #4]
 80026fe:	4b4a      	ldr	r3, [pc, #296]	@ (8002828 <HAL_RCC_ClockConfig+0x188>)
 8002700:	21e0      	movs	r1, #224	@ 0xe0
 8002702:	00c9      	lsls	r1, r1, #3
 8002704:	430a      	orrs	r2, r1
 8002706:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002708:	4b47      	ldr	r3, [pc, #284]	@ (8002828 <HAL_RCC_ClockConfig+0x188>)
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	22f0      	movs	r2, #240	@ 0xf0
 800270e:	4393      	bics	r3, r2
 8002710:	0019      	movs	r1, r3
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	689a      	ldr	r2, [r3, #8]
 8002716:	4b44      	ldr	r3, [pc, #272]	@ (8002828 <HAL_RCC_ClockConfig+0x188>)
 8002718:	430a      	orrs	r2, r1
 800271a:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	2201      	movs	r2, #1
 8002722:	4013      	ands	r3, r2
 8002724:	d040      	beq.n	80027a8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	2b01      	cmp	r3, #1
 800272c:	d107      	bne.n	800273e <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800272e:	4b3e      	ldr	r3, [pc, #248]	@ (8002828 <HAL_RCC_ClockConfig+0x188>)
 8002730:	681a      	ldr	r2, [r3, #0]
 8002732:	2380      	movs	r3, #128	@ 0x80
 8002734:	029b      	lsls	r3, r3, #10
 8002736:	4013      	ands	r3, r2
 8002738:	d114      	bne.n	8002764 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800273a:	2301      	movs	r3, #1
 800273c:	e06e      	b.n	800281c <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	2b02      	cmp	r3, #2
 8002744:	d107      	bne.n	8002756 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002746:	4b38      	ldr	r3, [pc, #224]	@ (8002828 <HAL_RCC_ClockConfig+0x188>)
 8002748:	681a      	ldr	r2, [r3, #0]
 800274a:	2380      	movs	r3, #128	@ 0x80
 800274c:	049b      	lsls	r3, r3, #18
 800274e:	4013      	ands	r3, r2
 8002750:	d108      	bne.n	8002764 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002752:	2301      	movs	r3, #1
 8002754:	e062      	b.n	800281c <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002756:	4b34      	ldr	r3, [pc, #208]	@ (8002828 <HAL_RCC_ClockConfig+0x188>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	2202      	movs	r2, #2
 800275c:	4013      	ands	r3, r2
 800275e:	d101      	bne.n	8002764 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002760:	2301      	movs	r3, #1
 8002762:	e05b      	b.n	800281c <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002764:	4b30      	ldr	r3, [pc, #192]	@ (8002828 <HAL_RCC_ClockConfig+0x188>)
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	2203      	movs	r2, #3
 800276a:	4393      	bics	r3, r2
 800276c:	0019      	movs	r1, r3
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	685a      	ldr	r2, [r3, #4]
 8002772:	4b2d      	ldr	r3, [pc, #180]	@ (8002828 <HAL_RCC_ClockConfig+0x188>)
 8002774:	430a      	orrs	r2, r1
 8002776:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002778:	f7fe fd24 	bl	80011c4 <HAL_GetTick>
 800277c:	0003      	movs	r3, r0
 800277e:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002780:	e009      	b.n	8002796 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002782:	f7fe fd1f 	bl	80011c4 <HAL_GetTick>
 8002786:	0002      	movs	r2, r0
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	1ad3      	subs	r3, r2, r3
 800278c:	4a27      	ldr	r2, [pc, #156]	@ (800282c <HAL_RCC_ClockConfig+0x18c>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d901      	bls.n	8002796 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8002792:	2303      	movs	r3, #3
 8002794:	e042      	b.n	800281c <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002796:	4b24      	ldr	r3, [pc, #144]	@ (8002828 <HAL_RCC_ClockConfig+0x188>)
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	220c      	movs	r2, #12
 800279c:	401a      	ands	r2, r3
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	009b      	lsls	r3, r3, #2
 80027a4:	429a      	cmp	r2, r3
 80027a6:	d1ec      	bne.n	8002782 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80027a8:	4b1e      	ldr	r3, [pc, #120]	@ (8002824 <HAL_RCC_ClockConfig+0x184>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	2201      	movs	r2, #1
 80027ae:	4013      	ands	r3, r2
 80027b0:	683a      	ldr	r2, [r7, #0]
 80027b2:	429a      	cmp	r2, r3
 80027b4:	d211      	bcs.n	80027da <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027b6:	4b1b      	ldr	r3, [pc, #108]	@ (8002824 <HAL_RCC_ClockConfig+0x184>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	2201      	movs	r2, #1
 80027bc:	4393      	bics	r3, r2
 80027be:	0019      	movs	r1, r3
 80027c0:	4b18      	ldr	r3, [pc, #96]	@ (8002824 <HAL_RCC_ClockConfig+0x184>)
 80027c2:	683a      	ldr	r2, [r7, #0]
 80027c4:	430a      	orrs	r2, r1
 80027c6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027c8:	4b16      	ldr	r3, [pc, #88]	@ (8002824 <HAL_RCC_ClockConfig+0x184>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	2201      	movs	r2, #1
 80027ce:	4013      	ands	r3, r2
 80027d0:	683a      	ldr	r2, [r7, #0]
 80027d2:	429a      	cmp	r2, r3
 80027d4:	d001      	beq.n	80027da <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 80027d6:	2301      	movs	r3, #1
 80027d8:	e020      	b.n	800281c <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	2204      	movs	r2, #4
 80027e0:	4013      	ands	r3, r2
 80027e2:	d009      	beq.n	80027f8 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80027e4:	4b10      	ldr	r3, [pc, #64]	@ (8002828 <HAL_RCC_ClockConfig+0x188>)
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	4a11      	ldr	r2, [pc, #68]	@ (8002830 <HAL_RCC_ClockConfig+0x190>)
 80027ea:	4013      	ands	r3, r2
 80027ec:	0019      	movs	r1, r3
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	68da      	ldr	r2, [r3, #12]
 80027f2:	4b0d      	ldr	r3, [pc, #52]	@ (8002828 <HAL_RCC_ClockConfig+0x188>)
 80027f4:	430a      	orrs	r2, r1
 80027f6:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80027f8:	f000 f820 	bl	800283c <HAL_RCC_GetSysClockFreq>
 80027fc:	0001      	movs	r1, r0
 80027fe:	4b0a      	ldr	r3, [pc, #40]	@ (8002828 <HAL_RCC_ClockConfig+0x188>)
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	091b      	lsrs	r3, r3, #4
 8002804:	220f      	movs	r2, #15
 8002806:	4013      	ands	r3, r2
 8002808:	4a0a      	ldr	r2, [pc, #40]	@ (8002834 <HAL_RCC_ClockConfig+0x194>)
 800280a:	5cd3      	ldrb	r3, [r2, r3]
 800280c:	000a      	movs	r2, r1
 800280e:	40da      	lsrs	r2, r3
 8002810:	4b09      	ldr	r3, [pc, #36]	@ (8002838 <HAL_RCC_ClockConfig+0x198>)
 8002812:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002814:	2003      	movs	r0, #3
 8002816:	f7fe fc8f 	bl	8001138 <HAL_InitTick>
  
  return HAL_OK;
 800281a:	2300      	movs	r3, #0
}
 800281c:	0018      	movs	r0, r3
 800281e:	46bd      	mov	sp, r7
 8002820:	b004      	add	sp, #16
 8002822:	bd80      	pop	{r7, pc}
 8002824:	40022000 	.word	0x40022000
 8002828:	40021000 	.word	0x40021000
 800282c:	00001388 	.word	0x00001388
 8002830:	fffff8ff 	.word	0xfffff8ff
 8002834:	08003b70 	.word	0x08003b70
 8002838:	20000010 	.word	0x20000010

0800283c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b086      	sub	sp, #24
 8002840:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002842:	2300      	movs	r3, #0
 8002844:	60fb      	str	r3, [r7, #12]
 8002846:	2300      	movs	r3, #0
 8002848:	60bb      	str	r3, [r7, #8]
 800284a:	2300      	movs	r3, #0
 800284c:	617b      	str	r3, [r7, #20]
 800284e:	2300      	movs	r3, #0
 8002850:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002852:	2300      	movs	r3, #0
 8002854:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8002856:	4b20      	ldr	r3, [pc, #128]	@ (80028d8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	220c      	movs	r2, #12
 8002860:	4013      	ands	r3, r2
 8002862:	2b04      	cmp	r3, #4
 8002864:	d002      	beq.n	800286c <HAL_RCC_GetSysClockFreq+0x30>
 8002866:	2b08      	cmp	r3, #8
 8002868:	d003      	beq.n	8002872 <HAL_RCC_GetSysClockFreq+0x36>
 800286a:	e02c      	b.n	80028c6 <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800286c:	4b1b      	ldr	r3, [pc, #108]	@ (80028dc <HAL_RCC_GetSysClockFreq+0xa0>)
 800286e:	613b      	str	r3, [r7, #16]
      break;
 8002870:	e02c      	b.n	80028cc <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	0c9b      	lsrs	r3, r3, #18
 8002876:	220f      	movs	r2, #15
 8002878:	4013      	ands	r3, r2
 800287a:	4a19      	ldr	r2, [pc, #100]	@ (80028e0 <HAL_RCC_GetSysClockFreq+0xa4>)
 800287c:	5cd3      	ldrb	r3, [r2, r3]
 800287e:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002880:	4b15      	ldr	r3, [pc, #84]	@ (80028d8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002882:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002884:	220f      	movs	r2, #15
 8002886:	4013      	ands	r3, r2
 8002888:	4a16      	ldr	r2, [pc, #88]	@ (80028e4 <HAL_RCC_GetSysClockFreq+0xa8>)
 800288a:	5cd3      	ldrb	r3, [r2, r3]
 800288c:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800288e:	68fa      	ldr	r2, [r7, #12]
 8002890:	2380      	movs	r3, #128	@ 0x80
 8002892:	025b      	lsls	r3, r3, #9
 8002894:	4013      	ands	r3, r2
 8002896:	d009      	beq.n	80028ac <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002898:	68b9      	ldr	r1, [r7, #8]
 800289a:	4810      	ldr	r0, [pc, #64]	@ (80028dc <HAL_RCC_GetSysClockFreq+0xa0>)
 800289c:	f7fd fc3e 	bl	800011c <__udivsi3>
 80028a0:	0003      	movs	r3, r0
 80028a2:	001a      	movs	r2, r3
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	4353      	muls	r3, r2
 80028a8:	617b      	str	r3, [r7, #20]
 80028aa:	e009      	b.n	80028c0 <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80028ac:	6879      	ldr	r1, [r7, #4]
 80028ae:	000a      	movs	r2, r1
 80028b0:	0152      	lsls	r2, r2, #5
 80028b2:	1a52      	subs	r2, r2, r1
 80028b4:	0193      	lsls	r3, r2, #6
 80028b6:	1a9b      	subs	r3, r3, r2
 80028b8:	00db      	lsls	r3, r3, #3
 80028ba:	185b      	adds	r3, r3, r1
 80028bc:	021b      	lsls	r3, r3, #8
 80028be:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 80028c0:	697b      	ldr	r3, [r7, #20]
 80028c2:	613b      	str	r3, [r7, #16]
      break;
 80028c4:	e002      	b.n	80028cc <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80028c6:	4b05      	ldr	r3, [pc, #20]	@ (80028dc <HAL_RCC_GetSysClockFreq+0xa0>)
 80028c8:	613b      	str	r3, [r7, #16]
      break;
 80028ca:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 80028cc:	693b      	ldr	r3, [r7, #16]
}
 80028ce:	0018      	movs	r0, r3
 80028d0:	46bd      	mov	sp, r7
 80028d2:	b006      	add	sp, #24
 80028d4:	bd80      	pop	{r7, pc}
 80028d6:	46c0      	nop			@ (mov r8, r8)
 80028d8:	40021000 	.word	0x40021000
 80028dc:	007a1200 	.word	0x007a1200
 80028e0:	08003b80 	.word	0x08003b80
 80028e4:	08003b90 	.word	0x08003b90

080028e8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b086      	sub	sp, #24
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80028f0:	2300      	movs	r3, #0
 80028f2:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 80028f4:	2300      	movs	r3, #0
 80028f6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681a      	ldr	r2, [r3, #0]
 80028fc:	2380      	movs	r3, #128	@ 0x80
 80028fe:	025b      	lsls	r3, r3, #9
 8002900:	4013      	ands	r3, r2
 8002902:	d100      	bne.n	8002906 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8002904:	e08e      	b.n	8002a24 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8002906:	2017      	movs	r0, #23
 8002908:	183b      	adds	r3, r7, r0
 800290a:	2200      	movs	r2, #0
 800290c:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800290e:	4b57      	ldr	r3, [pc, #348]	@ (8002a6c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002910:	69da      	ldr	r2, [r3, #28]
 8002912:	2380      	movs	r3, #128	@ 0x80
 8002914:	055b      	lsls	r3, r3, #21
 8002916:	4013      	ands	r3, r2
 8002918:	d110      	bne.n	800293c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 800291a:	4b54      	ldr	r3, [pc, #336]	@ (8002a6c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800291c:	69da      	ldr	r2, [r3, #28]
 800291e:	4b53      	ldr	r3, [pc, #332]	@ (8002a6c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002920:	2180      	movs	r1, #128	@ 0x80
 8002922:	0549      	lsls	r1, r1, #21
 8002924:	430a      	orrs	r2, r1
 8002926:	61da      	str	r2, [r3, #28]
 8002928:	4b50      	ldr	r3, [pc, #320]	@ (8002a6c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800292a:	69da      	ldr	r2, [r3, #28]
 800292c:	2380      	movs	r3, #128	@ 0x80
 800292e:	055b      	lsls	r3, r3, #21
 8002930:	4013      	ands	r3, r2
 8002932:	60bb      	str	r3, [r7, #8]
 8002934:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002936:	183b      	adds	r3, r7, r0
 8002938:	2201      	movs	r2, #1
 800293a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800293c:	4b4c      	ldr	r3, [pc, #304]	@ (8002a70 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 800293e:	681a      	ldr	r2, [r3, #0]
 8002940:	2380      	movs	r3, #128	@ 0x80
 8002942:	005b      	lsls	r3, r3, #1
 8002944:	4013      	ands	r3, r2
 8002946:	d11a      	bne.n	800297e <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002948:	4b49      	ldr	r3, [pc, #292]	@ (8002a70 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 800294a:	681a      	ldr	r2, [r3, #0]
 800294c:	4b48      	ldr	r3, [pc, #288]	@ (8002a70 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 800294e:	2180      	movs	r1, #128	@ 0x80
 8002950:	0049      	lsls	r1, r1, #1
 8002952:	430a      	orrs	r2, r1
 8002954:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002956:	f7fe fc35 	bl	80011c4 <HAL_GetTick>
 800295a:	0003      	movs	r3, r0
 800295c:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800295e:	e008      	b.n	8002972 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002960:	f7fe fc30 	bl	80011c4 <HAL_GetTick>
 8002964:	0002      	movs	r2, r0
 8002966:	693b      	ldr	r3, [r7, #16]
 8002968:	1ad3      	subs	r3, r2, r3
 800296a:	2b64      	cmp	r3, #100	@ 0x64
 800296c:	d901      	bls.n	8002972 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 800296e:	2303      	movs	r3, #3
 8002970:	e077      	b.n	8002a62 <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002972:	4b3f      	ldr	r3, [pc, #252]	@ (8002a70 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002974:	681a      	ldr	r2, [r3, #0]
 8002976:	2380      	movs	r3, #128	@ 0x80
 8002978:	005b      	lsls	r3, r3, #1
 800297a:	4013      	ands	r3, r2
 800297c:	d0f0      	beq.n	8002960 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800297e:	4b3b      	ldr	r3, [pc, #236]	@ (8002a6c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002980:	6a1a      	ldr	r2, [r3, #32]
 8002982:	23c0      	movs	r3, #192	@ 0xc0
 8002984:	009b      	lsls	r3, r3, #2
 8002986:	4013      	ands	r3, r2
 8002988:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d034      	beq.n	80029fa <HAL_RCCEx_PeriphCLKConfig+0x112>
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	685a      	ldr	r2, [r3, #4]
 8002994:	23c0      	movs	r3, #192	@ 0xc0
 8002996:	009b      	lsls	r3, r3, #2
 8002998:	4013      	ands	r3, r2
 800299a:	68fa      	ldr	r2, [r7, #12]
 800299c:	429a      	cmp	r2, r3
 800299e:	d02c      	beq.n	80029fa <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80029a0:	4b32      	ldr	r3, [pc, #200]	@ (8002a6c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80029a2:	6a1b      	ldr	r3, [r3, #32]
 80029a4:	4a33      	ldr	r2, [pc, #204]	@ (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 80029a6:	4013      	ands	r3, r2
 80029a8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80029aa:	4b30      	ldr	r3, [pc, #192]	@ (8002a6c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80029ac:	6a1a      	ldr	r2, [r3, #32]
 80029ae:	4b2f      	ldr	r3, [pc, #188]	@ (8002a6c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80029b0:	2180      	movs	r1, #128	@ 0x80
 80029b2:	0249      	lsls	r1, r1, #9
 80029b4:	430a      	orrs	r2, r1
 80029b6:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80029b8:	4b2c      	ldr	r3, [pc, #176]	@ (8002a6c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80029ba:	6a1a      	ldr	r2, [r3, #32]
 80029bc:	4b2b      	ldr	r3, [pc, #172]	@ (8002a6c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80029be:	492e      	ldr	r1, [pc, #184]	@ (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 80029c0:	400a      	ands	r2, r1
 80029c2:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80029c4:	4b29      	ldr	r3, [pc, #164]	@ (8002a6c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80029c6:	68fa      	ldr	r2, [r7, #12]
 80029c8:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	2201      	movs	r2, #1
 80029ce:	4013      	ands	r3, r2
 80029d0:	d013      	beq.n	80029fa <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029d2:	f7fe fbf7 	bl	80011c4 <HAL_GetTick>
 80029d6:	0003      	movs	r3, r0
 80029d8:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029da:	e009      	b.n	80029f0 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029dc:	f7fe fbf2 	bl	80011c4 <HAL_GetTick>
 80029e0:	0002      	movs	r2, r0
 80029e2:	693b      	ldr	r3, [r7, #16]
 80029e4:	1ad3      	subs	r3, r2, r3
 80029e6:	4a25      	ldr	r2, [pc, #148]	@ (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x194>)
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d901      	bls.n	80029f0 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 80029ec:	2303      	movs	r3, #3
 80029ee:	e038      	b.n	8002a62 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029f0:	4b1e      	ldr	r3, [pc, #120]	@ (8002a6c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80029f2:	6a1b      	ldr	r3, [r3, #32]
 80029f4:	2202      	movs	r2, #2
 80029f6:	4013      	ands	r3, r2
 80029f8:	d0f0      	beq.n	80029dc <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80029fa:	4b1c      	ldr	r3, [pc, #112]	@ (8002a6c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80029fc:	6a1b      	ldr	r3, [r3, #32]
 80029fe:	4a1d      	ldr	r2, [pc, #116]	@ (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8002a00:	4013      	ands	r3, r2
 8002a02:	0019      	movs	r1, r3
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	685a      	ldr	r2, [r3, #4]
 8002a08:	4b18      	ldr	r3, [pc, #96]	@ (8002a6c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002a0a:	430a      	orrs	r2, r1
 8002a0c:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002a0e:	2317      	movs	r3, #23
 8002a10:	18fb      	adds	r3, r7, r3
 8002a12:	781b      	ldrb	r3, [r3, #0]
 8002a14:	2b01      	cmp	r3, #1
 8002a16:	d105      	bne.n	8002a24 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a18:	4b14      	ldr	r3, [pc, #80]	@ (8002a6c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002a1a:	69da      	ldr	r2, [r3, #28]
 8002a1c:	4b13      	ldr	r3, [pc, #76]	@ (8002a6c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002a1e:	4918      	ldr	r1, [pc, #96]	@ (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8002a20:	400a      	ands	r2, r1
 8002a22:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	2201      	movs	r2, #1
 8002a2a:	4013      	ands	r3, r2
 8002a2c:	d009      	beq.n	8002a42 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002a2e:	4b0f      	ldr	r3, [pc, #60]	@ (8002a6c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002a30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a32:	2203      	movs	r2, #3
 8002a34:	4393      	bics	r3, r2
 8002a36:	0019      	movs	r1, r3
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	689a      	ldr	r2, [r3, #8]
 8002a3c:	4b0b      	ldr	r3, [pc, #44]	@ (8002a6c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002a3e:	430a      	orrs	r2, r1
 8002a40:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	2220      	movs	r2, #32
 8002a48:	4013      	ands	r3, r2
 8002a4a:	d009      	beq.n	8002a60 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002a4c:	4b07      	ldr	r3, [pc, #28]	@ (8002a6c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002a4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a50:	2210      	movs	r2, #16
 8002a52:	4393      	bics	r3, r2
 8002a54:	0019      	movs	r1, r3
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	68da      	ldr	r2, [r3, #12]
 8002a5a:	4b04      	ldr	r3, [pc, #16]	@ (8002a6c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002a5c:	430a      	orrs	r2, r1
 8002a5e:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8002a60:	2300      	movs	r3, #0
}
 8002a62:	0018      	movs	r0, r3
 8002a64:	46bd      	mov	sp, r7
 8002a66:	b006      	add	sp, #24
 8002a68:	bd80      	pop	{r7, pc}
 8002a6a:	46c0      	nop			@ (mov r8, r8)
 8002a6c:	40021000 	.word	0x40021000
 8002a70:	40007000 	.word	0x40007000
 8002a74:	fffffcff 	.word	0xfffffcff
 8002a78:	fffeffff 	.word	0xfffeffff
 8002a7c:	00001388 	.word	0x00001388
 8002a80:	efffffff 	.word	0xefffffff

08002a84 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b082      	sub	sp, #8
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d101      	bne.n	8002a96 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002a92:	2301      	movs	r3, #1
 8002a94:	e042      	b.n	8002b1c <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	223d      	movs	r2, #61	@ 0x3d
 8002a9a:	5c9b      	ldrb	r3, [r3, r2]
 8002a9c:	b2db      	uxtb	r3, r3
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d107      	bne.n	8002ab2 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	223c      	movs	r2, #60	@ 0x3c
 8002aa6:	2100      	movs	r1, #0
 8002aa8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	0018      	movs	r0, r3
 8002aae:	f000 f839 	bl	8002b24 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	223d      	movs	r2, #61	@ 0x3d
 8002ab6:	2102      	movs	r1, #2
 8002ab8:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681a      	ldr	r2, [r3, #0]
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	3304      	adds	r3, #4
 8002ac2:	0019      	movs	r1, r3
 8002ac4:	0010      	movs	r0, r2
 8002ac6:	f000 fa5d 	bl	8002f84 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2246      	movs	r2, #70	@ 0x46
 8002ace:	2101      	movs	r1, #1
 8002ad0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	223e      	movs	r2, #62	@ 0x3e
 8002ad6:	2101      	movs	r1, #1
 8002ad8:	5499      	strb	r1, [r3, r2]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	223f      	movs	r2, #63	@ 0x3f
 8002ade:	2101      	movs	r1, #1
 8002ae0:	5499      	strb	r1, [r3, r2]
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2240      	movs	r2, #64	@ 0x40
 8002ae6:	2101      	movs	r1, #1
 8002ae8:	5499      	strb	r1, [r3, r2]
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2241      	movs	r2, #65	@ 0x41
 8002aee:	2101      	movs	r1, #1
 8002af0:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2242      	movs	r2, #66	@ 0x42
 8002af6:	2101      	movs	r1, #1
 8002af8:	5499      	strb	r1, [r3, r2]
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2243      	movs	r2, #67	@ 0x43
 8002afe:	2101      	movs	r1, #1
 8002b00:	5499      	strb	r1, [r3, r2]
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2244      	movs	r2, #68	@ 0x44
 8002b06:	2101      	movs	r1, #1
 8002b08:	5499      	strb	r1, [r3, r2]
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2245      	movs	r2, #69	@ 0x45
 8002b0e:	2101      	movs	r1, #1
 8002b10:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	223d      	movs	r2, #61	@ 0x3d
 8002b16:	2101      	movs	r1, #1
 8002b18:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002b1a:	2300      	movs	r3, #0
}
 8002b1c:	0018      	movs	r0, r3
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	b002      	add	sp, #8
 8002b22:	bd80      	pop	{r7, pc}

08002b24 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b082      	sub	sp, #8
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002b2c:	46c0      	nop			@ (mov r8, r8)
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	b002      	add	sp, #8
 8002b32:	bd80      	pop	{r7, pc}

08002b34 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b084      	sub	sp, #16
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	223d      	movs	r2, #61	@ 0x3d
 8002b40:	5c9b      	ldrb	r3, [r3, r2]
 8002b42:	b2db      	uxtb	r3, r3
 8002b44:	2b01      	cmp	r3, #1
 8002b46:	d001      	beq.n	8002b4c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002b48:	2301      	movs	r3, #1
 8002b4a:	e030      	b.n	8002bae <HAL_TIM_Base_Start_IT+0x7a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	223d      	movs	r2, #61	@ 0x3d
 8002b50:	2102      	movs	r1, #2
 8002b52:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	68da      	ldr	r2, [r3, #12]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	2101      	movs	r1, #1
 8002b60:	430a      	orrs	r2, r1
 8002b62:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4a13      	ldr	r2, [pc, #76]	@ (8002bb8 <HAL_TIM_Base_Start_IT+0x84>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d004      	beq.n	8002b78 <HAL_TIM_Base_Start_IT+0x44>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4a12      	ldr	r2, [pc, #72]	@ (8002bbc <HAL_TIM_Base_Start_IT+0x88>)
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d111      	bne.n	8002b9c <HAL_TIM_Base_Start_IT+0x68>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	689b      	ldr	r3, [r3, #8]
 8002b7e:	2207      	movs	r2, #7
 8002b80:	4013      	ands	r3, r2
 8002b82:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	2b06      	cmp	r3, #6
 8002b88:	d010      	beq.n	8002bac <HAL_TIM_Base_Start_IT+0x78>
    {
      __HAL_TIM_ENABLE(htim);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	681a      	ldr	r2, [r3, #0]
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	2101      	movs	r1, #1
 8002b96:	430a      	orrs	r2, r1
 8002b98:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b9a:	e007      	b.n	8002bac <HAL_TIM_Base_Start_IT+0x78>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	681a      	ldr	r2, [r3, #0]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	2101      	movs	r1, #1
 8002ba8:	430a      	orrs	r2, r1
 8002baa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002bac:	2300      	movs	r3, #0
}
 8002bae:	0018      	movs	r0, r3
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	b004      	add	sp, #16
 8002bb4:	bd80      	pop	{r7, pc}
 8002bb6:	46c0      	nop			@ (mov r8, r8)
 8002bb8:	40012c00 	.word	0x40012c00
 8002bbc:	40000400 	.word	0x40000400

08002bc0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b084      	sub	sp, #16
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	68db      	ldr	r3, [r3, #12]
 8002bce:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	691b      	ldr	r3, [r3, #16]
 8002bd6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002bd8:	68bb      	ldr	r3, [r7, #8]
 8002bda:	2202      	movs	r2, #2
 8002bdc:	4013      	ands	r3, r2
 8002bde:	d021      	beq.n	8002c24 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	2202      	movs	r2, #2
 8002be4:	4013      	ands	r3, r2
 8002be6:	d01d      	beq.n	8002c24 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	2203      	movs	r2, #3
 8002bee:	4252      	negs	r2, r2
 8002bf0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2201      	movs	r2, #1
 8002bf6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	699b      	ldr	r3, [r3, #24]
 8002bfe:	2203      	movs	r2, #3
 8002c00:	4013      	ands	r3, r2
 8002c02:	d004      	beq.n	8002c0e <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	0018      	movs	r0, r3
 8002c08:	f000 f9a4 	bl	8002f54 <HAL_TIM_IC_CaptureCallback>
 8002c0c:	e007      	b.n	8002c1e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	0018      	movs	r0, r3
 8002c12:	f000 f997 	bl	8002f44 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	0018      	movs	r0, r3
 8002c1a:	f000 f9a3 	bl	8002f64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2200      	movs	r2, #0
 8002c22:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002c24:	68bb      	ldr	r3, [r7, #8]
 8002c26:	2204      	movs	r2, #4
 8002c28:	4013      	ands	r3, r2
 8002c2a:	d022      	beq.n	8002c72 <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	2204      	movs	r2, #4
 8002c30:	4013      	ands	r3, r2
 8002c32:	d01e      	beq.n	8002c72 <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	2205      	movs	r2, #5
 8002c3a:	4252      	negs	r2, r2
 8002c3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2202      	movs	r2, #2
 8002c42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	699a      	ldr	r2, [r3, #24]
 8002c4a:	23c0      	movs	r3, #192	@ 0xc0
 8002c4c:	009b      	lsls	r3, r3, #2
 8002c4e:	4013      	ands	r3, r2
 8002c50:	d004      	beq.n	8002c5c <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	0018      	movs	r0, r3
 8002c56:	f000 f97d 	bl	8002f54 <HAL_TIM_IC_CaptureCallback>
 8002c5a:	e007      	b.n	8002c6c <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	0018      	movs	r0, r3
 8002c60:	f000 f970 	bl	8002f44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	0018      	movs	r0, r3
 8002c68:	f000 f97c 	bl	8002f64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2200      	movs	r2, #0
 8002c70:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002c72:	68bb      	ldr	r3, [r7, #8]
 8002c74:	2208      	movs	r2, #8
 8002c76:	4013      	ands	r3, r2
 8002c78:	d021      	beq.n	8002cbe <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	2208      	movs	r2, #8
 8002c7e:	4013      	ands	r3, r2
 8002c80:	d01d      	beq.n	8002cbe <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	2209      	movs	r2, #9
 8002c88:	4252      	negs	r2, r2
 8002c8a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2204      	movs	r2, #4
 8002c90:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	69db      	ldr	r3, [r3, #28]
 8002c98:	2203      	movs	r2, #3
 8002c9a:	4013      	ands	r3, r2
 8002c9c:	d004      	beq.n	8002ca8 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	0018      	movs	r0, r3
 8002ca2:	f000 f957 	bl	8002f54 <HAL_TIM_IC_CaptureCallback>
 8002ca6:	e007      	b.n	8002cb8 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	0018      	movs	r0, r3
 8002cac:	f000 f94a 	bl	8002f44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	0018      	movs	r0, r3
 8002cb4:	f000 f956 	bl	8002f64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2200      	movs	r2, #0
 8002cbc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002cbe:	68bb      	ldr	r3, [r7, #8]
 8002cc0:	2210      	movs	r2, #16
 8002cc2:	4013      	ands	r3, r2
 8002cc4:	d022      	beq.n	8002d0c <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	2210      	movs	r2, #16
 8002cca:	4013      	ands	r3, r2
 8002ccc:	d01e      	beq.n	8002d0c <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	2211      	movs	r2, #17
 8002cd4:	4252      	negs	r2, r2
 8002cd6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2208      	movs	r2, #8
 8002cdc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	69da      	ldr	r2, [r3, #28]
 8002ce4:	23c0      	movs	r3, #192	@ 0xc0
 8002ce6:	009b      	lsls	r3, r3, #2
 8002ce8:	4013      	ands	r3, r2
 8002cea:	d004      	beq.n	8002cf6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	0018      	movs	r0, r3
 8002cf0:	f000 f930 	bl	8002f54 <HAL_TIM_IC_CaptureCallback>
 8002cf4:	e007      	b.n	8002d06 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	0018      	movs	r0, r3
 8002cfa:	f000 f923 	bl	8002f44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	0018      	movs	r0, r3
 8002d02:	f000 f92f 	bl	8002f64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2200      	movs	r2, #0
 8002d0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002d0c:	68bb      	ldr	r3, [r7, #8]
 8002d0e:	2201      	movs	r2, #1
 8002d10:	4013      	ands	r3, r2
 8002d12:	d00c      	beq.n	8002d2e <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	2201      	movs	r2, #1
 8002d18:	4013      	ands	r3, r2
 8002d1a:	d008      	beq.n	8002d2e <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	2202      	movs	r2, #2
 8002d22:	4252      	negs	r2, r2
 8002d24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	0018      	movs	r0, r3
 8002d2a:	f7fe f8bf 	bl	8000eac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002d2e:	68bb      	ldr	r3, [r7, #8]
 8002d30:	2280      	movs	r2, #128	@ 0x80
 8002d32:	4013      	ands	r3, r2
 8002d34:	d00c      	beq.n	8002d50 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	2280      	movs	r2, #128	@ 0x80
 8002d3a:	4013      	ands	r3, r2
 8002d3c:	d008      	beq.n	8002d50 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	2281      	movs	r2, #129	@ 0x81
 8002d44:	4252      	negs	r2, r2
 8002d46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	0018      	movs	r0, r3
 8002d4c:	f000 fa36 	bl	80031bc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002d50:	68bb      	ldr	r3, [r7, #8]
 8002d52:	2240      	movs	r2, #64	@ 0x40
 8002d54:	4013      	ands	r3, r2
 8002d56:	d00c      	beq.n	8002d72 <HAL_TIM_IRQHandler+0x1b2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	2240      	movs	r2, #64	@ 0x40
 8002d5c:	4013      	ands	r3, r2
 8002d5e:	d008      	beq.n	8002d72 <HAL_TIM_IRQHandler+0x1b2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	2241      	movs	r2, #65	@ 0x41
 8002d66:	4252      	negs	r2, r2
 8002d68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	0018      	movs	r0, r3
 8002d6e:	f000 f901 	bl	8002f74 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002d72:	68bb      	ldr	r3, [r7, #8]
 8002d74:	2220      	movs	r2, #32
 8002d76:	4013      	ands	r3, r2
 8002d78:	d00c      	beq.n	8002d94 <HAL_TIM_IRQHandler+0x1d4>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	2220      	movs	r2, #32
 8002d7e:	4013      	ands	r3, r2
 8002d80:	d008      	beq.n	8002d94 <HAL_TIM_IRQHandler+0x1d4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	2221      	movs	r2, #33	@ 0x21
 8002d88:	4252      	negs	r2, r2
 8002d8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	0018      	movs	r0, r3
 8002d90:	f000 fa0c 	bl	80031ac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002d94:	46c0      	nop			@ (mov r8, r8)
 8002d96:	46bd      	mov	sp, r7
 8002d98:	b004      	add	sp, #16
 8002d9a:	bd80      	pop	{r7, pc}

08002d9c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b084      	sub	sp, #16
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
 8002da4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002da6:	230f      	movs	r3, #15
 8002da8:	18fb      	adds	r3, r7, r3
 8002daa:	2200      	movs	r2, #0
 8002dac:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	223c      	movs	r2, #60	@ 0x3c
 8002db2:	5c9b      	ldrb	r3, [r3, r2]
 8002db4:	2b01      	cmp	r3, #1
 8002db6:	d101      	bne.n	8002dbc <HAL_TIM_ConfigClockSource+0x20>
 8002db8:	2302      	movs	r3, #2
 8002dba:	e0bc      	b.n	8002f36 <HAL_TIM_ConfigClockSource+0x19a>
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	223c      	movs	r2, #60	@ 0x3c
 8002dc0:	2101      	movs	r1, #1
 8002dc2:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	223d      	movs	r2, #61	@ 0x3d
 8002dc8:	2102      	movs	r1, #2
 8002dca:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	689b      	ldr	r3, [r3, #8]
 8002dd2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002dd4:	68bb      	ldr	r3, [r7, #8]
 8002dd6:	2277      	movs	r2, #119	@ 0x77
 8002dd8:	4393      	bics	r3, r2
 8002dda:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ddc:	68bb      	ldr	r3, [r7, #8]
 8002dde:	4a58      	ldr	r2, [pc, #352]	@ (8002f40 <HAL_TIM_ConfigClockSource+0x1a4>)
 8002de0:	4013      	ands	r3, r2
 8002de2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	68ba      	ldr	r2, [r7, #8]
 8002dea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	2280      	movs	r2, #128	@ 0x80
 8002df2:	0192      	lsls	r2, r2, #6
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d040      	beq.n	8002e7a <HAL_TIM_ConfigClockSource+0xde>
 8002df8:	2280      	movs	r2, #128	@ 0x80
 8002dfa:	0192      	lsls	r2, r2, #6
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d900      	bls.n	8002e02 <HAL_TIM_ConfigClockSource+0x66>
 8002e00:	e088      	b.n	8002f14 <HAL_TIM_ConfigClockSource+0x178>
 8002e02:	2280      	movs	r2, #128	@ 0x80
 8002e04:	0152      	lsls	r2, r2, #5
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d100      	bne.n	8002e0c <HAL_TIM_ConfigClockSource+0x70>
 8002e0a:	e088      	b.n	8002f1e <HAL_TIM_ConfigClockSource+0x182>
 8002e0c:	2280      	movs	r2, #128	@ 0x80
 8002e0e:	0152      	lsls	r2, r2, #5
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d900      	bls.n	8002e16 <HAL_TIM_ConfigClockSource+0x7a>
 8002e14:	e07e      	b.n	8002f14 <HAL_TIM_ConfigClockSource+0x178>
 8002e16:	2b70      	cmp	r3, #112	@ 0x70
 8002e18:	d018      	beq.n	8002e4c <HAL_TIM_ConfigClockSource+0xb0>
 8002e1a:	d900      	bls.n	8002e1e <HAL_TIM_ConfigClockSource+0x82>
 8002e1c:	e07a      	b.n	8002f14 <HAL_TIM_ConfigClockSource+0x178>
 8002e1e:	2b60      	cmp	r3, #96	@ 0x60
 8002e20:	d04f      	beq.n	8002ec2 <HAL_TIM_ConfigClockSource+0x126>
 8002e22:	d900      	bls.n	8002e26 <HAL_TIM_ConfigClockSource+0x8a>
 8002e24:	e076      	b.n	8002f14 <HAL_TIM_ConfigClockSource+0x178>
 8002e26:	2b50      	cmp	r3, #80	@ 0x50
 8002e28:	d03b      	beq.n	8002ea2 <HAL_TIM_ConfigClockSource+0x106>
 8002e2a:	d900      	bls.n	8002e2e <HAL_TIM_ConfigClockSource+0x92>
 8002e2c:	e072      	b.n	8002f14 <HAL_TIM_ConfigClockSource+0x178>
 8002e2e:	2b40      	cmp	r3, #64	@ 0x40
 8002e30:	d057      	beq.n	8002ee2 <HAL_TIM_ConfigClockSource+0x146>
 8002e32:	d900      	bls.n	8002e36 <HAL_TIM_ConfigClockSource+0x9a>
 8002e34:	e06e      	b.n	8002f14 <HAL_TIM_ConfigClockSource+0x178>
 8002e36:	2b30      	cmp	r3, #48	@ 0x30
 8002e38:	d063      	beq.n	8002f02 <HAL_TIM_ConfigClockSource+0x166>
 8002e3a:	d86b      	bhi.n	8002f14 <HAL_TIM_ConfigClockSource+0x178>
 8002e3c:	2b20      	cmp	r3, #32
 8002e3e:	d060      	beq.n	8002f02 <HAL_TIM_ConfigClockSource+0x166>
 8002e40:	d868      	bhi.n	8002f14 <HAL_TIM_ConfigClockSource+0x178>
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d05d      	beq.n	8002f02 <HAL_TIM_ConfigClockSource+0x166>
 8002e46:	2b10      	cmp	r3, #16
 8002e48:	d05b      	beq.n	8002f02 <HAL_TIM_ConfigClockSource+0x166>
 8002e4a:	e063      	b.n	8002f14 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002e5c:	f000 f986 	bl	800316c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	689b      	ldr	r3, [r3, #8]
 8002e66:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002e68:	68bb      	ldr	r3, [r7, #8]
 8002e6a:	2277      	movs	r2, #119	@ 0x77
 8002e6c:	4313      	orrs	r3, r2
 8002e6e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	68ba      	ldr	r2, [r7, #8]
 8002e76:	609a      	str	r2, [r3, #8]
      break;
 8002e78:	e052      	b.n	8002f20 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002e8a:	f000 f96f 	bl	800316c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	689a      	ldr	r2, [r3, #8]
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	2180      	movs	r1, #128	@ 0x80
 8002e9a:	01c9      	lsls	r1, r1, #7
 8002e9c:	430a      	orrs	r2, r1
 8002e9e:	609a      	str	r2, [r3, #8]
      break;
 8002ea0:	e03e      	b.n	8002f20 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002eae:	001a      	movs	r2, r3
 8002eb0:	f000 f8e2 	bl	8003078 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	2150      	movs	r1, #80	@ 0x50
 8002eba:	0018      	movs	r0, r3
 8002ebc:	f000 f93c 	bl	8003138 <TIM_ITRx_SetConfig>
      break;
 8002ec0:	e02e      	b.n	8002f20 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002ece:	001a      	movs	r2, r3
 8002ed0:	f000 f900 	bl	80030d4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	2160      	movs	r1, #96	@ 0x60
 8002eda:	0018      	movs	r0, r3
 8002edc:	f000 f92c 	bl	8003138 <TIM_ITRx_SetConfig>
      break;
 8002ee0:	e01e      	b.n	8002f20 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002eee:	001a      	movs	r2, r3
 8002ef0:	f000 f8c2 	bl	8003078 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	2140      	movs	r1, #64	@ 0x40
 8002efa:	0018      	movs	r0, r3
 8002efc:	f000 f91c 	bl	8003138 <TIM_ITRx_SetConfig>
      break;
 8002f00:	e00e      	b.n	8002f20 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681a      	ldr	r2, [r3, #0]
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	0019      	movs	r1, r3
 8002f0c:	0010      	movs	r0, r2
 8002f0e:	f000 f913 	bl	8003138 <TIM_ITRx_SetConfig>
      break;
 8002f12:	e005      	b.n	8002f20 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8002f14:	230f      	movs	r3, #15
 8002f16:	18fb      	adds	r3, r7, r3
 8002f18:	2201      	movs	r2, #1
 8002f1a:	701a      	strb	r2, [r3, #0]
      break;
 8002f1c:	e000      	b.n	8002f20 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8002f1e:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	223d      	movs	r2, #61	@ 0x3d
 8002f24:	2101      	movs	r1, #1
 8002f26:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	223c      	movs	r2, #60	@ 0x3c
 8002f2c:	2100      	movs	r1, #0
 8002f2e:	5499      	strb	r1, [r3, r2]

  return status;
 8002f30:	230f      	movs	r3, #15
 8002f32:	18fb      	adds	r3, r7, r3
 8002f34:	781b      	ldrb	r3, [r3, #0]
}
 8002f36:	0018      	movs	r0, r3
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	b004      	add	sp, #16
 8002f3c:	bd80      	pop	{r7, pc}
 8002f3e:	46c0      	nop			@ (mov r8, r8)
 8002f40:	ffff00ff 	.word	0xffff00ff

08002f44 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b082      	sub	sp, #8
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002f4c:	46c0      	nop			@ (mov r8, r8)
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	b002      	add	sp, #8
 8002f52:	bd80      	pop	{r7, pc}

08002f54 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b082      	sub	sp, #8
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002f5c:	46c0      	nop			@ (mov r8, r8)
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	b002      	add	sp, #8
 8002f62:	bd80      	pop	{r7, pc}

08002f64 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b082      	sub	sp, #8
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002f6c:	46c0      	nop			@ (mov r8, r8)
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	b002      	add	sp, #8
 8002f72:	bd80      	pop	{r7, pc}

08002f74 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b082      	sub	sp, #8
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002f7c:	46c0      	nop			@ (mov r8, r8)
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	b002      	add	sp, #8
 8002f82:	bd80      	pop	{r7, pc}

08002f84 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b084      	sub	sp, #16
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
 8002f8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	4a32      	ldr	r2, [pc, #200]	@ (8003060 <TIM_Base_SetConfig+0xdc>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d003      	beq.n	8002fa4 <TIM_Base_SetConfig+0x20>
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	4a31      	ldr	r2, [pc, #196]	@ (8003064 <TIM_Base_SetConfig+0xe0>)
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d108      	bne.n	8002fb6 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	2270      	movs	r2, #112	@ 0x70
 8002fa8:	4393      	bics	r3, r2
 8002faa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	68fa      	ldr	r2, [r7, #12]
 8002fb2:	4313      	orrs	r3, r2
 8002fb4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	4a29      	ldr	r2, [pc, #164]	@ (8003060 <TIM_Base_SetConfig+0xdc>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d00f      	beq.n	8002fde <TIM_Base_SetConfig+0x5a>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	4a28      	ldr	r2, [pc, #160]	@ (8003064 <TIM_Base_SetConfig+0xe0>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d00b      	beq.n	8002fde <TIM_Base_SetConfig+0x5a>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	4a27      	ldr	r2, [pc, #156]	@ (8003068 <TIM_Base_SetConfig+0xe4>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d007      	beq.n	8002fde <TIM_Base_SetConfig+0x5a>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	4a26      	ldr	r2, [pc, #152]	@ (800306c <TIM_Base_SetConfig+0xe8>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d003      	beq.n	8002fde <TIM_Base_SetConfig+0x5a>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	4a25      	ldr	r2, [pc, #148]	@ (8003070 <TIM_Base_SetConfig+0xec>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d108      	bne.n	8002ff0 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	4a24      	ldr	r2, [pc, #144]	@ (8003074 <TIM_Base_SetConfig+0xf0>)
 8002fe2:	4013      	ands	r3, r2
 8002fe4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	68db      	ldr	r3, [r3, #12]
 8002fea:	68fa      	ldr	r2, [r7, #12]
 8002fec:	4313      	orrs	r3, r2
 8002fee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	2280      	movs	r2, #128	@ 0x80
 8002ff4:	4393      	bics	r3, r2
 8002ff6:	001a      	movs	r2, r3
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	695b      	ldr	r3, [r3, #20]
 8002ffc:	4313      	orrs	r3, r2
 8002ffe:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	68fa      	ldr	r2, [r7, #12]
 8003004:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	689a      	ldr	r2, [r3, #8]
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	681a      	ldr	r2, [r3, #0]
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	4a11      	ldr	r2, [pc, #68]	@ (8003060 <TIM_Base_SetConfig+0xdc>)
 800301a:	4293      	cmp	r3, r2
 800301c:	d007      	beq.n	800302e <TIM_Base_SetConfig+0xaa>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	4a12      	ldr	r2, [pc, #72]	@ (800306c <TIM_Base_SetConfig+0xe8>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d003      	beq.n	800302e <TIM_Base_SetConfig+0xaa>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	4a11      	ldr	r2, [pc, #68]	@ (8003070 <TIM_Base_SetConfig+0xec>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d103      	bne.n	8003036 <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	691a      	ldr	r2, [r3, #16]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2201      	movs	r2, #1
 800303a:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	691b      	ldr	r3, [r3, #16]
 8003040:	2201      	movs	r2, #1
 8003042:	4013      	ands	r3, r2
 8003044:	2b01      	cmp	r3, #1
 8003046:	d106      	bne.n	8003056 <TIM_Base_SetConfig+0xd2>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	691b      	ldr	r3, [r3, #16]
 800304c:	2201      	movs	r2, #1
 800304e:	4393      	bics	r3, r2
 8003050:	001a      	movs	r2, r3
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	611a      	str	r2, [r3, #16]
  }
}
 8003056:	46c0      	nop			@ (mov r8, r8)
 8003058:	46bd      	mov	sp, r7
 800305a:	b004      	add	sp, #16
 800305c:	bd80      	pop	{r7, pc}
 800305e:	46c0      	nop			@ (mov r8, r8)
 8003060:	40012c00 	.word	0x40012c00
 8003064:	40000400 	.word	0x40000400
 8003068:	40002000 	.word	0x40002000
 800306c:	40014400 	.word	0x40014400
 8003070:	40014800 	.word	0x40014800
 8003074:	fffffcff 	.word	0xfffffcff

08003078 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b086      	sub	sp, #24
 800307c:	af00      	add	r7, sp, #0
 800307e:	60f8      	str	r0, [r7, #12]
 8003080:	60b9      	str	r1, [r7, #8]
 8003082:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	6a1b      	ldr	r3, [r3, #32]
 8003088:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	6a1b      	ldr	r3, [r3, #32]
 800308e:	2201      	movs	r2, #1
 8003090:	4393      	bics	r3, r2
 8003092:	001a      	movs	r2, r3
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	699b      	ldr	r3, [r3, #24]
 800309c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800309e:	693b      	ldr	r3, [r7, #16]
 80030a0:	22f0      	movs	r2, #240	@ 0xf0
 80030a2:	4393      	bics	r3, r2
 80030a4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	011b      	lsls	r3, r3, #4
 80030aa:	693a      	ldr	r2, [r7, #16]
 80030ac:	4313      	orrs	r3, r2
 80030ae:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80030b0:	697b      	ldr	r3, [r7, #20]
 80030b2:	220a      	movs	r2, #10
 80030b4:	4393      	bics	r3, r2
 80030b6:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80030b8:	697a      	ldr	r2, [r7, #20]
 80030ba:	68bb      	ldr	r3, [r7, #8]
 80030bc:	4313      	orrs	r3, r2
 80030be:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	693a      	ldr	r2, [r7, #16]
 80030c4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	697a      	ldr	r2, [r7, #20]
 80030ca:	621a      	str	r2, [r3, #32]
}
 80030cc:	46c0      	nop			@ (mov r8, r8)
 80030ce:	46bd      	mov	sp, r7
 80030d0:	b006      	add	sp, #24
 80030d2:	bd80      	pop	{r7, pc}

080030d4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b086      	sub	sp, #24
 80030d8:	af00      	add	r7, sp, #0
 80030da:	60f8      	str	r0, [r7, #12]
 80030dc:	60b9      	str	r1, [r7, #8]
 80030de:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	6a1b      	ldr	r3, [r3, #32]
 80030e4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	6a1b      	ldr	r3, [r3, #32]
 80030ea:	2210      	movs	r2, #16
 80030ec:	4393      	bics	r3, r2
 80030ee:	001a      	movs	r2, r3
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	699b      	ldr	r3, [r3, #24]
 80030f8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80030fa:	693b      	ldr	r3, [r7, #16]
 80030fc:	4a0d      	ldr	r2, [pc, #52]	@ (8003134 <TIM_TI2_ConfigInputStage+0x60>)
 80030fe:	4013      	ands	r3, r2
 8003100:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	031b      	lsls	r3, r3, #12
 8003106:	693a      	ldr	r2, [r7, #16]
 8003108:	4313      	orrs	r3, r2
 800310a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800310c:	697b      	ldr	r3, [r7, #20]
 800310e:	22a0      	movs	r2, #160	@ 0xa0
 8003110:	4393      	bics	r3, r2
 8003112:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003114:	68bb      	ldr	r3, [r7, #8]
 8003116:	011b      	lsls	r3, r3, #4
 8003118:	697a      	ldr	r2, [r7, #20]
 800311a:	4313      	orrs	r3, r2
 800311c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	693a      	ldr	r2, [r7, #16]
 8003122:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	697a      	ldr	r2, [r7, #20]
 8003128:	621a      	str	r2, [r3, #32]
}
 800312a:	46c0      	nop			@ (mov r8, r8)
 800312c:	46bd      	mov	sp, r7
 800312e:	b006      	add	sp, #24
 8003130:	bd80      	pop	{r7, pc}
 8003132:	46c0      	nop			@ (mov r8, r8)
 8003134:	ffff0fff 	.word	0xffff0fff

08003138 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b084      	sub	sp, #16
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
 8003140:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	689b      	ldr	r3, [r3, #8]
 8003146:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	2270      	movs	r2, #112	@ 0x70
 800314c:	4393      	bics	r3, r2
 800314e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003150:	683a      	ldr	r2, [r7, #0]
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	4313      	orrs	r3, r2
 8003156:	2207      	movs	r2, #7
 8003158:	4313      	orrs	r3, r2
 800315a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	68fa      	ldr	r2, [r7, #12]
 8003160:	609a      	str	r2, [r3, #8]
}
 8003162:	46c0      	nop			@ (mov r8, r8)
 8003164:	46bd      	mov	sp, r7
 8003166:	b004      	add	sp, #16
 8003168:	bd80      	pop	{r7, pc}
	...

0800316c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b086      	sub	sp, #24
 8003170:	af00      	add	r7, sp, #0
 8003172:	60f8      	str	r0, [r7, #12]
 8003174:	60b9      	str	r1, [r7, #8]
 8003176:	607a      	str	r2, [r7, #4]
 8003178:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	689b      	ldr	r3, [r3, #8]
 800317e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003180:	697b      	ldr	r3, [r7, #20]
 8003182:	4a09      	ldr	r2, [pc, #36]	@ (80031a8 <TIM_ETR_SetConfig+0x3c>)
 8003184:	4013      	ands	r3, r2
 8003186:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	021a      	lsls	r2, r3, #8
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	431a      	orrs	r2, r3
 8003190:	68bb      	ldr	r3, [r7, #8]
 8003192:	4313      	orrs	r3, r2
 8003194:	697a      	ldr	r2, [r7, #20]
 8003196:	4313      	orrs	r3, r2
 8003198:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	697a      	ldr	r2, [r7, #20]
 800319e:	609a      	str	r2, [r3, #8]
}
 80031a0:	46c0      	nop			@ (mov r8, r8)
 80031a2:	46bd      	mov	sp, r7
 80031a4:	b006      	add	sp, #24
 80031a6:	bd80      	pop	{r7, pc}
 80031a8:	ffff00ff 	.word	0xffff00ff

080031ac <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b082      	sub	sp, #8
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80031b4:	46c0      	nop			@ (mov r8, r8)
 80031b6:	46bd      	mov	sp, r7
 80031b8:	b002      	add	sp, #8
 80031ba:	bd80      	pop	{r7, pc}

080031bc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b082      	sub	sp, #8
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80031c4:	46c0      	nop			@ (mov r8, r8)
 80031c6:	46bd      	mov	sp, r7
 80031c8:	b002      	add	sp, #8
 80031ca:	bd80      	pop	{r7, pc}

080031cc <siprintf>:
 80031cc:	b40e      	push	{r1, r2, r3}
 80031ce:	b510      	push	{r4, lr}
 80031d0:	2400      	movs	r4, #0
 80031d2:	490c      	ldr	r1, [pc, #48]	@ (8003204 <siprintf+0x38>)
 80031d4:	b09d      	sub	sp, #116	@ 0x74
 80031d6:	ab1f      	add	r3, sp, #124	@ 0x7c
 80031d8:	9002      	str	r0, [sp, #8]
 80031da:	9006      	str	r0, [sp, #24]
 80031dc:	9107      	str	r1, [sp, #28]
 80031de:	9104      	str	r1, [sp, #16]
 80031e0:	4809      	ldr	r0, [pc, #36]	@ (8003208 <siprintf+0x3c>)
 80031e2:	490a      	ldr	r1, [pc, #40]	@ (800320c <siprintf+0x40>)
 80031e4:	cb04      	ldmia	r3!, {r2}
 80031e6:	9105      	str	r1, [sp, #20]
 80031e8:	6800      	ldr	r0, [r0, #0]
 80031ea:	a902      	add	r1, sp, #8
 80031ec:	9301      	str	r3, [sp, #4]
 80031ee:	941b      	str	r4, [sp, #108]	@ 0x6c
 80031f0:	f000 f8a2 	bl	8003338 <_svfiprintf_r>
 80031f4:	9b02      	ldr	r3, [sp, #8]
 80031f6:	701c      	strb	r4, [r3, #0]
 80031f8:	b01d      	add	sp, #116	@ 0x74
 80031fa:	bc10      	pop	{r4}
 80031fc:	bc08      	pop	{r3}
 80031fe:	b003      	add	sp, #12
 8003200:	4718      	bx	r3
 8003202:	46c0      	nop			@ (mov r8, r8)
 8003204:	7fffffff 	.word	0x7fffffff
 8003208:	2000001c 	.word	0x2000001c
 800320c:	ffff0208 	.word	0xffff0208

08003210 <memset>:
 8003210:	0003      	movs	r3, r0
 8003212:	1882      	adds	r2, r0, r2
 8003214:	4293      	cmp	r3, r2
 8003216:	d100      	bne.n	800321a <memset+0xa>
 8003218:	4770      	bx	lr
 800321a:	7019      	strb	r1, [r3, #0]
 800321c:	3301      	adds	r3, #1
 800321e:	e7f9      	b.n	8003214 <memset+0x4>

08003220 <__errno>:
 8003220:	4b01      	ldr	r3, [pc, #4]	@ (8003228 <__errno+0x8>)
 8003222:	6818      	ldr	r0, [r3, #0]
 8003224:	4770      	bx	lr
 8003226:	46c0      	nop			@ (mov r8, r8)
 8003228:	2000001c 	.word	0x2000001c

0800322c <__libc_init_array>:
 800322c:	b570      	push	{r4, r5, r6, lr}
 800322e:	2600      	movs	r6, #0
 8003230:	4c0c      	ldr	r4, [pc, #48]	@ (8003264 <__libc_init_array+0x38>)
 8003232:	4d0d      	ldr	r5, [pc, #52]	@ (8003268 <__libc_init_array+0x3c>)
 8003234:	1b64      	subs	r4, r4, r5
 8003236:	10a4      	asrs	r4, r4, #2
 8003238:	42a6      	cmp	r6, r4
 800323a:	d109      	bne.n	8003250 <__libc_init_array+0x24>
 800323c:	2600      	movs	r6, #0
 800323e:	f000 fc61 	bl	8003b04 <_init>
 8003242:	4c0a      	ldr	r4, [pc, #40]	@ (800326c <__libc_init_array+0x40>)
 8003244:	4d0a      	ldr	r5, [pc, #40]	@ (8003270 <__libc_init_array+0x44>)
 8003246:	1b64      	subs	r4, r4, r5
 8003248:	10a4      	asrs	r4, r4, #2
 800324a:	42a6      	cmp	r6, r4
 800324c:	d105      	bne.n	800325a <__libc_init_array+0x2e>
 800324e:	bd70      	pop	{r4, r5, r6, pc}
 8003250:	00b3      	lsls	r3, r6, #2
 8003252:	58eb      	ldr	r3, [r5, r3]
 8003254:	4798      	blx	r3
 8003256:	3601      	adds	r6, #1
 8003258:	e7ee      	b.n	8003238 <__libc_init_array+0xc>
 800325a:	00b3      	lsls	r3, r6, #2
 800325c:	58eb      	ldr	r3, [r5, r3]
 800325e:	4798      	blx	r3
 8003260:	3601      	adds	r6, #1
 8003262:	e7f2      	b.n	800324a <__libc_init_array+0x1e>
 8003264:	08003bd4 	.word	0x08003bd4
 8003268:	08003bd4 	.word	0x08003bd4
 800326c:	08003bd8 	.word	0x08003bd8
 8003270:	08003bd4 	.word	0x08003bd4

08003274 <__retarget_lock_acquire_recursive>:
 8003274:	4770      	bx	lr

08003276 <__retarget_lock_release_recursive>:
 8003276:	4770      	bx	lr

08003278 <__ssputs_r>:
 8003278:	b5f0      	push	{r4, r5, r6, r7, lr}
 800327a:	688e      	ldr	r6, [r1, #8]
 800327c:	b085      	sub	sp, #20
 800327e:	001f      	movs	r7, r3
 8003280:	000c      	movs	r4, r1
 8003282:	680b      	ldr	r3, [r1, #0]
 8003284:	9002      	str	r0, [sp, #8]
 8003286:	9203      	str	r2, [sp, #12]
 8003288:	42be      	cmp	r6, r7
 800328a:	d830      	bhi.n	80032ee <__ssputs_r+0x76>
 800328c:	210c      	movs	r1, #12
 800328e:	5e62      	ldrsh	r2, [r4, r1]
 8003290:	2190      	movs	r1, #144	@ 0x90
 8003292:	00c9      	lsls	r1, r1, #3
 8003294:	420a      	tst	r2, r1
 8003296:	d028      	beq.n	80032ea <__ssputs_r+0x72>
 8003298:	2003      	movs	r0, #3
 800329a:	6921      	ldr	r1, [r4, #16]
 800329c:	1a5b      	subs	r3, r3, r1
 800329e:	9301      	str	r3, [sp, #4]
 80032a0:	6963      	ldr	r3, [r4, #20]
 80032a2:	4343      	muls	r3, r0
 80032a4:	9801      	ldr	r0, [sp, #4]
 80032a6:	0fdd      	lsrs	r5, r3, #31
 80032a8:	18ed      	adds	r5, r5, r3
 80032aa:	1c7b      	adds	r3, r7, #1
 80032ac:	181b      	adds	r3, r3, r0
 80032ae:	106d      	asrs	r5, r5, #1
 80032b0:	42ab      	cmp	r3, r5
 80032b2:	d900      	bls.n	80032b6 <__ssputs_r+0x3e>
 80032b4:	001d      	movs	r5, r3
 80032b6:	0552      	lsls	r2, r2, #21
 80032b8:	d528      	bpl.n	800330c <__ssputs_r+0x94>
 80032ba:	0029      	movs	r1, r5
 80032bc:	9802      	ldr	r0, [sp, #8]
 80032be:	f000 f95b 	bl	8003578 <_malloc_r>
 80032c2:	1e06      	subs	r6, r0, #0
 80032c4:	d02c      	beq.n	8003320 <__ssputs_r+0xa8>
 80032c6:	9a01      	ldr	r2, [sp, #4]
 80032c8:	6921      	ldr	r1, [r4, #16]
 80032ca:	f000 fbc0 	bl	8003a4e <memcpy>
 80032ce:	89a2      	ldrh	r2, [r4, #12]
 80032d0:	4b18      	ldr	r3, [pc, #96]	@ (8003334 <__ssputs_r+0xbc>)
 80032d2:	401a      	ands	r2, r3
 80032d4:	2380      	movs	r3, #128	@ 0x80
 80032d6:	4313      	orrs	r3, r2
 80032d8:	81a3      	strh	r3, [r4, #12]
 80032da:	9b01      	ldr	r3, [sp, #4]
 80032dc:	6126      	str	r6, [r4, #16]
 80032de:	18f6      	adds	r6, r6, r3
 80032e0:	6026      	str	r6, [r4, #0]
 80032e2:	003e      	movs	r6, r7
 80032e4:	6165      	str	r5, [r4, #20]
 80032e6:	1aed      	subs	r5, r5, r3
 80032e8:	60a5      	str	r5, [r4, #8]
 80032ea:	42be      	cmp	r6, r7
 80032ec:	d900      	bls.n	80032f0 <__ssputs_r+0x78>
 80032ee:	003e      	movs	r6, r7
 80032f0:	0032      	movs	r2, r6
 80032f2:	9903      	ldr	r1, [sp, #12]
 80032f4:	6820      	ldr	r0, [r4, #0]
 80032f6:	f000 fb7b 	bl	80039f0 <memmove>
 80032fa:	2000      	movs	r0, #0
 80032fc:	68a3      	ldr	r3, [r4, #8]
 80032fe:	1b9b      	subs	r3, r3, r6
 8003300:	60a3      	str	r3, [r4, #8]
 8003302:	6823      	ldr	r3, [r4, #0]
 8003304:	199b      	adds	r3, r3, r6
 8003306:	6023      	str	r3, [r4, #0]
 8003308:	b005      	add	sp, #20
 800330a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800330c:	002a      	movs	r2, r5
 800330e:	9802      	ldr	r0, [sp, #8]
 8003310:	f000 fb3e 	bl	8003990 <_realloc_r>
 8003314:	1e06      	subs	r6, r0, #0
 8003316:	d1e0      	bne.n	80032da <__ssputs_r+0x62>
 8003318:	6921      	ldr	r1, [r4, #16]
 800331a:	9802      	ldr	r0, [sp, #8]
 800331c:	f000 fba0 	bl	8003a60 <_free_r>
 8003320:	230c      	movs	r3, #12
 8003322:	2001      	movs	r0, #1
 8003324:	9a02      	ldr	r2, [sp, #8]
 8003326:	4240      	negs	r0, r0
 8003328:	6013      	str	r3, [r2, #0]
 800332a:	89a2      	ldrh	r2, [r4, #12]
 800332c:	3334      	adds	r3, #52	@ 0x34
 800332e:	4313      	orrs	r3, r2
 8003330:	81a3      	strh	r3, [r4, #12]
 8003332:	e7e9      	b.n	8003308 <__ssputs_r+0x90>
 8003334:	fffffb7f 	.word	0xfffffb7f

08003338 <_svfiprintf_r>:
 8003338:	b5f0      	push	{r4, r5, r6, r7, lr}
 800333a:	b0a1      	sub	sp, #132	@ 0x84
 800333c:	9003      	str	r0, [sp, #12]
 800333e:	001d      	movs	r5, r3
 8003340:	898b      	ldrh	r3, [r1, #12]
 8003342:	000f      	movs	r7, r1
 8003344:	0016      	movs	r6, r2
 8003346:	061b      	lsls	r3, r3, #24
 8003348:	d511      	bpl.n	800336e <_svfiprintf_r+0x36>
 800334a:	690b      	ldr	r3, [r1, #16]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d10e      	bne.n	800336e <_svfiprintf_r+0x36>
 8003350:	2140      	movs	r1, #64	@ 0x40
 8003352:	f000 f911 	bl	8003578 <_malloc_r>
 8003356:	6038      	str	r0, [r7, #0]
 8003358:	6138      	str	r0, [r7, #16]
 800335a:	2800      	cmp	r0, #0
 800335c:	d105      	bne.n	800336a <_svfiprintf_r+0x32>
 800335e:	230c      	movs	r3, #12
 8003360:	9a03      	ldr	r2, [sp, #12]
 8003362:	6013      	str	r3, [r2, #0]
 8003364:	2001      	movs	r0, #1
 8003366:	4240      	negs	r0, r0
 8003368:	e0cf      	b.n	800350a <_svfiprintf_r+0x1d2>
 800336a:	2340      	movs	r3, #64	@ 0x40
 800336c:	617b      	str	r3, [r7, #20]
 800336e:	2300      	movs	r3, #0
 8003370:	ac08      	add	r4, sp, #32
 8003372:	6163      	str	r3, [r4, #20]
 8003374:	3320      	adds	r3, #32
 8003376:	7663      	strb	r3, [r4, #25]
 8003378:	3310      	adds	r3, #16
 800337a:	76a3      	strb	r3, [r4, #26]
 800337c:	9507      	str	r5, [sp, #28]
 800337e:	0035      	movs	r5, r6
 8003380:	782b      	ldrb	r3, [r5, #0]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d001      	beq.n	800338a <_svfiprintf_r+0x52>
 8003386:	2b25      	cmp	r3, #37	@ 0x25
 8003388:	d148      	bne.n	800341c <_svfiprintf_r+0xe4>
 800338a:	1bab      	subs	r3, r5, r6
 800338c:	9305      	str	r3, [sp, #20]
 800338e:	42b5      	cmp	r5, r6
 8003390:	d00b      	beq.n	80033aa <_svfiprintf_r+0x72>
 8003392:	0032      	movs	r2, r6
 8003394:	0039      	movs	r1, r7
 8003396:	9803      	ldr	r0, [sp, #12]
 8003398:	f7ff ff6e 	bl	8003278 <__ssputs_r>
 800339c:	3001      	adds	r0, #1
 800339e:	d100      	bne.n	80033a2 <_svfiprintf_r+0x6a>
 80033a0:	e0ae      	b.n	8003500 <_svfiprintf_r+0x1c8>
 80033a2:	6963      	ldr	r3, [r4, #20]
 80033a4:	9a05      	ldr	r2, [sp, #20]
 80033a6:	189b      	adds	r3, r3, r2
 80033a8:	6163      	str	r3, [r4, #20]
 80033aa:	782b      	ldrb	r3, [r5, #0]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d100      	bne.n	80033b2 <_svfiprintf_r+0x7a>
 80033b0:	e0a6      	b.n	8003500 <_svfiprintf_r+0x1c8>
 80033b2:	2201      	movs	r2, #1
 80033b4:	2300      	movs	r3, #0
 80033b6:	4252      	negs	r2, r2
 80033b8:	6062      	str	r2, [r4, #4]
 80033ba:	a904      	add	r1, sp, #16
 80033bc:	3254      	adds	r2, #84	@ 0x54
 80033be:	1852      	adds	r2, r2, r1
 80033c0:	1c6e      	adds	r6, r5, #1
 80033c2:	6023      	str	r3, [r4, #0]
 80033c4:	60e3      	str	r3, [r4, #12]
 80033c6:	60a3      	str	r3, [r4, #8]
 80033c8:	7013      	strb	r3, [r2, #0]
 80033ca:	65a3      	str	r3, [r4, #88]	@ 0x58
 80033cc:	4b54      	ldr	r3, [pc, #336]	@ (8003520 <_svfiprintf_r+0x1e8>)
 80033ce:	2205      	movs	r2, #5
 80033d0:	0018      	movs	r0, r3
 80033d2:	7831      	ldrb	r1, [r6, #0]
 80033d4:	9305      	str	r3, [sp, #20]
 80033d6:	f000 fb2f 	bl	8003a38 <memchr>
 80033da:	1c75      	adds	r5, r6, #1
 80033dc:	2800      	cmp	r0, #0
 80033de:	d11f      	bne.n	8003420 <_svfiprintf_r+0xe8>
 80033e0:	6822      	ldr	r2, [r4, #0]
 80033e2:	06d3      	lsls	r3, r2, #27
 80033e4:	d504      	bpl.n	80033f0 <_svfiprintf_r+0xb8>
 80033e6:	2353      	movs	r3, #83	@ 0x53
 80033e8:	a904      	add	r1, sp, #16
 80033ea:	185b      	adds	r3, r3, r1
 80033ec:	2120      	movs	r1, #32
 80033ee:	7019      	strb	r1, [r3, #0]
 80033f0:	0713      	lsls	r3, r2, #28
 80033f2:	d504      	bpl.n	80033fe <_svfiprintf_r+0xc6>
 80033f4:	2353      	movs	r3, #83	@ 0x53
 80033f6:	a904      	add	r1, sp, #16
 80033f8:	185b      	adds	r3, r3, r1
 80033fa:	212b      	movs	r1, #43	@ 0x2b
 80033fc:	7019      	strb	r1, [r3, #0]
 80033fe:	7833      	ldrb	r3, [r6, #0]
 8003400:	2b2a      	cmp	r3, #42	@ 0x2a
 8003402:	d016      	beq.n	8003432 <_svfiprintf_r+0xfa>
 8003404:	0035      	movs	r5, r6
 8003406:	2100      	movs	r1, #0
 8003408:	200a      	movs	r0, #10
 800340a:	68e3      	ldr	r3, [r4, #12]
 800340c:	782a      	ldrb	r2, [r5, #0]
 800340e:	1c6e      	adds	r6, r5, #1
 8003410:	3a30      	subs	r2, #48	@ 0x30
 8003412:	2a09      	cmp	r2, #9
 8003414:	d950      	bls.n	80034b8 <_svfiprintf_r+0x180>
 8003416:	2900      	cmp	r1, #0
 8003418:	d111      	bne.n	800343e <_svfiprintf_r+0x106>
 800341a:	e017      	b.n	800344c <_svfiprintf_r+0x114>
 800341c:	3501      	adds	r5, #1
 800341e:	e7af      	b.n	8003380 <_svfiprintf_r+0x48>
 8003420:	9b05      	ldr	r3, [sp, #20]
 8003422:	6822      	ldr	r2, [r4, #0]
 8003424:	1ac0      	subs	r0, r0, r3
 8003426:	2301      	movs	r3, #1
 8003428:	4083      	lsls	r3, r0
 800342a:	4313      	orrs	r3, r2
 800342c:	002e      	movs	r6, r5
 800342e:	6023      	str	r3, [r4, #0]
 8003430:	e7cc      	b.n	80033cc <_svfiprintf_r+0x94>
 8003432:	9b07      	ldr	r3, [sp, #28]
 8003434:	1d19      	adds	r1, r3, #4
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	9107      	str	r1, [sp, #28]
 800343a:	2b00      	cmp	r3, #0
 800343c:	db01      	blt.n	8003442 <_svfiprintf_r+0x10a>
 800343e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003440:	e004      	b.n	800344c <_svfiprintf_r+0x114>
 8003442:	425b      	negs	r3, r3
 8003444:	60e3      	str	r3, [r4, #12]
 8003446:	2302      	movs	r3, #2
 8003448:	4313      	orrs	r3, r2
 800344a:	6023      	str	r3, [r4, #0]
 800344c:	782b      	ldrb	r3, [r5, #0]
 800344e:	2b2e      	cmp	r3, #46	@ 0x2e
 8003450:	d10c      	bne.n	800346c <_svfiprintf_r+0x134>
 8003452:	786b      	ldrb	r3, [r5, #1]
 8003454:	2b2a      	cmp	r3, #42	@ 0x2a
 8003456:	d134      	bne.n	80034c2 <_svfiprintf_r+0x18a>
 8003458:	9b07      	ldr	r3, [sp, #28]
 800345a:	3502      	adds	r5, #2
 800345c:	1d1a      	adds	r2, r3, #4
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	9207      	str	r2, [sp, #28]
 8003462:	2b00      	cmp	r3, #0
 8003464:	da01      	bge.n	800346a <_svfiprintf_r+0x132>
 8003466:	2301      	movs	r3, #1
 8003468:	425b      	negs	r3, r3
 800346a:	9309      	str	r3, [sp, #36]	@ 0x24
 800346c:	4e2d      	ldr	r6, [pc, #180]	@ (8003524 <_svfiprintf_r+0x1ec>)
 800346e:	2203      	movs	r2, #3
 8003470:	0030      	movs	r0, r6
 8003472:	7829      	ldrb	r1, [r5, #0]
 8003474:	f000 fae0 	bl	8003a38 <memchr>
 8003478:	2800      	cmp	r0, #0
 800347a:	d006      	beq.n	800348a <_svfiprintf_r+0x152>
 800347c:	2340      	movs	r3, #64	@ 0x40
 800347e:	1b80      	subs	r0, r0, r6
 8003480:	4083      	lsls	r3, r0
 8003482:	6822      	ldr	r2, [r4, #0]
 8003484:	3501      	adds	r5, #1
 8003486:	4313      	orrs	r3, r2
 8003488:	6023      	str	r3, [r4, #0]
 800348a:	7829      	ldrb	r1, [r5, #0]
 800348c:	2206      	movs	r2, #6
 800348e:	4826      	ldr	r0, [pc, #152]	@ (8003528 <_svfiprintf_r+0x1f0>)
 8003490:	1c6e      	adds	r6, r5, #1
 8003492:	7621      	strb	r1, [r4, #24]
 8003494:	f000 fad0 	bl	8003a38 <memchr>
 8003498:	2800      	cmp	r0, #0
 800349a:	d038      	beq.n	800350e <_svfiprintf_r+0x1d6>
 800349c:	4b23      	ldr	r3, [pc, #140]	@ (800352c <_svfiprintf_r+0x1f4>)
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d122      	bne.n	80034e8 <_svfiprintf_r+0x1b0>
 80034a2:	2207      	movs	r2, #7
 80034a4:	9b07      	ldr	r3, [sp, #28]
 80034a6:	3307      	adds	r3, #7
 80034a8:	4393      	bics	r3, r2
 80034aa:	3308      	adds	r3, #8
 80034ac:	9307      	str	r3, [sp, #28]
 80034ae:	6963      	ldr	r3, [r4, #20]
 80034b0:	9a04      	ldr	r2, [sp, #16]
 80034b2:	189b      	adds	r3, r3, r2
 80034b4:	6163      	str	r3, [r4, #20]
 80034b6:	e762      	b.n	800337e <_svfiprintf_r+0x46>
 80034b8:	4343      	muls	r3, r0
 80034ba:	0035      	movs	r5, r6
 80034bc:	2101      	movs	r1, #1
 80034be:	189b      	adds	r3, r3, r2
 80034c0:	e7a4      	b.n	800340c <_svfiprintf_r+0xd4>
 80034c2:	2300      	movs	r3, #0
 80034c4:	200a      	movs	r0, #10
 80034c6:	0019      	movs	r1, r3
 80034c8:	3501      	adds	r5, #1
 80034ca:	6063      	str	r3, [r4, #4]
 80034cc:	782a      	ldrb	r2, [r5, #0]
 80034ce:	1c6e      	adds	r6, r5, #1
 80034d0:	3a30      	subs	r2, #48	@ 0x30
 80034d2:	2a09      	cmp	r2, #9
 80034d4:	d903      	bls.n	80034de <_svfiprintf_r+0x1a6>
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d0c8      	beq.n	800346c <_svfiprintf_r+0x134>
 80034da:	9109      	str	r1, [sp, #36]	@ 0x24
 80034dc:	e7c6      	b.n	800346c <_svfiprintf_r+0x134>
 80034de:	4341      	muls	r1, r0
 80034e0:	0035      	movs	r5, r6
 80034e2:	2301      	movs	r3, #1
 80034e4:	1889      	adds	r1, r1, r2
 80034e6:	e7f1      	b.n	80034cc <_svfiprintf_r+0x194>
 80034e8:	aa07      	add	r2, sp, #28
 80034ea:	9200      	str	r2, [sp, #0]
 80034ec:	0021      	movs	r1, r4
 80034ee:	003a      	movs	r2, r7
 80034f0:	4b0f      	ldr	r3, [pc, #60]	@ (8003530 <_svfiprintf_r+0x1f8>)
 80034f2:	9803      	ldr	r0, [sp, #12]
 80034f4:	e000      	b.n	80034f8 <_svfiprintf_r+0x1c0>
 80034f6:	bf00      	nop
 80034f8:	9004      	str	r0, [sp, #16]
 80034fa:	9b04      	ldr	r3, [sp, #16]
 80034fc:	3301      	adds	r3, #1
 80034fe:	d1d6      	bne.n	80034ae <_svfiprintf_r+0x176>
 8003500:	89bb      	ldrh	r3, [r7, #12]
 8003502:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8003504:	065b      	lsls	r3, r3, #25
 8003506:	d500      	bpl.n	800350a <_svfiprintf_r+0x1d2>
 8003508:	e72c      	b.n	8003364 <_svfiprintf_r+0x2c>
 800350a:	b021      	add	sp, #132	@ 0x84
 800350c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800350e:	aa07      	add	r2, sp, #28
 8003510:	9200      	str	r2, [sp, #0]
 8003512:	0021      	movs	r1, r4
 8003514:	003a      	movs	r2, r7
 8003516:	4b06      	ldr	r3, [pc, #24]	@ (8003530 <_svfiprintf_r+0x1f8>)
 8003518:	9803      	ldr	r0, [sp, #12]
 800351a:	f000 f91d 	bl	8003758 <_printf_i>
 800351e:	e7eb      	b.n	80034f8 <_svfiprintf_r+0x1c0>
 8003520:	08003ba0 	.word	0x08003ba0
 8003524:	08003ba6 	.word	0x08003ba6
 8003528:	08003baa 	.word	0x08003baa
 800352c:	00000000 	.word	0x00000000
 8003530:	08003279 	.word	0x08003279

08003534 <sbrk_aligned>:
 8003534:	b570      	push	{r4, r5, r6, lr}
 8003536:	4e0f      	ldr	r6, [pc, #60]	@ (8003574 <sbrk_aligned+0x40>)
 8003538:	000d      	movs	r5, r1
 800353a:	6831      	ldr	r1, [r6, #0]
 800353c:	0004      	movs	r4, r0
 800353e:	2900      	cmp	r1, #0
 8003540:	d102      	bne.n	8003548 <sbrk_aligned+0x14>
 8003542:	f000 fa67 	bl	8003a14 <_sbrk_r>
 8003546:	6030      	str	r0, [r6, #0]
 8003548:	0029      	movs	r1, r5
 800354a:	0020      	movs	r0, r4
 800354c:	f000 fa62 	bl	8003a14 <_sbrk_r>
 8003550:	1c43      	adds	r3, r0, #1
 8003552:	d103      	bne.n	800355c <sbrk_aligned+0x28>
 8003554:	2501      	movs	r5, #1
 8003556:	426d      	negs	r5, r5
 8003558:	0028      	movs	r0, r5
 800355a:	bd70      	pop	{r4, r5, r6, pc}
 800355c:	2303      	movs	r3, #3
 800355e:	1cc5      	adds	r5, r0, #3
 8003560:	439d      	bics	r5, r3
 8003562:	42a8      	cmp	r0, r5
 8003564:	d0f8      	beq.n	8003558 <sbrk_aligned+0x24>
 8003566:	1a29      	subs	r1, r5, r0
 8003568:	0020      	movs	r0, r4
 800356a:	f000 fa53 	bl	8003a14 <_sbrk_r>
 800356e:	3001      	adds	r0, #1
 8003570:	d1f2      	bne.n	8003558 <sbrk_aligned+0x24>
 8003572:	e7ef      	b.n	8003554 <sbrk_aligned+0x20>
 8003574:	20000278 	.word	0x20000278

08003578 <_malloc_r>:
 8003578:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800357a:	2203      	movs	r2, #3
 800357c:	1ccb      	adds	r3, r1, #3
 800357e:	4393      	bics	r3, r2
 8003580:	3308      	adds	r3, #8
 8003582:	0005      	movs	r5, r0
 8003584:	001f      	movs	r7, r3
 8003586:	2b0c      	cmp	r3, #12
 8003588:	d234      	bcs.n	80035f4 <_malloc_r+0x7c>
 800358a:	270c      	movs	r7, #12
 800358c:	42b9      	cmp	r1, r7
 800358e:	d833      	bhi.n	80035f8 <_malloc_r+0x80>
 8003590:	0028      	movs	r0, r5
 8003592:	f000 f9ed 	bl	8003970 <__malloc_lock>
 8003596:	4e37      	ldr	r6, [pc, #220]	@ (8003674 <_malloc_r+0xfc>)
 8003598:	6833      	ldr	r3, [r6, #0]
 800359a:	001c      	movs	r4, r3
 800359c:	2c00      	cmp	r4, #0
 800359e:	d12f      	bne.n	8003600 <_malloc_r+0x88>
 80035a0:	0039      	movs	r1, r7
 80035a2:	0028      	movs	r0, r5
 80035a4:	f7ff ffc6 	bl	8003534 <sbrk_aligned>
 80035a8:	0004      	movs	r4, r0
 80035aa:	1c43      	adds	r3, r0, #1
 80035ac:	d15f      	bne.n	800366e <_malloc_r+0xf6>
 80035ae:	6834      	ldr	r4, [r6, #0]
 80035b0:	9400      	str	r4, [sp, #0]
 80035b2:	9b00      	ldr	r3, [sp, #0]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d14a      	bne.n	800364e <_malloc_r+0xd6>
 80035b8:	2c00      	cmp	r4, #0
 80035ba:	d052      	beq.n	8003662 <_malloc_r+0xea>
 80035bc:	6823      	ldr	r3, [r4, #0]
 80035be:	0028      	movs	r0, r5
 80035c0:	18e3      	adds	r3, r4, r3
 80035c2:	9900      	ldr	r1, [sp, #0]
 80035c4:	9301      	str	r3, [sp, #4]
 80035c6:	f000 fa25 	bl	8003a14 <_sbrk_r>
 80035ca:	9b01      	ldr	r3, [sp, #4]
 80035cc:	4283      	cmp	r3, r0
 80035ce:	d148      	bne.n	8003662 <_malloc_r+0xea>
 80035d0:	6823      	ldr	r3, [r4, #0]
 80035d2:	0028      	movs	r0, r5
 80035d4:	1aff      	subs	r7, r7, r3
 80035d6:	0039      	movs	r1, r7
 80035d8:	f7ff ffac 	bl	8003534 <sbrk_aligned>
 80035dc:	3001      	adds	r0, #1
 80035de:	d040      	beq.n	8003662 <_malloc_r+0xea>
 80035e0:	6823      	ldr	r3, [r4, #0]
 80035e2:	19db      	adds	r3, r3, r7
 80035e4:	6023      	str	r3, [r4, #0]
 80035e6:	6833      	ldr	r3, [r6, #0]
 80035e8:	685a      	ldr	r2, [r3, #4]
 80035ea:	2a00      	cmp	r2, #0
 80035ec:	d133      	bne.n	8003656 <_malloc_r+0xde>
 80035ee:	9b00      	ldr	r3, [sp, #0]
 80035f0:	6033      	str	r3, [r6, #0]
 80035f2:	e019      	b.n	8003628 <_malloc_r+0xb0>
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	dac9      	bge.n	800358c <_malloc_r+0x14>
 80035f8:	230c      	movs	r3, #12
 80035fa:	602b      	str	r3, [r5, #0]
 80035fc:	2000      	movs	r0, #0
 80035fe:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003600:	6821      	ldr	r1, [r4, #0]
 8003602:	1bc9      	subs	r1, r1, r7
 8003604:	d420      	bmi.n	8003648 <_malloc_r+0xd0>
 8003606:	290b      	cmp	r1, #11
 8003608:	d90a      	bls.n	8003620 <_malloc_r+0xa8>
 800360a:	19e2      	adds	r2, r4, r7
 800360c:	6027      	str	r7, [r4, #0]
 800360e:	42a3      	cmp	r3, r4
 8003610:	d104      	bne.n	800361c <_malloc_r+0xa4>
 8003612:	6032      	str	r2, [r6, #0]
 8003614:	6863      	ldr	r3, [r4, #4]
 8003616:	6011      	str	r1, [r2, #0]
 8003618:	6053      	str	r3, [r2, #4]
 800361a:	e005      	b.n	8003628 <_malloc_r+0xb0>
 800361c:	605a      	str	r2, [r3, #4]
 800361e:	e7f9      	b.n	8003614 <_malloc_r+0x9c>
 8003620:	6862      	ldr	r2, [r4, #4]
 8003622:	42a3      	cmp	r3, r4
 8003624:	d10e      	bne.n	8003644 <_malloc_r+0xcc>
 8003626:	6032      	str	r2, [r6, #0]
 8003628:	0028      	movs	r0, r5
 800362a:	f000 f9a9 	bl	8003980 <__malloc_unlock>
 800362e:	0020      	movs	r0, r4
 8003630:	2207      	movs	r2, #7
 8003632:	300b      	adds	r0, #11
 8003634:	1d23      	adds	r3, r4, #4
 8003636:	4390      	bics	r0, r2
 8003638:	1ac2      	subs	r2, r0, r3
 800363a:	4298      	cmp	r0, r3
 800363c:	d0df      	beq.n	80035fe <_malloc_r+0x86>
 800363e:	1a1b      	subs	r3, r3, r0
 8003640:	50a3      	str	r3, [r4, r2]
 8003642:	e7dc      	b.n	80035fe <_malloc_r+0x86>
 8003644:	605a      	str	r2, [r3, #4]
 8003646:	e7ef      	b.n	8003628 <_malloc_r+0xb0>
 8003648:	0023      	movs	r3, r4
 800364a:	6864      	ldr	r4, [r4, #4]
 800364c:	e7a6      	b.n	800359c <_malloc_r+0x24>
 800364e:	9c00      	ldr	r4, [sp, #0]
 8003650:	6863      	ldr	r3, [r4, #4]
 8003652:	9300      	str	r3, [sp, #0]
 8003654:	e7ad      	b.n	80035b2 <_malloc_r+0x3a>
 8003656:	001a      	movs	r2, r3
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	42a3      	cmp	r3, r4
 800365c:	d1fb      	bne.n	8003656 <_malloc_r+0xde>
 800365e:	2300      	movs	r3, #0
 8003660:	e7da      	b.n	8003618 <_malloc_r+0xa0>
 8003662:	230c      	movs	r3, #12
 8003664:	0028      	movs	r0, r5
 8003666:	602b      	str	r3, [r5, #0]
 8003668:	f000 f98a 	bl	8003980 <__malloc_unlock>
 800366c:	e7c6      	b.n	80035fc <_malloc_r+0x84>
 800366e:	6007      	str	r7, [r0, #0]
 8003670:	e7da      	b.n	8003628 <_malloc_r+0xb0>
 8003672:	46c0      	nop			@ (mov r8, r8)
 8003674:	2000027c 	.word	0x2000027c

08003678 <_printf_common>:
 8003678:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800367a:	0016      	movs	r6, r2
 800367c:	9301      	str	r3, [sp, #4]
 800367e:	688a      	ldr	r2, [r1, #8]
 8003680:	690b      	ldr	r3, [r1, #16]
 8003682:	000c      	movs	r4, r1
 8003684:	9000      	str	r0, [sp, #0]
 8003686:	4293      	cmp	r3, r2
 8003688:	da00      	bge.n	800368c <_printf_common+0x14>
 800368a:	0013      	movs	r3, r2
 800368c:	0022      	movs	r2, r4
 800368e:	6033      	str	r3, [r6, #0]
 8003690:	3243      	adds	r2, #67	@ 0x43
 8003692:	7812      	ldrb	r2, [r2, #0]
 8003694:	2a00      	cmp	r2, #0
 8003696:	d001      	beq.n	800369c <_printf_common+0x24>
 8003698:	3301      	adds	r3, #1
 800369a:	6033      	str	r3, [r6, #0]
 800369c:	6823      	ldr	r3, [r4, #0]
 800369e:	069b      	lsls	r3, r3, #26
 80036a0:	d502      	bpl.n	80036a8 <_printf_common+0x30>
 80036a2:	6833      	ldr	r3, [r6, #0]
 80036a4:	3302      	adds	r3, #2
 80036a6:	6033      	str	r3, [r6, #0]
 80036a8:	6822      	ldr	r2, [r4, #0]
 80036aa:	2306      	movs	r3, #6
 80036ac:	0015      	movs	r5, r2
 80036ae:	401d      	ands	r5, r3
 80036b0:	421a      	tst	r2, r3
 80036b2:	d027      	beq.n	8003704 <_printf_common+0x8c>
 80036b4:	0023      	movs	r3, r4
 80036b6:	3343      	adds	r3, #67	@ 0x43
 80036b8:	781b      	ldrb	r3, [r3, #0]
 80036ba:	1e5a      	subs	r2, r3, #1
 80036bc:	4193      	sbcs	r3, r2
 80036be:	6822      	ldr	r2, [r4, #0]
 80036c0:	0692      	lsls	r2, r2, #26
 80036c2:	d430      	bmi.n	8003726 <_printf_common+0xae>
 80036c4:	0022      	movs	r2, r4
 80036c6:	9901      	ldr	r1, [sp, #4]
 80036c8:	9800      	ldr	r0, [sp, #0]
 80036ca:	9d08      	ldr	r5, [sp, #32]
 80036cc:	3243      	adds	r2, #67	@ 0x43
 80036ce:	47a8      	blx	r5
 80036d0:	3001      	adds	r0, #1
 80036d2:	d025      	beq.n	8003720 <_printf_common+0xa8>
 80036d4:	2206      	movs	r2, #6
 80036d6:	6823      	ldr	r3, [r4, #0]
 80036d8:	2500      	movs	r5, #0
 80036da:	4013      	ands	r3, r2
 80036dc:	2b04      	cmp	r3, #4
 80036de:	d105      	bne.n	80036ec <_printf_common+0x74>
 80036e0:	6833      	ldr	r3, [r6, #0]
 80036e2:	68e5      	ldr	r5, [r4, #12]
 80036e4:	1aed      	subs	r5, r5, r3
 80036e6:	43eb      	mvns	r3, r5
 80036e8:	17db      	asrs	r3, r3, #31
 80036ea:	401d      	ands	r5, r3
 80036ec:	68a3      	ldr	r3, [r4, #8]
 80036ee:	6922      	ldr	r2, [r4, #16]
 80036f0:	4293      	cmp	r3, r2
 80036f2:	dd01      	ble.n	80036f8 <_printf_common+0x80>
 80036f4:	1a9b      	subs	r3, r3, r2
 80036f6:	18ed      	adds	r5, r5, r3
 80036f8:	2600      	movs	r6, #0
 80036fa:	42b5      	cmp	r5, r6
 80036fc:	d120      	bne.n	8003740 <_printf_common+0xc8>
 80036fe:	2000      	movs	r0, #0
 8003700:	e010      	b.n	8003724 <_printf_common+0xac>
 8003702:	3501      	adds	r5, #1
 8003704:	68e3      	ldr	r3, [r4, #12]
 8003706:	6832      	ldr	r2, [r6, #0]
 8003708:	1a9b      	subs	r3, r3, r2
 800370a:	42ab      	cmp	r3, r5
 800370c:	ddd2      	ble.n	80036b4 <_printf_common+0x3c>
 800370e:	0022      	movs	r2, r4
 8003710:	2301      	movs	r3, #1
 8003712:	9901      	ldr	r1, [sp, #4]
 8003714:	9800      	ldr	r0, [sp, #0]
 8003716:	9f08      	ldr	r7, [sp, #32]
 8003718:	3219      	adds	r2, #25
 800371a:	47b8      	blx	r7
 800371c:	3001      	adds	r0, #1
 800371e:	d1f0      	bne.n	8003702 <_printf_common+0x8a>
 8003720:	2001      	movs	r0, #1
 8003722:	4240      	negs	r0, r0
 8003724:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003726:	2030      	movs	r0, #48	@ 0x30
 8003728:	18e1      	adds	r1, r4, r3
 800372a:	3143      	adds	r1, #67	@ 0x43
 800372c:	7008      	strb	r0, [r1, #0]
 800372e:	0021      	movs	r1, r4
 8003730:	1c5a      	adds	r2, r3, #1
 8003732:	3145      	adds	r1, #69	@ 0x45
 8003734:	7809      	ldrb	r1, [r1, #0]
 8003736:	18a2      	adds	r2, r4, r2
 8003738:	3243      	adds	r2, #67	@ 0x43
 800373a:	3302      	adds	r3, #2
 800373c:	7011      	strb	r1, [r2, #0]
 800373e:	e7c1      	b.n	80036c4 <_printf_common+0x4c>
 8003740:	0022      	movs	r2, r4
 8003742:	2301      	movs	r3, #1
 8003744:	9901      	ldr	r1, [sp, #4]
 8003746:	9800      	ldr	r0, [sp, #0]
 8003748:	9f08      	ldr	r7, [sp, #32]
 800374a:	321a      	adds	r2, #26
 800374c:	47b8      	blx	r7
 800374e:	3001      	adds	r0, #1
 8003750:	d0e6      	beq.n	8003720 <_printf_common+0xa8>
 8003752:	3601      	adds	r6, #1
 8003754:	e7d1      	b.n	80036fa <_printf_common+0x82>
	...

08003758 <_printf_i>:
 8003758:	b5f0      	push	{r4, r5, r6, r7, lr}
 800375a:	b08b      	sub	sp, #44	@ 0x2c
 800375c:	9206      	str	r2, [sp, #24]
 800375e:	000a      	movs	r2, r1
 8003760:	3243      	adds	r2, #67	@ 0x43
 8003762:	9307      	str	r3, [sp, #28]
 8003764:	9005      	str	r0, [sp, #20]
 8003766:	9203      	str	r2, [sp, #12]
 8003768:	7e0a      	ldrb	r2, [r1, #24]
 800376a:	000c      	movs	r4, r1
 800376c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800376e:	2a78      	cmp	r2, #120	@ 0x78
 8003770:	d809      	bhi.n	8003786 <_printf_i+0x2e>
 8003772:	2a62      	cmp	r2, #98	@ 0x62
 8003774:	d80b      	bhi.n	800378e <_printf_i+0x36>
 8003776:	2a00      	cmp	r2, #0
 8003778:	d100      	bne.n	800377c <_printf_i+0x24>
 800377a:	e0ba      	b.n	80038f2 <_printf_i+0x19a>
 800377c:	497a      	ldr	r1, [pc, #488]	@ (8003968 <_printf_i+0x210>)
 800377e:	9104      	str	r1, [sp, #16]
 8003780:	2a58      	cmp	r2, #88	@ 0x58
 8003782:	d100      	bne.n	8003786 <_printf_i+0x2e>
 8003784:	e08e      	b.n	80038a4 <_printf_i+0x14c>
 8003786:	0025      	movs	r5, r4
 8003788:	3542      	adds	r5, #66	@ 0x42
 800378a:	702a      	strb	r2, [r5, #0]
 800378c:	e022      	b.n	80037d4 <_printf_i+0x7c>
 800378e:	0010      	movs	r0, r2
 8003790:	3863      	subs	r0, #99	@ 0x63
 8003792:	2815      	cmp	r0, #21
 8003794:	d8f7      	bhi.n	8003786 <_printf_i+0x2e>
 8003796:	f7fc fcb7 	bl	8000108 <__gnu_thumb1_case_shi>
 800379a:	0016      	.short	0x0016
 800379c:	fff6001f 	.word	0xfff6001f
 80037a0:	fff6fff6 	.word	0xfff6fff6
 80037a4:	001ffff6 	.word	0x001ffff6
 80037a8:	fff6fff6 	.word	0xfff6fff6
 80037ac:	fff6fff6 	.word	0xfff6fff6
 80037b0:	0036009f 	.word	0x0036009f
 80037b4:	fff6007e 	.word	0xfff6007e
 80037b8:	00b0fff6 	.word	0x00b0fff6
 80037bc:	0036fff6 	.word	0x0036fff6
 80037c0:	fff6fff6 	.word	0xfff6fff6
 80037c4:	0082      	.short	0x0082
 80037c6:	0025      	movs	r5, r4
 80037c8:	681a      	ldr	r2, [r3, #0]
 80037ca:	3542      	adds	r5, #66	@ 0x42
 80037cc:	1d11      	adds	r1, r2, #4
 80037ce:	6019      	str	r1, [r3, #0]
 80037d0:	6813      	ldr	r3, [r2, #0]
 80037d2:	702b      	strb	r3, [r5, #0]
 80037d4:	2301      	movs	r3, #1
 80037d6:	e09e      	b.n	8003916 <_printf_i+0x1be>
 80037d8:	6818      	ldr	r0, [r3, #0]
 80037da:	6809      	ldr	r1, [r1, #0]
 80037dc:	1d02      	adds	r2, r0, #4
 80037de:	060d      	lsls	r5, r1, #24
 80037e0:	d50b      	bpl.n	80037fa <_printf_i+0xa2>
 80037e2:	6806      	ldr	r6, [r0, #0]
 80037e4:	601a      	str	r2, [r3, #0]
 80037e6:	2e00      	cmp	r6, #0
 80037e8:	da03      	bge.n	80037f2 <_printf_i+0x9a>
 80037ea:	232d      	movs	r3, #45	@ 0x2d
 80037ec:	9a03      	ldr	r2, [sp, #12]
 80037ee:	4276      	negs	r6, r6
 80037f0:	7013      	strb	r3, [r2, #0]
 80037f2:	4b5d      	ldr	r3, [pc, #372]	@ (8003968 <_printf_i+0x210>)
 80037f4:	270a      	movs	r7, #10
 80037f6:	9304      	str	r3, [sp, #16]
 80037f8:	e018      	b.n	800382c <_printf_i+0xd4>
 80037fa:	6806      	ldr	r6, [r0, #0]
 80037fc:	601a      	str	r2, [r3, #0]
 80037fe:	0649      	lsls	r1, r1, #25
 8003800:	d5f1      	bpl.n	80037e6 <_printf_i+0x8e>
 8003802:	b236      	sxth	r6, r6
 8003804:	e7ef      	b.n	80037e6 <_printf_i+0x8e>
 8003806:	6808      	ldr	r0, [r1, #0]
 8003808:	6819      	ldr	r1, [r3, #0]
 800380a:	c940      	ldmia	r1!, {r6}
 800380c:	0605      	lsls	r5, r0, #24
 800380e:	d402      	bmi.n	8003816 <_printf_i+0xbe>
 8003810:	0640      	lsls	r0, r0, #25
 8003812:	d500      	bpl.n	8003816 <_printf_i+0xbe>
 8003814:	b2b6      	uxth	r6, r6
 8003816:	6019      	str	r1, [r3, #0]
 8003818:	4b53      	ldr	r3, [pc, #332]	@ (8003968 <_printf_i+0x210>)
 800381a:	270a      	movs	r7, #10
 800381c:	9304      	str	r3, [sp, #16]
 800381e:	2a6f      	cmp	r2, #111	@ 0x6f
 8003820:	d100      	bne.n	8003824 <_printf_i+0xcc>
 8003822:	3f02      	subs	r7, #2
 8003824:	0023      	movs	r3, r4
 8003826:	2200      	movs	r2, #0
 8003828:	3343      	adds	r3, #67	@ 0x43
 800382a:	701a      	strb	r2, [r3, #0]
 800382c:	6863      	ldr	r3, [r4, #4]
 800382e:	60a3      	str	r3, [r4, #8]
 8003830:	2b00      	cmp	r3, #0
 8003832:	db06      	blt.n	8003842 <_printf_i+0xea>
 8003834:	2104      	movs	r1, #4
 8003836:	6822      	ldr	r2, [r4, #0]
 8003838:	9d03      	ldr	r5, [sp, #12]
 800383a:	438a      	bics	r2, r1
 800383c:	6022      	str	r2, [r4, #0]
 800383e:	4333      	orrs	r3, r6
 8003840:	d00c      	beq.n	800385c <_printf_i+0x104>
 8003842:	9d03      	ldr	r5, [sp, #12]
 8003844:	0030      	movs	r0, r6
 8003846:	0039      	movs	r1, r7
 8003848:	f7fc fcee 	bl	8000228 <__aeabi_uidivmod>
 800384c:	9b04      	ldr	r3, [sp, #16]
 800384e:	3d01      	subs	r5, #1
 8003850:	5c5b      	ldrb	r3, [r3, r1]
 8003852:	702b      	strb	r3, [r5, #0]
 8003854:	0033      	movs	r3, r6
 8003856:	0006      	movs	r6, r0
 8003858:	429f      	cmp	r7, r3
 800385a:	d9f3      	bls.n	8003844 <_printf_i+0xec>
 800385c:	2f08      	cmp	r7, #8
 800385e:	d109      	bne.n	8003874 <_printf_i+0x11c>
 8003860:	6823      	ldr	r3, [r4, #0]
 8003862:	07db      	lsls	r3, r3, #31
 8003864:	d506      	bpl.n	8003874 <_printf_i+0x11c>
 8003866:	6862      	ldr	r2, [r4, #4]
 8003868:	6923      	ldr	r3, [r4, #16]
 800386a:	429a      	cmp	r2, r3
 800386c:	dc02      	bgt.n	8003874 <_printf_i+0x11c>
 800386e:	2330      	movs	r3, #48	@ 0x30
 8003870:	3d01      	subs	r5, #1
 8003872:	702b      	strb	r3, [r5, #0]
 8003874:	9b03      	ldr	r3, [sp, #12]
 8003876:	1b5b      	subs	r3, r3, r5
 8003878:	6123      	str	r3, [r4, #16]
 800387a:	9b07      	ldr	r3, [sp, #28]
 800387c:	0021      	movs	r1, r4
 800387e:	9300      	str	r3, [sp, #0]
 8003880:	9805      	ldr	r0, [sp, #20]
 8003882:	9b06      	ldr	r3, [sp, #24]
 8003884:	aa09      	add	r2, sp, #36	@ 0x24
 8003886:	f7ff fef7 	bl	8003678 <_printf_common>
 800388a:	3001      	adds	r0, #1
 800388c:	d148      	bne.n	8003920 <_printf_i+0x1c8>
 800388e:	2001      	movs	r0, #1
 8003890:	4240      	negs	r0, r0
 8003892:	b00b      	add	sp, #44	@ 0x2c
 8003894:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003896:	2220      	movs	r2, #32
 8003898:	6809      	ldr	r1, [r1, #0]
 800389a:	430a      	orrs	r2, r1
 800389c:	6022      	str	r2, [r4, #0]
 800389e:	2278      	movs	r2, #120	@ 0x78
 80038a0:	4932      	ldr	r1, [pc, #200]	@ (800396c <_printf_i+0x214>)
 80038a2:	9104      	str	r1, [sp, #16]
 80038a4:	0021      	movs	r1, r4
 80038a6:	3145      	adds	r1, #69	@ 0x45
 80038a8:	700a      	strb	r2, [r1, #0]
 80038aa:	6819      	ldr	r1, [r3, #0]
 80038ac:	6822      	ldr	r2, [r4, #0]
 80038ae:	c940      	ldmia	r1!, {r6}
 80038b0:	0610      	lsls	r0, r2, #24
 80038b2:	d402      	bmi.n	80038ba <_printf_i+0x162>
 80038b4:	0650      	lsls	r0, r2, #25
 80038b6:	d500      	bpl.n	80038ba <_printf_i+0x162>
 80038b8:	b2b6      	uxth	r6, r6
 80038ba:	6019      	str	r1, [r3, #0]
 80038bc:	07d3      	lsls	r3, r2, #31
 80038be:	d502      	bpl.n	80038c6 <_printf_i+0x16e>
 80038c0:	2320      	movs	r3, #32
 80038c2:	4313      	orrs	r3, r2
 80038c4:	6023      	str	r3, [r4, #0]
 80038c6:	2e00      	cmp	r6, #0
 80038c8:	d001      	beq.n	80038ce <_printf_i+0x176>
 80038ca:	2710      	movs	r7, #16
 80038cc:	e7aa      	b.n	8003824 <_printf_i+0xcc>
 80038ce:	2220      	movs	r2, #32
 80038d0:	6823      	ldr	r3, [r4, #0]
 80038d2:	4393      	bics	r3, r2
 80038d4:	6023      	str	r3, [r4, #0]
 80038d6:	e7f8      	b.n	80038ca <_printf_i+0x172>
 80038d8:	681a      	ldr	r2, [r3, #0]
 80038da:	680d      	ldr	r5, [r1, #0]
 80038dc:	1d10      	adds	r0, r2, #4
 80038de:	6949      	ldr	r1, [r1, #20]
 80038e0:	6018      	str	r0, [r3, #0]
 80038e2:	6813      	ldr	r3, [r2, #0]
 80038e4:	062e      	lsls	r6, r5, #24
 80038e6:	d501      	bpl.n	80038ec <_printf_i+0x194>
 80038e8:	6019      	str	r1, [r3, #0]
 80038ea:	e002      	b.n	80038f2 <_printf_i+0x19a>
 80038ec:	066d      	lsls	r5, r5, #25
 80038ee:	d5fb      	bpl.n	80038e8 <_printf_i+0x190>
 80038f0:	8019      	strh	r1, [r3, #0]
 80038f2:	2300      	movs	r3, #0
 80038f4:	9d03      	ldr	r5, [sp, #12]
 80038f6:	6123      	str	r3, [r4, #16]
 80038f8:	e7bf      	b.n	800387a <_printf_i+0x122>
 80038fa:	681a      	ldr	r2, [r3, #0]
 80038fc:	1d11      	adds	r1, r2, #4
 80038fe:	6019      	str	r1, [r3, #0]
 8003900:	6815      	ldr	r5, [r2, #0]
 8003902:	2100      	movs	r1, #0
 8003904:	0028      	movs	r0, r5
 8003906:	6862      	ldr	r2, [r4, #4]
 8003908:	f000 f896 	bl	8003a38 <memchr>
 800390c:	2800      	cmp	r0, #0
 800390e:	d001      	beq.n	8003914 <_printf_i+0x1bc>
 8003910:	1b40      	subs	r0, r0, r5
 8003912:	6060      	str	r0, [r4, #4]
 8003914:	6863      	ldr	r3, [r4, #4]
 8003916:	6123      	str	r3, [r4, #16]
 8003918:	2300      	movs	r3, #0
 800391a:	9a03      	ldr	r2, [sp, #12]
 800391c:	7013      	strb	r3, [r2, #0]
 800391e:	e7ac      	b.n	800387a <_printf_i+0x122>
 8003920:	002a      	movs	r2, r5
 8003922:	6923      	ldr	r3, [r4, #16]
 8003924:	9906      	ldr	r1, [sp, #24]
 8003926:	9805      	ldr	r0, [sp, #20]
 8003928:	9d07      	ldr	r5, [sp, #28]
 800392a:	47a8      	blx	r5
 800392c:	3001      	adds	r0, #1
 800392e:	d0ae      	beq.n	800388e <_printf_i+0x136>
 8003930:	6823      	ldr	r3, [r4, #0]
 8003932:	079b      	lsls	r3, r3, #30
 8003934:	d415      	bmi.n	8003962 <_printf_i+0x20a>
 8003936:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003938:	68e0      	ldr	r0, [r4, #12]
 800393a:	4298      	cmp	r0, r3
 800393c:	daa9      	bge.n	8003892 <_printf_i+0x13a>
 800393e:	0018      	movs	r0, r3
 8003940:	e7a7      	b.n	8003892 <_printf_i+0x13a>
 8003942:	0022      	movs	r2, r4
 8003944:	2301      	movs	r3, #1
 8003946:	9906      	ldr	r1, [sp, #24]
 8003948:	9805      	ldr	r0, [sp, #20]
 800394a:	9e07      	ldr	r6, [sp, #28]
 800394c:	3219      	adds	r2, #25
 800394e:	47b0      	blx	r6
 8003950:	3001      	adds	r0, #1
 8003952:	d09c      	beq.n	800388e <_printf_i+0x136>
 8003954:	3501      	adds	r5, #1
 8003956:	68e3      	ldr	r3, [r4, #12]
 8003958:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800395a:	1a9b      	subs	r3, r3, r2
 800395c:	42ab      	cmp	r3, r5
 800395e:	dcf0      	bgt.n	8003942 <_printf_i+0x1ea>
 8003960:	e7e9      	b.n	8003936 <_printf_i+0x1de>
 8003962:	2500      	movs	r5, #0
 8003964:	e7f7      	b.n	8003956 <_printf_i+0x1fe>
 8003966:	46c0      	nop			@ (mov r8, r8)
 8003968:	08003bb1 	.word	0x08003bb1
 800396c:	08003bc2 	.word	0x08003bc2

08003970 <__malloc_lock>:
 8003970:	b510      	push	{r4, lr}
 8003972:	4802      	ldr	r0, [pc, #8]	@ (800397c <__malloc_lock+0xc>)
 8003974:	f7ff fc7e 	bl	8003274 <__retarget_lock_acquire_recursive>
 8003978:	bd10      	pop	{r4, pc}
 800397a:	46c0      	nop			@ (mov r8, r8)
 800397c:	20000274 	.word	0x20000274

08003980 <__malloc_unlock>:
 8003980:	b510      	push	{r4, lr}
 8003982:	4802      	ldr	r0, [pc, #8]	@ (800398c <__malloc_unlock+0xc>)
 8003984:	f7ff fc77 	bl	8003276 <__retarget_lock_release_recursive>
 8003988:	bd10      	pop	{r4, pc}
 800398a:	46c0      	nop			@ (mov r8, r8)
 800398c:	20000274 	.word	0x20000274

08003990 <_realloc_r>:
 8003990:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003992:	0006      	movs	r6, r0
 8003994:	000c      	movs	r4, r1
 8003996:	0015      	movs	r5, r2
 8003998:	2900      	cmp	r1, #0
 800399a:	d105      	bne.n	80039a8 <_realloc_r+0x18>
 800399c:	0011      	movs	r1, r2
 800399e:	f7ff fdeb 	bl	8003578 <_malloc_r>
 80039a2:	0004      	movs	r4, r0
 80039a4:	0020      	movs	r0, r4
 80039a6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80039a8:	2a00      	cmp	r2, #0
 80039aa:	d103      	bne.n	80039b4 <_realloc_r+0x24>
 80039ac:	f000 f858 	bl	8003a60 <_free_r>
 80039b0:	002c      	movs	r4, r5
 80039b2:	e7f7      	b.n	80039a4 <_realloc_r+0x14>
 80039b4:	f000 f89e 	bl	8003af4 <_malloc_usable_size_r>
 80039b8:	0007      	movs	r7, r0
 80039ba:	4285      	cmp	r5, r0
 80039bc:	d802      	bhi.n	80039c4 <_realloc_r+0x34>
 80039be:	0843      	lsrs	r3, r0, #1
 80039c0:	42ab      	cmp	r3, r5
 80039c2:	d3ef      	bcc.n	80039a4 <_realloc_r+0x14>
 80039c4:	0029      	movs	r1, r5
 80039c6:	0030      	movs	r0, r6
 80039c8:	f7ff fdd6 	bl	8003578 <_malloc_r>
 80039cc:	9001      	str	r0, [sp, #4]
 80039ce:	2800      	cmp	r0, #0
 80039d0:	d101      	bne.n	80039d6 <_realloc_r+0x46>
 80039d2:	9c01      	ldr	r4, [sp, #4]
 80039d4:	e7e6      	b.n	80039a4 <_realloc_r+0x14>
 80039d6:	002a      	movs	r2, r5
 80039d8:	42bd      	cmp	r5, r7
 80039da:	d900      	bls.n	80039de <_realloc_r+0x4e>
 80039dc:	003a      	movs	r2, r7
 80039de:	0021      	movs	r1, r4
 80039e0:	9801      	ldr	r0, [sp, #4]
 80039e2:	f000 f834 	bl	8003a4e <memcpy>
 80039e6:	0021      	movs	r1, r4
 80039e8:	0030      	movs	r0, r6
 80039ea:	f000 f839 	bl	8003a60 <_free_r>
 80039ee:	e7f0      	b.n	80039d2 <_realloc_r+0x42>

080039f0 <memmove>:
 80039f0:	b510      	push	{r4, lr}
 80039f2:	4288      	cmp	r0, r1
 80039f4:	d902      	bls.n	80039fc <memmove+0xc>
 80039f6:	188b      	adds	r3, r1, r2
 80039f8:	4298      	cmp	r0, r3
 80039fa:	d308      	bcc.n	8003a0e <memmove+0x1e>
 80039fc:	2300      	movs	r3, #0
 80039fe:	429a      	cmp	r2, r3
 8003a00:	d007      	beq.n	8003a12 <memmove+0x22>
 8003a02:	5ccc      	ldrb	r4, [r1, r3]
 8003a04:	54c4      	strb	r4, [r0, r3]
 8003a06:	3301      	adds	r3, #1
 8003a08:	e7f9      	b.n	80039fe <memmove+0xe>
 8003a0a:	5c8b      	ldrb	r3, [r1, r2]
 8003a0c:	5483      	strb	r3, [r0, r2]
 8003a0e:	3a01      	subs	r2, #1
 8003a10:	d2fb      	bcs.n	8003a0a <memmove+0x1a>
 8003a12:	bd10      	pop	{r4, pc}

08003a14 <_sbrk_r>:
 8003a14:	2300      	movs	r3, #0
 8003a16:	b570      	push	{r4, r5, r6, lr}
 8003a18:	4d06      	ldr	r5, [pc, #24]	@ (8003a34 <_sbrk_r+0x20>)
 8003a1a:	0004      	movs	r4, r0
 8003a1c:	0008      	movs	r0, r1
 8003a1e:	602b      	str	r3, [r5, #0]
 8003a20:	f7fd fb10 	bl	8001044 <_sbrk>
 8003a24:	1c43      	adds	r3, r0, #1
 8003a26:	d103      	bne.n	8003a30 <_sbrk_r+0x1c>
 8003a28:	682b      	ldr	r3, [r5, #0]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d000      	beq.n	8003a30 <_sbrk_r+0x1c>
 8003a2e:	6023      	str	r3, [r4, #0]
 8003a30:	bd70      	pop	{r4, r5, r6, pc}
 8003a32:	46c0      	nop			@ (mov r8, r8)
 8003a34:	20000280 	.word	0x20000280

08003a38 <memchr>:
 8003a38:	b2c9      	uxtb	r1, r1
 8003a3a:	1882      	adds	r2, r0, r2
 8003a3c:	4290      	cmp	r0, r2
 8003a3e:	d101      	bne.n	8003a44 <memchr+0xc>
 8003a40:	2000      	movs	r0, #0
 8003a42:	4770      	bx	lr
 8003a44:	7803      	ldrb	r3, [r0, #0]
 8003a46:	428b      	cmp	r3, r1
 8003a48:	d0fb      	beq.n	8003a42 <memchr+0xa>
 8003a4a:	3001      	adds	r0, #1
 8003a4c:	e7f6      	b.n	8003a3c <memchr+0x4>

08003a4e <memcpy>:
 8003a4e:	2300      	movs	r3, #0
 8003a50:	b510      	push	{r4, lr}
 8003a52:	429a      	cmp	r2, r3
 8003a54:	d100      	bne.n	8003a58 <memcpy+0xa>
 8003a56:	bd10      	pop	{r4, pc}
 8003a58:	5ccc      	ldrb	r4, [r1, r3]
 8003a5a:	54c4      	strb	r4, [r0, r3]
 8003a5c:	3301      	adds	r3, #1
 8003a5e:	e7f8      	b.n	8003a52 <memcpy+0x4>

08003a60 <_free_r>:
 8003a60:	b570      	push	{r4, r5, r6, lr}
 8003a62:	0005      	movs	r5, r0
 8003a64:	1e0c      	subs	r4, r1, #0
 8003a66:	d010      	beq.n	8003a8a <_free_r+0x2a>
 8003a68:	3c04      	subs	r4, #4
 8003a6a:	6823      	ldr	r3, [r4, #0]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	da00      	bge.n	8003a72 <_free_r+0x12>
 8003a70:	18e4      	adds	r4, r4, r3
 8003a72:	0028      	movs	r0, r5
 8003a74:	f7ff ff7c 	bl	8003970 <__malloc_lock>
 8003a78:	4a1d      	ldr	r2, [pc, #116]	@ (8003af0 <_free_r+0x90>)
 8003a7a:	6813      	ldr	r3, [r2, #0]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d105      	bne.n	8003a8c <_free_r+0x2c>
 8003a80:	6063      	str	r3, [r4, #4]
 8003a82:	6014      	str	r4, [r2, #0]
 8003a84:	0028      	movs	r0, r5
 8003a86:	f7ff ff7b 	bl	8003980 <__malloc_unlock>
 8003a8a:	bd70      	pop	{r4, r5, r6, pc}
 8003a8c:	42a3      	cmp	r3, r4
 8003a8e:	d908      	bls.n	8003aa2 <_free_r+0x42>
 8003a90:	6820      	ldr	r0, [r4, #0]
 8003a92:	1821      	adds	r1, r4, r0
 8003a94:	428b      	cmp	r3, r1
 8003a96:	d1f3      	bne.n	8003a80 <_free_r+0x20>
 8003a98:	6819      	ldr	r1, [r3, #0]
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	1809      	adds	r1, r1, r0
 8003a9e:	6021      	str	r1, [r4, #0]
 8003aa0:	e7ee      	b.n	8003a80 <_free_r+0x20>
 8003aa2:	001a      	movs	r2, r3
 8003aa4:	685b      	ldr	r3, [r3, #4]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d001      	beq.n	8003aae <_free_r+0x4e>
 8003aaa:	42a3      	cmp	r3, r4
 8003aac:	d9f9      	bls.n	8003aa2 <_free_r+0x42>
 8003aae:	6811      	ldr	r1, [r2, #0]
 8003ab0:	1850      	adds	r0, r2, r1
 8003ab2:	42a0      	cmp	r0, r4
 8003ab4:	d10b      	bne.n	8003ace <_free_r+0x6e>
 8003ab6:	6820      	ldr	r0, [r4, #0]
 8003ab8:	1809      	adds	r1, r1, r0
 8003aba:	1850      	adds	r0, r2, r1
 8003abc:	6011      	str	r1, [r2, #0]
 8003abe:	4283      	cmp	r3, r0
 8003ac0:	d1e0      	bne.n	8003a84 <_free_r+0x24>
 8003ac2:	6818      	ldr	r0, [r3, #0]
 8003ac4:	685b      	ldr	r3, [r3, #4]
 8003ac6:	1841      	adds	r1, r0, r1
 8003ac8:	6011      	str	r1, [r2, #0]
 8003aca:	6053      	str	r3, [r2, #4]
 8003acc:	e7da      	b.n	8003a84 <_free_r+0x24>
 8003ace:	42a0      	cmp	r0, r4
 8003ad0:	d902      	bls.n	8003ad8 <_free_r+0x78>
 8003ad2:	230c      	movs	r3, #12
 8003ad4:	602b      	str	r3, [r5, #0]
 8003ad6:	e7d5      	b.n	8003a84 <_free_r+0x24>
 8003ad8:	6820      	ldr	r0, [r4, #0]
 8003ada:	1821      	adds	r1, r4, r0
 8003adc:	428b      	cmp	r3, r1
 8003ade:	d103      	bne.n	8003ae8 <_free_r+0x88>
 8003ae0:	6819      	ldr	r1, [r3, #0]
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	1809      	adds	r1, r1, r0
 8003ae6:	6021      	str	r1, [r4, #0]
 8003ae8:	6063      	str	r3, [r4, #4]
 8003aea:	6054      	str	r4, [r2, #4]
 8003aec:	e7ca      	b.n	8003a84 <_free_r+0x24>
 8003aee:	46c0      	nop			@ (mov r8, r8)
 8003af0:	2000027c 	.word	0x2000027c

08003af4 <_malloc_usable_size_r>:
 8003af4:	1f0b      	subs	r3, r1, #4
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	1f18      	subs	r0, r3, #4
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	da01      	bge.n	8003b02 <_malloc_usable_size_r+0xe>
 8003afe:	580b      	ldr	r3, [r1, r0]
 8003b00:	18c0      	adds	r0, r0, r3
 8003b02:	4770      	bx	lr

08003b04 <_init>:
 8003b04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b06:	46c0      	nop			@ (mov r8, r8)
 8003b08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b0a:	bc08      	pop	{r3}
 8003b0c:	469e      	mov	lr, r3
 8003b0e:	4770      	bx	lr

08003b10 <_fini>:
 8003b10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b12:	46c0      	nop			@ (mov r8, r8)
 8003b14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b16:	bc08      	pop	{r3}
 8003b18:	469e      	mov	lr, r3
 8003b1a:	4770      	bx	lr
